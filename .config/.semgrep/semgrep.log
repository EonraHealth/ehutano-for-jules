2025-06-01 17:17:56,901 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-06-01 17:17:56,906 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-06-01 17:17:56,907 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-06-01 17:17:57,091 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-06-01 17:17:57,095 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-8uet09io.rules
2025-06-01 17:17:57,296 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEI75MkSp/semgrep/bin/semgrep-core-proprietary'.
2025-06-01 17:17:57,749 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-06-01 17:17:57,750 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-06-01 17:17:57,750 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-06-01 17:17:57,751 - semgrep.config_resolver - DEBUG - loaded 1 configs in 0.8439552783966064
2025-06-01 17:17:57,850 - semgrep.run_scan - VERBOSE - running 711 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-06-01 17:17:57,850 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-06-01 17:17:57,853 - semgrep.run_scan - VERBOSE - Rules:
2025-06-01 17:17:57,853 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-06-01 17:17:58,574 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-06-01 17:17:58,813 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-06-01 17:17:58,813 - semgrep.core_runner - DEBUG - /tmp/_MEI75MkSp/semgrep/bin/opengrep-core -json -rules /tmp/tmp7i9jhtr6.json -j 8 -targets /tmp/tmphtegqmnc -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-06-01 17:18:30,569 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.07][[34mINFO[0m]: Executed as: /tmp/_MEI75MkSp/semgrep/bin/opengrep-core -json -rules /tmp/tmp7i9jhtr6.json -j 8 -targets /tmp/tmphtegqmnc -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.07][[34mINFO[0m]: Version: 1.2.0
[00.07][[34mINFO[0m]: Parsing rules in /tmp/tmp7i9jhtr6.json
[00.55][[34mINFO[0m]: scan: processing 514 files (skipping 0), with 454 rules (skipping 0 )
[05.21][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/StockInventoryManagement.tsx func: StockInventoryManagement:26876]
[0m[05.42][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/StockInventoryManagement.tsx func: StockInventoryManagement:26876]
[0m[05.66][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/StockInventoryManagement.tsx func: StockInventoryManagement:26876]
[0m[06.20][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.raw-html-concat file: client/src/components/pharmacy/StockInventoryManagement.tsx func: StockInventoryManagement:26876]
[0m[07.10][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[07.72][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[07.82][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/common/ContextualHelp.tsx func: ???]
[0m[07.83][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/auth/RegisterForm.tsx func: ???]
[0m[08.51][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[08.51][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/pages/MobilePatientApp.tsx func: MobilePatientApp:55692]
[0m[08.93][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/MobilePatientApp.tsx func: MobilePatientApp:55692]
[0m[09.05][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[09.56][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/pages/MobilePatientApp.tsx func: MobilePatientApp:55692]
[0m[09.79][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[10.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-regexp file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[11.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.remote-property-injection file: client/src/components/patient/PrescriptionPriceComparison.tsx func: PrescriptionPriceComparison:72710]
[0m[11.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[11.84][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[12.06][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[12.12][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/HomePage.tsx func: ???]
[0m[12.23][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[12.67][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[12.82][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/PharmacyAnalytics.tsx func: ???]
[0m[12.84][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[13.23][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/PharmacyAnalytics.tsx func: ???]
[0m[13.23][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/wellness/InteractiveCalendar.tsx func: InteractiveCalendar:91980]
[0m[13.35][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[13.59][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[13.98][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[14.27][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[14.60][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[14.90][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[14.92][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/MedicalAidClaimsManager.tsx func: ???]
[0m[15.20][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/PharmacyAssistant.tsx func: ???]
[0m[15.31][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/PharmacyAssistant.tsx func: ???]
[0m[15.67][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/patient/Prescriptions.tsx func: ???]
[0m[15.97][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[16.08][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: client/src/components/pharmacy/PharmacyAssistant.tsx func: ???]
[0m[16.65][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/wellness/WellnessHub.tsx func: ???]
[0m[16.75][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[16.96][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/wellness/WellnessHub.tsx func: ???]
[0m[17.78][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/PharmacyAssistant.tsx func: ???]
[0m[19.10][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: server/routes.ts func: registerRoutes:127603]
[0m[19.10][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/pages/GenericPage.tsx func: ???]
[0m[19.23][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[19.56][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/pages/GenericPage.tsx func: ???]
[0m[19.65][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[19.81][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: server/routes.ts func: registerRoutes:127603]
[0m[19.94][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/GenericPage.tsx func: ???]
[0m[20.01][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/GenericPage.tsx func: ???]
[0m[20.34][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/GenericPage.tsx func: ???]
[0m[20.42][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/GenericPage.tsx func: ???]
[0m[20.65][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[20.66][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: server/routes.ts func: registerRoutes:127603]
[0m[20.87][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[21.07][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[21.25][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[21.59][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[21.95][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/EfficientDispensingWorkflow.tsx func: ???]
[0m[22.51][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: client/src/components/doctor/DoctorDashboard.tsx func: ???]
[0m[22.83][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: server/routes.ts func: registerRoutes:127603]
[0m[22.96][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.res-render-injection file: client/src/pages/GenericPage.tsx func: ???]
[0m[23.31][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.remote-property-injection file: server/routes.ts func: registerRoutes:127603]
[0m[24.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[24.22][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/pages/GenericPage.tsx func: ???]
[0m[24.22][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/doctor/DoctorDashboard.tsx func: ???]
[0m[24.37][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[24.55][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[24.56][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/pages/GenericPage.tsx func: ???]
[0m[24.76][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[25.01][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-ssrf file: server/routes.ts func: registerRoutes:127603]
[0m[25.15][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[25.27][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[25.58][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[25.77][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[26.01][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/medical-aid/DirectClaimsPortal.tsx func: DirectClaimsPortal:224374]
[0m[26.03][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.express-insecure-template-usage file: client/src/pages/GenericPage.tsx func: ???]
[0m[26.25][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/medical-aid/DirectClaimsPortal.tsx func: DirectClaimsPortal:224374]
[0m[26.47][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.express-wkhtmltoimage-injection file: server/routes.ts func: registerRoutes:127603]
[0m[26.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[26.66][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[26.67][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/medical-aid/DirectClaimsPortal.tsx func: DirectClaimsPortal:224374]
[0m[26.79][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[26.85][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[26.94][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[27.02][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[27.15][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[27.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.js-open-redirect-from-function file: client/src/pages/GenericPage.tsx func: ???]
[0m[27.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[27.38][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[27.55][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[27.61][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.js-open-redirect-from-function file: client/src/pages/GenericPage.tsx func: ???]
[0m[27.67][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.js-open-redirect-from-function file: client/src/pages/GenericPage.tsx func: ???]
[0m[27.78][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[27.82][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[27.93][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[27.95][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.raw-html-concat file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[27.97][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.remote-property-injection file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[28.07][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.express-wkhtmltoimage-injection file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[28.09][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.raw-html-concat file: client/src/components/pharmacy/InventoryManagement.tsx func: ???]
[0m[28.09][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: server/routes.ts func: registerRoutes:127603]
[0m[28.11][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[28.36][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/BillingFinancialIntegration.tsx func: BillingFinancialIntegration:230578]
[0m[28.61][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[28.70][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.raw-html-concat file: client/src/pages/GenericPage.tsx func: ???]
[0m[29.16][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[29.31][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[29.48][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[29.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/pharmacy/OrderProcessing.tsx func: ???]
[0m[29.81][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.express-data-exfiltration file: server/routes.ts func: registerRoutes:127603]
[0m[29.86][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/pharmacy/OrderProcessing.tsx func: ???]
[0m[29.87][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/components/pharmacy/DeliveryManagement.tsx func: ???]
[0m[30.38][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.js-open-redirect-from-function file: server/routes.ts func: registerRoutes:127603]
[0m[31.70][[34mINFO[0m]: Custom ignore pattern: None
[31.70][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-06-01 17:18:30,674 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 3f58020e9a8a73bffff2e66ca82ca89f8291e9e5e3e434012a4997fdf12f8d7f3e6b6f10b6c16a5cbb0f2264384d8d1786700e3c07868b032c706623793d4f88_0
2025-06-01 17:18:30,675 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.tailwindcss.com" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.tailwindcss.com" > <script  src="https://cdn.tailwindcss.com" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e1cd23d1ea131f843f31ef4f34f2b4bfa50173fb196677082c065ef49c4f54c83f6bb6c317ed465ed7e5c662ede968b7e12672e2502b73fb13fd798fdba2df4f_0
2025-06-01 17:18:30,675 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.tailwindcss.com" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.tailwindcss.com" > <script  src="https://cdn.tailwindcss.com" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e1cd23d1ea131f843f31ef4f34f2b4bfa50173fb196677082c065ef49c4f54c83f6bb6c317ed465ed7e5c662ede968b7e12672e2502b73fb13fd798fdba2df4f_0
2025-06-01 17:18:30,676 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.tailwindcss.com" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.tailwindcss.com" > <script  src="https://cdn.tailwindcss.com" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = e1cd23d1ea131f843f31ef4f34f2b4bfa50173fb196677082c065ef49c4f54c83f6bb6c317ed465ed7e5c662ede968b7e12672e2502b73fb13fd798fdba2df4f_0
2025-06-01 17:18:30,676 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 3f58020e9a8a73bffff2e66ca82ca89f8291e9e5e3e434012a4997fdf12f8d7f3e6b6f10b6c16a5cbb0f2264384d8d1786700e3c07868b032c706623793d4f88_0
2025-06-01 17:18:30,677 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/react@18/umd/react.development.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/react@18/umd/react.development.js" > <script  src="https://unpkg.com/react@18/umd/react.development.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8bdef66226b53a8ad3d2ca6ad2f26fab0ffe0f38a5729ba31856dd53eebd030ae46ebea2b96d8f8105bbce5e8bbc5950747f1876a16d8e5ae203917515730a8c_0
2025-06-01 17:18:30,677 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/react@18/umd/react.development.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/react@18/umd/react.development.js" > <script  src="https://unpkg.com/react@18/umd/react.development.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8bdef66226b53a8ad3d2ca6ad2f26fab0ffe0f38a5729ba31856dd53eebd030ae46ebea2b96d8f8105bbce5e8bbc5950747f1876a16d8e5ae203917515730a8c_0
2025-06-01 17:18:30,678 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/react@18/umd/react.development.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/react@18/umd/react.development.js" > <script  src="https://unpkg.com/react@18/umd/react.development.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8bdef66226b53a8ad3d2ca6ad2f26fab0ffe0f38a5729ba31856dd53eebd030ae46ebea2b96d8f8105bbce5e8bbc5950747f1876a16d8e5ae203917515730a8c_0
2025-06-01 17:18:30,678 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 3f58020e9a8a73bffff2e66ca82ca89f8291e9e5e3e434012a4997fdf12f8d7f3e6b6f10b6c16a5cbb0f2264384d8d1786700e3c07868b032c706623793d4f88_0
2025-06-01 17:18:30,679 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" > <script  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = db0eb0e089167dc449468e228a3630dbe9e353fd78248c3fdc0ea3bff8f1dae98068d76372a1a1d5335cd36de209f18d53945d04521ec8d286c4eba69995d09a_0
2025-06-01 17:18:30,679 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" > <script  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = db0eb0e089167dc449468e228a3630dbe9e353fd78248c3fdc0ea3bff8f1dae98068d76372a1a1d5335cd36de209f18d53945d04521ec8d286c4eba69995d09a_0
2025-06-01 17:18:30,680 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" > <script  src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = db0eb0e089167dc449468e228a3630dbe9e353fd78248c3fdc0ea3bff8f1dae98068d76372a1a1d5335cd36de209f18d53945d04521ec8d286c4eba69995d09a_0
2025-06-01 17:18:30,680 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 3f58020e9a8a73bffff2e66ca82ca89f8291e9e5e3e434012a4997fdf12f8d7f3e6b6f10b6c16a5cbb0f2264384d8d1786700e3c07868b032c706623793d4f88_0
2025-06-01 17:18:30,681 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/@babel/standalone/babel.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/@babel/standalone/babel.min.js" > <script  src="https://unpkg.com/@babel/standalone/babel.min.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7ed2c40b7f56738404af8a2bc29a5c46b40ec449f075aef229637926abce16de6cec45e102aa754c44b02c1de318d878193c1089705c5610c5fe9d125dae5636_0
2025-06-01 17:18:30,682 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/@babel/standalone/babel.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/@babel/standalone/babel.min.js" > <script  src="https://unpkg.com/@babel/standalone/babel.min.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7ed2c40b7f56738404af8a2bc29a5c46b40ec449f075aef229637926abce16de6cec45e102aa754c44b02c1de318d878193c1089705c5610c5fe9d125dae5636_0
2025-06-01 17:18:30,682 - semgrep.rule_match - DEBUG - match_key = (' src="https://unpkg.com/@babel/standalone/babel.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://unpkg.com/@babel/standalone/babel.min.js" > <script  src="https://unpkg.com/@babel/standalone/babel.min.js" >...</script>', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 7ed2c40b7f56738404af8a2bc29a5c46b40ec449f075aef229637926abce16de6cec45e102aa754c44b02c1de318d878193c1089705c5610c5fe9d125dae5636_0
2025-06-01 17:18:30,721 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 33e2d33eb792d6b0d896c7ab5d8a78628560f501494475a3895cfdb6d2a87281f18fcadc922a8a00a7d51ccf4688da6af7e94abef3f335f5f5cf9e4e1faf5991_0
2025-06-01 17:18:30,768 - semgrep.rule_match - DEBUG - match_key = ('\r\n        // ***********************************************************************\r\n        // ehutano+ React Frontend Components (Structured Portals & Auth) - v6 - CORRECTED v6\r\n        // ***********************************************************************\r\n        // Final check: Ensuring no stray HTML comments are within the React JSX.\r\n        // ***********************************************************************\r\n\r\n        const { useState, useMemo, useEffect } = React;\r\n\r\n        // --- Mock Data ---\r\n        const MOCK_PATIENT_DATA = { name: \'Tendai Moyo\', medicalAid: { provider: \'Cimas\', memberId: \'CIM123456789\', verified: true }, recentOrders: [ { id: \'ORD789\', date: \'2025-04-18\', status: \'Delivered\', total: \'$15.50\', items: [\'Paracetamol 500mg\', \'Vitamin C Tabs\'] }, { id: \'ORD788\', date: \'2025-04-15\', status: \'Delivered\', total: \'$22.00\', items: [\'Amoxicillin 250mg (Script)\'] }, { id: \'ORD785\', date: \'2025-04-10\', status: \'Cancelled\', total: \'$8.75\', items: [\'Cough Syrup\'] }, ], prescriptions: [ { id: \'RX123\', medicine: \'Amoxicillin 250mg\', doctor: \'Dr. Chipo Musasa\', dateIssued: \'2025-04-14\', status: \'Filled\', refillsLeft: 0, uploadId: \'UPL001\' }, { id: \'RX124\', medicine: \'Lisinopril 10mg\', doctor: \'Dr. David Chen\', dateIssued: \'2025-03-20\', status: \'Active\', refillsLeft: 2, uploadId: \'UPL002\' }, { id: \'UPL003\', status: \'Pending Review\', dateUploaded: \'2025-04-25\', notes: \'Need urgently please\', isQuoteReady: false }, { id: \'UPL004\', status: \'Quote Ready\', dateUploaded: \'2025-04-24\', isQuoteReady: true, quote: { total: 35.50, items: [{ name: \'Metformin 500mg\', price: 9.50, qty: 1 }, { name: \'Amlodipine 5mg\', price: 13.00, qty: 2 }] } } ], reminders: [ { id: \'REM01\', type: \'Refill\', medicine: \'Lisinopril 10mg\', dueDate: \'2025-05-15\' }, { id: \'REM02\', type: \'Appointment\', details: \'Check-up with Dr. Chen\', dueDate: \'2025-05-01\' }, ], healthMetrics: { bloodPressure: \'120/80 mmHg\', lastCheckup: \'2025-03-20\', } };\r\n        const MOCK_PHARMACY_INVENTORY = [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', category: \'Pain Relief\', stock: 150, price: 2.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot A\' }, { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', category: \'Antibiotics\', stock: 45, price: 8.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot B\' }, { id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', category: \'Vitamins\', stock: 80, price: 5.75, supplier: \'HealthWell\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot C\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', category: \'Allergy\', stock: 5, price: 4.20, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-18\', status: \'Low Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot D\' }, { id: \'MED005\', name: \'Cough Syrup XYZ\', category: \'Cold & Flu\', stock: 0, price: 6.50, supplier: \'MediSupply\', lastUpdated: \'2025-04-15\', status: \'Out of Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'LocalChem\', wholesaleSource: \'MediSupply Lot E\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', category: \'Digestive Health\', stock: 60, price: 7.10, supplier: \'HealthWell\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot F\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', category: \'Pain Relief\', stock: 200, price: 3.10, supplier: \'MediSupply\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot G\' }, { id: \'MED008\', name: \'Metformin 500mg\', category: \'Diabetes\', stock: 70, price: 9.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'PharmaDistro Lot H\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', category: \'Antibiotics\', stock: 30, price: 12.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-21\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot I\' }, ];\r\n        const MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES = MOCK_PHARMACY_INVENTORY.map(item => ({ id: item.id, name: item.name, category: item.category, requiresPrescription: item.requiresPrescription, isAntibiotic: item.isAntibiotic, imageUrl: `https://placehold.co/150x150/e2e8f0/334155?text=${item.name.split(\' \')[0]}`, pharmacies: [ { name: \'Bonvie Pharmacy\', price: item.price, stockStatus: item.stock > 10 ? \'In Stock\' : (item.stock > 0 ? \'Low Stock\' : \'Out of Stock\') }, { name: \'Pulse Pharmacy\', price: item.price * 1.05, stockStatus: Math.random() > 0.2 ? \'In Stock\' : \'Low Stock\' }, { name: \'City Pharmacy\', price: item.price * 0.98, stockStatus: Math.random() > 0.1 ? \'In Stock\' : \'Out of Stock\' }, ].filter(p => p.stockStatus !== \'Out of Stock\'), }));\r\n        const MOCK_SALES_DATA = [ { name: \'Jan\', sales: 4000 }, { name: \'Feb\', sales: 3000 }, { name: \'Mar\', sales: 5000 }, { name: \'Apr\', sales: 4500 }, { name: \'May\', sales: 6000 }, { name: \'Jun\', sales: 5500 }, ];\r\n        const MOCK_PARTNER_LOGOS = [ { name: \'Cimas MedAid\', url: \'https://placehold.co/150x60/a5f3fc/0e7490?text=Cimas+Logo\' }, { name: \'Bonvie Pharmacy\', url: \'https://placehold.co/150x60/d8b4fe/581c87?text=Bonvie+Pharmacy\' }, { name: \'MediSupply Wholesalers\', url: \'https://placehold.co/150x60/fecaca/991b1b?text=MediSupply\' }, { name: \'Wellness Hub ZW\', url: \'https://placehold.co/150x60/a7f3d0/14532d?text=Wellness+Hub\' }, { name: \'Dr. Moyo Clinic\', url: \'https://placehold.co/150x60/bfdbfe/1e40af?text=Dr.+Moyo\' }, { name: \'First Mutual Health\', url: \'https://placehold.co/150x60/fed7aa/9a3412?text=FMH+Logo\' }, { name: \'Pulse Pharmacy\', url: \'https://placehold.co/150x60/fbcfe8/9d174d?text=Pulse+Pharmacy\' }, { name: \'PharmaDistro Ltd\', url: \'https://placehold.co/150x60/e0e7ff/3730a3?text=PharmaDistro\' }, ];\r\n        const MOCK_PHARMACY_ORDERS = [ { id: \'ORD-PHARM-001\', patientName: \'Alice Banda\', date: \'2025-04-23\', status: \'Pending Payment\', total: 35.50, items: [{ id: \'MED002\', name: \'Amoxicillin 250mg Caps\', qty: 1 }, { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', qty: 2 }], medicalAidStatus: \'Pending Patient Auth\', amountCovered: 0.00, medicalAidProvider: \'Cimas\', requiresAction: true, paymentMethod: \'Medical Aid\', patientId: \'PAT001\' }, { id: \'ORD-PHARM-002\', patientName: \'Tendai Moyo\', date: \'2025-04-22\', status: \'Ready for Pickup\', total: 12.00, items: [{ id: \'MED009\', name: \'Ciprofloxacin 500mg\', qty: 1 }], medicalAidStatus: \'Received\', amountCovered: 10.00, medicalAidProvider: \'First Mutual Health\', requiresAction: true, paymentMethod: \'Medical Aid / Co-Pay\', patientId: \'PAT002\' }, { id: \'ORD-PHARM-003\', patientName: \'John Doe\', date: \'2025-04-21\', status: \'Completed\', total: 5.75, items: [{ id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: false, paymentMethod: \'EcoCash\', patientId: \'PAT003\' }, { id: \'ORD-PHARM-004\', patientName: \'Jane Smith\', date: \'2025-04-24\', status: \'Processing\', total: 9.50, items: [{ id: \'MED008\', name: \'Metformin 500mg\', qty: 1 }], medicalAidStatus: \'Claim Submitted\', amountCovered: 7.50, medicalAidProvider: \'Cimas\', requiresAction: false, paymentMethod: \'Medical Aid\', patientId: \'PAT004\' }, { id: \'ORD-PHARM-005\', patientName: \'Blessing R\', date: \'2025-04-25\', status: \'Pending Approval\', total: 25.00, items: [{ id: \'MED006\', name: \'Omeprazole 20mg Caps\', qty: 2 }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: true, paymentMethod: \'Cash on Delivery\', patientId: \'PAT005\' }, ];\r\n        const MOCK_VERIFICATION_DATA_VALID = { status: \'verified\', medicineName: \'Amoxicillin 250mg Caps\', batchNumber: \'BCH12345\', expiryDate: \'2026-12-31\', pharmacySource: \'Bonvie Pharmacy\', wholesaleSource: \'MediSupply Lot B\', manufacturer: \'GenericMed\', isAntibiotic: true, message: \'Medicine verified successfully. Genuine product.\' };\r\n        const MOCK_VERIFICATION_DATA_INVALID = { status: \'invalid\', message: \'Verification Failed! Product may be falsified. Report to pharmacy/MCAZ.\', isAntibiotic: false, };\r\n        const MOCK_VERIFICATION_DATA_EXPIRED = { status: \'expired\', medicineName: \'Paracetamol 500mg Tabs\', batchNumber: \'BCH67890\', expiryDate: \'2024-03-31\', pharmacySource: \'Pulse Pharmacy\', wholesaleSource: \'PharmaDistro Lot C\', manufacturer: \'PharmaCo\', isAntibiotic: false, message: \'Warning: This medicine has EXPIRED. Do not use.\' };\r\n        const MOCK_MARKET_WATCH_DATA = { fastMoving: [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', trend: \'+25% sales WoW\', source: \'Aggregated POS\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', trend: \'High seasonal demand\', source: \'AI Model\' }, { id: \'MED003\', name: \'Vitamin C 1000mg\', trend: \'+15% sales WoW\', source: \'Wholesaler Volume\' }, ], highDemand: [ { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', reason: \'Increased Rx volume\', source: \'E-Rx Trends\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', reason: \'UTI treatment spike\', source: \'Clinic Data\' }, { id: \'MEDXXX\', name: \'Salbutamol Inhalers\', reason: \'Allergy season onset\', source: \'AI Model\' }, ], stockOuts: [ { id: \'MED005\', name: \'Cough Syrup XYZ\', supplier: \'MediSupply\', note: \'ETA 3 days\', status: \'Out of Stock\', source: \'Wholesaler Feed\' }, { id: \'MEDXYZ\', name: \'Salbutamol Inhaler\', supplier: \'PharmaDistro\', note: \'Manufacturing delay\', status: \'Out of Stock\', source: \'Supplier Comms\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', supplier: \'PharmaDistro\', note: \'Multiple low levels\', status: \'Low Stock\', source: \'Aggregated Inventory\' }, ], priceAlerts: [ { id: \'MED008\', name: \'Metformin 500mg\', change: \'+5% supplier price\', note: \'Effective next cycle\', source: \'PharmaDistro Update\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', change: \'-3% promotion\', note: \'Limited time offer\', source: \'Supplier Bulletin\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', change: \'+8% import cost\', note: \'FX fluctuation\', source: \'Import Agent\' }, ], newlyRegistered: [ { id: \'MED101\', name: \'Generic Lisinopril 5mg\', supplier: \'NewGen Pharma\', date: \'2025-04-15\', source: \'MCAZ Registry\' }, { id: \'MED102\', name: \'Adv. Allergy Spray\', supplier: \'HealthWell\', date: \'2025-04-10\', source: \'MCAZ Registry\' }, ], recentlyImported: [ { id: \'MEDIMP01\', name: \'Vaccine Batch X\', source: \'WHO\', arrival: \'2025-04-20\', distributor: \'Govt Stores\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', source: \'EU Supplier\', arrival: \'2025-04-18\', distributor: \'PharmaDistro\' }, ], aiInsights: [ "AI Trend: Potential shortage of pediatric Paracetamol Syrup expected in 2 weeks based on consumption & low regional stock. Check inventory.", "Demand Forecast: 30%+ increase predicted for allergy meds next month (pollen). Consider early stocking.", "Opportunity: Promote Vitamin D based on seasonal patterns & low recent sales velocity.", "Pricing Anomaly: Ciprofloxacin wholesale price shows higher variance. Cross-check quotes.", ], };\r\n        const MOCK_ADVERTS = [ { id: \'AD001\', title: \'Bonvie Pharmacy: Flu Shots Available Now!\', imageUrl: \'https://placehold.co/300x100/d8b4fe/581c87?text=Bonvie+Flu+Shots\', link: \'#\', approvedBy: \'MCAZ Ref: AD/FLU/25/001\', type: \'Pharmacy Promotion\' }, { id: \'AD002\', title: \'MediSupply: Reliable Partner for Bulk Orders\', imageUrl: \'https://placehold.co/300x100/fecaca/991b1b?text=MediSupply+Wholesale\', link: \'#\', approvedBy: \'MCAZ Ref: AD/WS/25/003\', type: \'Wholesaler Service\' }, { id: \'AD003\', title: \'Stay Healthy with BrandX Vitamins\', imageUrl: \'https://placehold.co/300x100/a7f3d0/14532d?text=BrandX+Vitamins\', link: \'#\', approvedBy: \'MCAZ Ref: AD/PROD/25/015\', type: \'Product Promotion\' }, ];\r\n        const MOCK_WELLNESS_ACTIVITIES = [ { id: \'ACT001\', name: \'5-a-side Soccer\', day: \'Monday\', time: \'18:00\', location: \'Field A\', slots: 3, booked: false, icon: \'⚽\' }, { id: \'ACT002\', name: \'Yoga Class\', day: \'Tuesday\', time: \'07:00\', location: \'Studio 1\', slots: 5, booked: false, icon: \'🧘\' }, { id: \'ACT003\', name: \'Basketball Pickup\', day: \'Tuesday\', time: \'19:00\', location: \'Court 1\', slots: 8, booked: false, icon: \'🏀\' }, { id: \'ACT004\', name: \'Tennis Singles\', day: \'Wednesday\', time: \'10:00\', location: \'Court 2\', slots: 1, booked: true, icon: \'🎾\' }, { id: \'ACT005\', name: \'Health Walk\', day: \'Thursday\', time: \'06:30\', location: \'Park Entrance\', slots: 15, booked: false, icon: \'🚶\u200d♀️\' }, { id: \'ACT006\', name: \'Zumba Fitness\', day: \'Friday\', time: \'17:30\', location: \'Studio 2\', slots: 0, booked: false, icon: \'💃\' }, { id: \'ACT007\', name: \'Diabetes Support\', day: \'Wednesday\', time: \'14:00\', location: \'Room 1\', slots: 10, booked: false, icon: \'💬\' }, { id: \'ACT008\', name: \'Healthy Cooking\', day: \'Thursday\', time: \'12:00\', location: \'Demo Kitchen\', slots: 6, booked: false, icon: \'🧑\u200d🍳\' }, ];\r\n        const MOCK_BLOG_POSTS = [ { id: \'BLOG001\', title: \'Seasonal Allergies in Zim\', date: \'2025-04-20\', author: \'Dr. Musasa\', snippet: \'Manage symptoms with local tips...\', imageUrl: \'https://placehold.co/300x150/a7f3d0/14532d?text=Allergies\', category: \'General Health\' }, { id: \'BLOG002\', title: \'Importance of Hydration\', date: \'2025-04-15\', author: \'Wellness Team\', snippet: \'Crucial for health in warmer climates...\', imageUrl: \'https://placehold.co/300x150/bfdbfe/1e40af?text=Hydration\', category: \'Lifestyle\' }, { id: \'BLOG003\', title: \'Simple Home Exercises\', date: \'2025-04-10\', author: \'Coach Themba\', snippet: \'Stay active without leaving home...\', imageUrl: \'https://placehold.co/300x150/fecaca/991b1b?text=Home+Exercise\', category: \'Fitness\' }, { id: \'BLOG004\', title: \'Healthy Eating on Budget\', date: \'2025-04-05\', author: \'Nutritionist N.\', snippet: \'Affordable & nutritious local options...\', imageUrl: \'https://placehold.co/300x150/fed7aa/9a3412?text=Healthy+Eating\', category: \'Nutrition\' }, { id: \'BLOG005\', title: \'Managing Type 2 Diabetes\', date: \'2025-04-22\', author: \'Diabetes Educator\', snippet: \'Lifestyle changes are vital...\', imageUrl: \'https://placehold.co/300x150/fde68a/ca8a04?text=Diabetes+Mgmt\', category: \'Diabetes\' }, { id: \'BLOG006\', title: \'Managing High Blood Pressure\', date: \'2025-04-18\', author: \'Dr. Chen\', snippet: \'Learn risks & management steps...\', imageUrl: \'https://placehold.co/300x150/fda4af/be123c?text=Hypertension\', category: \'Heart Health\' }, ];\r\n\r\n        // --- UI Components ---\r\n        const Button = ({ children, variant = \'default\', size = \'default\', className = \'\', disabled, ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"; const variants = { default: "bg-blue-600 text-white hover:bg-blue-700/90", destructive: "bg-red-600 text-white hover:bg-red-700/90", outline: "border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-900", secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200/80", ghost: "hover:bg-gray-100 hover:text-gray-900", link: "text-blue-600 underline-offset-4 hover:underline", success: "bg-green-600 text-white hover:bg-green-700/90", warning: "bg-yellow-400 text-yellow-900 hover:bg-yellow-500/90", }; const sizes = { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }; const variantStyle = variants[variant] || variants.default; return <button disabled={disabled} className={`${baseStyle} ${variantStyle} ${sizes[size]} ${className}`} {...props}>{children}</button>; };\r\n        const Card = ({ children, className = \'\', ...props }) => ( <div className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`} {...props}>{children}</div> );\r\n        const CardHeader = ({ children, className = \'\', ...props }) => <div className={`flex flex-col space-y-1.5 p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardTitle = ({ children, className = \'\', ...props }) => <h3 className={`text-lg md:text-xl font-semibold leading-none tracking-tight ${className}`} {...props}>{children}</h3>;\r\n        const CardDescription = ({ children, className = \'\', ...props }) => <p className={`text-sm text-gray-500 ${className}`} {...props}>{children}</p>;\r\n        const CardContent = ({ children, className = \'\', ...props }) => <div className={`p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardFooter = ({ children, className = \'\', ...props }) => <div className={`flex items-center p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const Table = ({ children, className = \'\', ...props }) => <div className="w-full overflow-auto"><table className={`w-full caption-bottom text-sm ${className}`} {...props}>{children}</table></div>;\r\n        const TableHeader = ({ children, className = \'\', ...props }) => <thead className={`[&_tr]:border-b bg-gray-50 ${className}`} {...props}>{children}</thead>;\r\n        const TableBody = ({ children, className = \'\', ...props }) => <tbody className={`[&_tr:last-child]:border-0 divide-y divide-gray-200 ${className}`} {...props}>{children}</tbody>;\r\n        const TableFooter = ({ children, className = \'\', ...props }) => <tfoot className={`border-t bg-gray-100/50 font-medium ${className}`} {...props}>{children}</tfoot>;\r\n        const TableRow = ({ children, className = \'\', ...props }) => <tr className={`border-b border-gray-200 transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-blue-50 ${className}`} {...props}>{children}</tr>;\r\n        const TableHead = ({ children, className = \'\', ...props }) => <th className={`h-12 px-4 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>{children}</th>;\r\n        const TableCell = ({ children, className = \'\', ...props }) => <td className={`p-4 align-middle ${className}`} {...props}>{children}</td>;\r\n        const TableCaption = ({ children, className = \'\', ...props }) => <caption className={`mt-4 text-sm text-gray-500 ${className}`} {...props}>{children}</caption>;\r\n        const Input = ({ className = \'\', type = \'text\', ...props }) => ( <input type={type} className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Select = ({ children, className = \'\', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 appearance-none pr-8 bg-no-repeat bg-right bg-[url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="%236b7280" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/></svg>\')] ${className}`} {...props}> {children} </select> );\r\n        const SelectItem = ({ children, value, ...props }) => <option value={value} {...props}>{children}</option>;\r\n        const Badge = ({ children, variant = \'default\', className = \'\', ...props }) => { const baseStyle = "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"; const variants = { default: "border-transparent bg-blue-600 text-blue-50", secondary: "border-transparent bg-gray-200 text-gray-800", destructive: "border-transparent bg-red-600 text-red-50", outline: "text-gray-900 border-gray-300", success: "border-transparent bg-green-500 text-white", warning: "border-transparent bg-yellow-400 text-yellow-900", info: "border-transparent bg-sky-500 text-white", trendUp: "border-transparent bg-emerald-100 text-emerald-800", trendDown: "border-transparent bg-rose-100 text-rose-800", }; const variantStyle = variants[variant] || variants.default; return <span className={`${baseStyle} ${variantStyle} ${className}`} {...props}>{children}</span>; };\r\n        const Label = ({ children, className = \'\', ...props }) => ( <label className={`block text-sm font-medium text-gray-700 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}> {children} </label> );\r\n        const Textarea = ({ className = \'\', ...props }) => ( <textarea className={`flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Modal = ({ isOpen, onClose, title, children, maxWidth = \'lg\' }) => { if (!isOpen) return null; const widthClasses = { sm: \'max-w-sm\', md: \'max-w-md\', lg: \'max-w-lg\', xl: \'max-w-xl\', \'2xl\': \'max-w-2xl\', \'3xl\': \'max-w-3xl\', \'4xl\': \'max-w-4xl\' }; return ( <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 backdrop-blur-sm animate-fade-in" onClick={onClose}> <div className={`bg-white rounded-lg shadow-xl w-full ${widthClasses[maxWidth] || widthClasses.lg} max-h-[90vh] flex flex-col overflow-hidden transform transition-all animate-scale-in`} onClick={e => e.stopPropagation()} > <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10"> <h3 className="text-lg font-semibold text-gray-800">{title}</h3> <button onClick={onClose} className="text-gray-400 hover:text-gray-700 text-2xl leading-none p-1 rounded-full hover:bg-gray-100">&times;</button> </div> <div className="p-4 md:p-6 overflow-y-auto flex-grow"> {children} </div> </div> </div> ); };\r\n\r\n        // --- Icons ---\r\n        const ShoppingCart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="9" cy="21" r="1"/><circle cx="20" cy="21" r="1"/><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/></svg>;\r\n        const Pill = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"/><path d="m8.5 8.5 7 7"/></svg>;\r\n        const Bell = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/><path d="M13.73 21a2 2 0 0 1-3.46 0"/></svg>;\r\n        const FileText = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>;\r\n        const User = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;\r\n        const Search = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;\r\n        const PlusCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="16"/><line x1="8" x2="16" y1="12" y2="12"/></svg>;\r\n        const Filter = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;\r\n        const BarChart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="20" y2="10"/><line x1="18" x2="18" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="16"/></svg>;\r\n        const Settings = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0 2l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const UploadCloud = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M12 12v9"/><path d="m16 16-4-4-4 4"/></svg>;\r\n        const Stethoscope = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"/><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"/><circle cx="20" cy="10" r="2"/></svg>;\r\n        const Truck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>;\r\n        const Building = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><path d="M9 22v-4h6v4"/><path d="M8 6h.01"/><path d="M16 6h.01"/><path d="M12 6h.01"/><path d="M12 10h.01"/><path d="M12 14h.01"/><path d="M16 10h.01"/><path d="M16 14h.01"/><path d="M8 10h.01"/><path d="M8 14h.01"/></svg>;\r\n        const Activity = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>;\r\n        const Home = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;\r\n        const Users = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;\r\n        const MapPin = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>;\r\n        const LogIn = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/><polyline points="10 17 15 12 10 7"/><line x1="15" x2="3" y1="12" y2="12"/></svg>;\r\n        const LogOut = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>;\r\n        const HeartPulse = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.22 12H9.5l.7-1 2.1 2.1.8-1 1.9 1.9h5.27"/></svg>;\r\n        const FileSearch = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"/><path d="M14 2v6h6"/><circle cx="5" cy="14" r="3"/><path d="m9 18-1.5-1.5"/></svg>;\r\n        const FileCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="m9 15 2 2 4-4"/></svg>;\r\n        const CreditCard = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>;\r\n        const PackageCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16.19 11.26-4.19 4.19-1.53-1.53"/><path d="M22 11.16V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1.17"/><path d="m16 4 3 3H4"/><path d="M18 7.84V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12.17"/><path d="M21 10.84v.32a2 2 0 0 1-2 2H17"/><path d="M7 16h10"/></svg>;\r\n        const QrCode = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="5" height="5" x="3" y="3" rx="1"/><rect width="5" height="5" x="16" y="3" rx="1"/><rect width="5" height="5" x="3" y="16" rx="1"/><path d="M21 16h-3a2 2 0 0 0-2 2v3"/><path d="M21 21v.01"/><path d="M12 7v3a2 2 0 0 1-2 2H7"/><path d="M3 12h.01"/><path d="M12 3h.01"/><path d="M12 16v.01"/><path d="M16 12h1"/><path d="M21 12v.01"/><path d="M12 21v-1"/></svg>;\r\n        const AlertTriangle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>;\r\n        const CheckCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><path d="m9 11 3 3L22 4"/></svg>;\r\n        const XCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>;\r\n        const BookOpen = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;\r\n        const ClipboardList = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>;\r\n        const Info = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>;\r\n        const TrendingUp = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>;\r\n        const PackageX = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"/><path d="m7.5 4.27 9 5.15"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/><path d="m17 13 5 5"/><path d="m22 13-5 5"/></svg>;\r\n        const DollarSign = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;\r\n        const PackagePlus = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4a7 7 0 1 1-9 0"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><line x1="12" x2="12" y1="12" y2="22"/><polyline points="7 12 12 14.5 17 12"/><line x1="3.29" x2="12" y1="7" y2="12"/><line x1="20.71" x2="12" y1="7" y2="12"/><line x1="12" x2="12" y1="8" y2="10"/><line x1="10" x2="14" y1="9" y2="9"/></svg>;\r\n        const Cpu = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><rect width="6" height="6" x="9" y="9" rx="1"/><path d="M15 2v2"/><path d="M15 20v2"/><path d="M9 2v2"/><path d="M9 20v2"/><path d="M2 9h2"/><path d="M2 15h2"/><path d="M20 9h2"/><path d="M20 15h2"/><path d="M9 4V2"/><path d="M15 4V2"/><path d="M9 20v2"/><path d="M15 20v2"/></svg>;\r\n        const Megaphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 11 18-5v12L3 14v-3z"/><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"/></svg>;\r\n        const Eye = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const CalendarDays = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;\r\n        const Utensils = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>;\r\n        const Heart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/></svg>;\r\n        const Scale = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2"/><path d="M19 7h2"/></svg>;\r\n        const Brain = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3.06Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3.06Z"/></svg>;\r\n        const Package = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="16.5" x2="7.5" y1="9.4" y2="9.4"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27 6.96 12 12.01 20.73 6.96"/><line x1="12" x2="12" y1="22.08" y2="12"/></svg>;\r\n        const MonitorSmartphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"/><path d="M10 19v-3.96 3.15"/><path d="M7 19h5"/><rect width="6" height="10" x="16" y="12" rx="2"/></svg>;\r\n        const Receipt = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"/><path d="M8 8h8"/><path d="M8 12h8"/><path d="M10 16h4"/></svg>;\r\n        const HelpCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>;\r\n        const MessageSquare = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>;\r\n        const Fingerprint = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4"/><path d="M5 19.5A8.5 8.5 0 0 1 12 11a8.5 8.5 0 0 1 7 8.5"/><path d="M10 16.5c0 .8.7 1.5 1.5 1.5S13 17.3 13 16.5"/><path d="M16 14a1 1 0 0 1 1 1v1.5c0 .8-.7 1.5-1.5 1.5S14 17.3 14 16.5V15a1 1 0 0 1 1-1z"/><path d="M8 14a1 1 0 0 0-1 1v1.5c0 .8.7 1.5 1.5 1.5S10 17.3 10 16.5V15a1 1 0 0 0-1-1z"/><path d="M18 19.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/><path d="M6 19.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/><path d="M12 5.5c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5"/><path d="M15 8.5c0 .8-.7 1.5-1.5 1.5S12 9.3 12 8.5"/><path d="M12 11.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"/></svg>;\r\n        const TrendingDown = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>;\r\n\r\n        // --- Recharts Placeholder ---\r\n        const ResponsiveContainer = ({ children }) => <div className="w-full h-[300px] bg-gray-100 flex items-center justify-center text-gray-400 italic rounded border border-gray-200">{children}</div>;\r\n        const LineChart = ({ children, data }) => <div className="p-4">Line Chart Placeholder - Data: {data?.length} points</div>;\r\n        const BarChartComponent = ({ children, data }) => <div className="p-4">Bar Chart Placeholder - Data: {data?.length} points</div>;\r\n        const Line = (props) => null; const Bar = (props) => null; const XAxis = (props) => null; const YAxis = (props) => null; const CartesianGrid = (props) => null; const Tooltip = (props) => null; const Legend = (props) => null;\r\n\r\n        // Utility function\r\n        const getStatusBadgeVariant = (status) => { status = status?.toLowerCase() || \'\'; if (status.includes(\'complete\') || status.includes(\'paid\') || status.includes(\'in stock\') || status.includes(\'verified\') || status.includes(\'active\') || status.includes(\'claim submitted\') || status.includes(\'received\')) return \'success\'; if (status.includes(\'pending\') || status.includes(\'low stock\') || status.includes(\'expired\')) return \'warning\'; if (status.includes(\'processing\') || status.includes(\'ready\') || status.includes(\'shipped\')) return \'info\'; if (status.includes(\'reject\') || status.includes(\'cancel\') || status.includes(\'out of stock\') || status.includes(\'invalid\')) return \'destructive\'; return \'secondary\'; };\r\n        const getClaimStatusVariant = getStatusBadgeVariant;\r\n\r\n        // --- Landing Page ---\r\n        function LandingPage({ setActiveView, login, navigateTo }) { console.log("Rendering LandingPage"); return ( <div className="space-y-12"> <section className="text-center py-16 px-4 bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-lg shadow-sm"> <h1 className="text-4xl md:text-5xl font-bold text-blue-800 mb-4">Welcome to ehutano<span className="text-green-600">+</span></h1> <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">Your trusted digital partner for pharmacy services, health management, and community wellness in Zimbabwe.</p> <div className="flex flex-wrap justify-center gap-4"> <Button size="lg" onClick={() => navigateTo(\'medicineSearch\')}><Search className="mr-2 h-5 w-5" /> Find Medicines Now</Button> <Button size="lg" variant="outline" onClick={() => setActiveView(\'wellness\')}><Activity className="mr-2 h-5 w-5" /> Explore Wellness Hub</Button> </div> </section> <section className="grid md:grid-cols-3 gap-8 text-center"> <Card><CardHeader><Pill className="mx-auto h-10 w-10 text-blue-600 mb-2"/><CardTitle>Online Pharmacy</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Search, compare prices, order medicines, upload prescriptions.</p><Button variant="link" className="mt-4" onClick={() => login(\'patient\')}>Patient Login/Register</Button></CardContent></Card> <Card><CardHeader><Building className="mx-auto h-10 w-10 text-purple-600 mb-2"/><CardTitle>Pharmacy Portal</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Manage inventory, orders, market insights & analytics.</p><Button variant="link" className="mt-4" onClick={() => login(\'pharmacy\')}>Pharmacy Login/Register</Button></CardContent></Card> <Card><CardHeader><HeartPulse className="mx-auto h-10 w-10 text-green-600 mb-2"/><CardTitle>Wellness Hub</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Book events, access health resources, read wellness blog.</p><Button variant="link" className="mt-4" onClick={() => setActiveView(\'wellness\')}>Visit Wellness Hub</Button></CardContent></Card> </section> <section className="py-12 bg-gray-50 rounded-lg"> <div className="container mx-auto px-4 text-center"> <h2 className="text-3xl font-bold text-gray-800 mb-8">How ehutano+ Works</h2> <div className="grid md:grid-cols-4 gap-8"> <div className="flex flex-col items-center p-4"><div className="bg-blue-100 rounded-full p-4 mb-4"><FileSearch className="h-8 w-8 text-blue-600" /></div><h3 className="font-semibold mb-1">1. Search/Upload</h3><p className="text-sm text-gray-600">Find medicine or Rx.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-purple-100 rounded-full p-4 mb-4"><FileCheck className="h-8 w-8 text-purple-600" /></div><h3 className="font-semibold mb-1">2. Quote/Compare</h3><p className="text-sm text-gray-600">Get quote/prices.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-yellow-100 rounded-full p-4 mb-4"><CreditCard className="h-8 w-8 text-yellow-600" /></div><h3 className="font-semibold mb-1">3. Order & Pay</h3><p className="text-sm text-gray-600">Confirm & pay.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-green-100 rounded-full p-4 mb-4"><PackageCheck className="h-8 w-8 text-green-600" /></div><h3 className="font-semibold mb-1">4. Delivery/Pickup</h3><p className="text-sm text-gray-600">Receive/collect.</p></div> </div> </div> </section> <section className="py-12 bg-white border-t border-b border-gray-200"> <div className="container mx-auto px-4"> <h2 className="text-2xl font-semibold text-center text-gray-700 mb-10">Our Trusted Partners</h2> <div className="relative w-full overflow-hidden [mask-image:_linear-gradient(to_right,transparent_0,_black_128px,_black_calc(100%-128px),transparent_100%)]"> <div className="flex w-max animate-scroll hover:paused">{[...MOCK_PARTNER_LOGOS, ...MOCK_PARTNER_LOGOS].map((logo, index) => ( <div key={index} className="flex-shrink-0 mx-8 flex items-center justify-center h-16"><img src={logo.url} alt={`${logo.name} Logo`} className="max-h-full object-contain grayscale opacity-70 hover:grayscale-0 hover:opacity-100 transition-all duration-300" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/150x60/f0f0f0/c0c0c0?text=Err"; e.target.alt = `${logo.name} Err`; }}/></div> ))}</div> </div> </div> </section> <section className="text-center py-10 px-4 bg-gray-50 rounded-lg shadow-sm border"> <h2 className="text-2xl font-semibold text-gray-800 mb-4">Are you a Doctor or Wholesaler?</h2> <p className="text-gray-600 max-w-xl mx-auto mb-6">Join our network to streamline workflows and connect.</p> <div className="flex justify-center gap-4"> <Button variant="outline" onClick={() => login(\'doctor\')}><Stethoscope className="mr-2 h-4 w-4"/> Doctor Login/Register</Button> <Button variant="outline" onClick={() => login(\'wholesaler\')}><Truck className="mr-2 h-4 w-4"/> Wholesaler Login/Register</Button> </div> </section> </div> ); }\r\n\r\n        // --- Patient Portal Components ---\r\n        function PatientPortal({ setActiveView, openVerificationModal, patientData, navigateTo }) { console.log("Rendering PatientPortal"); const [currentSubView, setCurrentSubView] = useState(\'dashboard\'); const navigatePatientView = (view) => { setCurrentSubView(view); }; const renderPatientContent = () => { switch (currentSubView) { case \'search\': return <MedicineSearchListing navigatePatientView={navigatePatientView} navigateTo={navigateTo} />; case \'upload\': return <PrescriptionUpload navigatePatientView={navigatePatientView} />; case \'quotedRx\': const quoteReadyRx = patientData.prescriptions.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quoteReadyRx?.quote} navigatePatientView={navigatePatientView} />; case \'dashboard\': default: return <PatientDashboard setActiveView={setActiveView} openVerificationModal={openVerificationModal} patientData={patientData} navigatePatientView={navigatePatientView} />; } }; return ( <div className="space-y-6"> <nav className="flex space-x-1 border-b overflow-x-auto mb-6"> <Button variant={currentSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'dashboard\')} data-state={currentSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Home className="mr-1 h-4 w-4"/> Dashboard</Button> <Button variant={currentSubView === \'search\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'search\')} data-state={currentSubView === \'search\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Search className="mr-1 h-4 w-4"/> Find Medicine</Button> <Button variant={currentSubView === \'upload\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'upload\')} data-state={currentSubView === \'upload\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><UploadCloud className="mr-1 h-4 w-4"/> Upload Rx</Button> {patientData.prescriptions.some(rx => rx.isQuoteReady) && ( <Button variant={currentSubView === \'quotedRx\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'quotedRx\')} data-state={currentSubView === \'quotedRx\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent relative"> <FileCheck className="mr-1 h-4 w-4"/> View Quote <span className="absolute top-0 right-0 block h-2 w-2 rounded-full ring-1 ring-white bg-red-500"/> </Button> )} </nav> {renderPatientContent()} </div> ); }\r\n        function PatientDashboard({ setActiveView, openVerificationModal, patientData, navigatePatientView }) { const patient = patientData; const handleScan = (mockData) => { const inventoryItem = MOCK_PHARMACY_INVENTORY.find(item => item.name === mockData.medicineName); const fullVerificationData = { ...mockData, wholesaleSource: inventoryItem?.wholesaleSource || \'N/A\', manufacturer: inventoryItem?.manufacturer || \'N/A\', }; openVerificationModal(fullVerificationData); }; const handleScanValidAntibiotic = () => handleScan(MOCK_VERIFICATION_DATA_VALID); const handleScanValidNonAntibiotic = () => handleScan({ ...MOCK_VERIFICATION_DATA_VALID, isAntibiotic: false, medicineName: \'Paracetamol 500mg Tabs\' }); const handleScanInvalid = () => handleScan(MOCK_VERIFICATION_DATA_INVALID); const handleScanExpired = () => handleScan(MOCK_VERIFICATION_DATA_EXPIRED); const quoteReadyRx = patient.prescriptions.find(rx => rx.isQuoteReady); return ( <div className="space-y-6"> {quoteReadyRx && ( <Card className="bg-gradient-to-r from-green-100 to-emerald-100 border-green-300"> <CardContent className="pt-4 flex flex-col sm:flex-row items-center justify-between gap-4"> <div className="flex items-center gap-3"> <FileCheck className="h-8 w-8 text-green-700 flex-shrink-0" /> <div> <h4 className="font-semibold text-green-800">Prescription Quote Ready!</h4> <p className="text-sm text-green-700">Quote for {quoteReadyRx.id} is available.</p> </div> </div> <Button onClick={() => navigatePatientView(\'quotedRx\')} className="bg-green-600 hover:bg-green-700 mt-2 sm:mt-0 flex-shrink-0">View Quote</Button> </CardContent> </Card> )} <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'search\')}> <Search className="mr-2 h-5 w-5 text-blue-600"/> <span>Order Medicine</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'upload\')}> <UploadCloud className="mr-2 h-5 w-5 text-green-600"/> <span>Upload Rx</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={handleScanValidAntibiotic}> <QrCode className="mr-2 h-5 w-5 text-indigo-600"/> <span>Verify Meds</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => alert(\'Pholder: Appointments\')}> <Stethoscope className="mr-2 h-5 w-5 text-purple-600"/> <span>Appointments</span> </Button> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <Card> <CardHeader> <CardTitle>Recent Orders</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>ID</TableHead> <TableHead>Date</TableHead> <TableHead>Status</TableHead> <TableHead>Total</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {patient.recentOrders.map((order) => ( <TableRow key={order.id}> <TableCell className="font-medium">{order.id}</TableCell> <TableCell>{order.date}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell>{order.total}</TableCell> <TableCell><Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View order ${order.id}`)}>View</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Orders\')}>View All Orders</Button> </CardFooter> </Card> </div> <div className="space-y-6"> <Card> <CardHeader> <CardTitle>My Prescriptions</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-60 overflow-y-auto pt-4"> {patient.prescriptions.filter(rx => !rx.isQuoteReady).map((rx) => ( <div key={rx.id} className={`text-sm p-3 rounded-lg border bg-gray-50`}> {rx.medicine ? ( <> <p className="font-semibold">{rx.medicine}</p> <p className="text-xs text-gray-600">Dr. {rx.doctor} ({rx.dateIssued})</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge> ({rx.refillsLeft} refills)</p> {rx.status === \'Active\' && rx.refillsLeft > 0 && ( <Button variant="link" size="sm" className="p-0 h-auto mt-1 text-xs" onClick={() => alert(`Pholder: Refill ${rx.medicine}`)}>Request Refill</Button> )} </> ) : ( <> <p className="font-semibold">Uploaded Rx ({rx.id})</p> <p className="text-xs text-gray-600">Uploaded: {rx.dateUploaded}</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge></p> {rx.notes && <p className="text-xs italic">Notes: "{rx.notes}"</p>} </> )} </div> ))} {patient.prescriptions.filter(rx => !rx.isQuoteReady).length === 0 && <p className="text-sm text-gray-500">No active/pending Rxs.</p>} </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Rxs\')}>View All Prescriptions</Button> </CardFooter> </Card> <Card> <CardHeader> <CardTitle>Reminders</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-48 overflow-y-auto pt-4"> {patient.reminders.map((rem) => ( <div key={rem.id} className="text-sm p-3 bg-blue-50 rounded-lg border border-blue-200 flex justify-between items-center"> <div><p className="font-semibold">{rem.type === \'Refill\' ? `Refill: ${rem.medicine}` : rem.details}</p><p className="text-xs text-gray-600">Due: {rem.dueDate}</p></div> <Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Dismiss ${rem.id}`)}>X</Button> </div> ))} {patient.reminders.length === 0 && <p className="text-sm text-gray-500">No reminders.</p>} </CardContent> </Card> </div> </div> <Card> <CardHeader> <CardTitle>Need Help?</CardTitle> </CardHeader> <CardContent className="pt-4 flex flex-wrap gap-4 justify-center"> <Button variant="outline" onClick={() => alert(\'Pholder: AI Chat\')}> <HelpCircle className="mr-2 h-4 w-4"/> Ask AI </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Live Chat\')}> <MessageSquare className="mr-2 h-4 w-4"/> Chat Pharmacist </Button> </CardContent> </Card> <Card className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200"> <CardHeader> <CardTitle className="text-green-800">Wellness Hub</CardTitle> </CardHeader> <CardContent className="pt-4 flex items-center gap-4"> <img src="https://placehold.co/100x80/a7f3d0/14532d?text=Wellness" alt="Wellness" className="rounded-lg h-20"/> <div className="flex-grow"><p className="mb-3 text-gray-700 text-sm">Book events, read articles, use tools.</p><Button onClick={() => setActiveView(\'wellness\')} className="bg-green-600 hover:bg-green-700" size="sm"> <Activity className="mr-2 h-4 w-4"/> Go to Wellness </Button></div> </CardContent> </Card> <Card className="mt-6"> <CardHeader><CardTitle>QR Scan Simulation</CardTitle></CardHeader> <CardContent className="pt-4 flex flex-wrap gap-2"> <Button variant="secondary" size="sm" onClick={handleScanValidAntibiotic}>Scan Valid ABX</Button> <Button variant="secondary" size="sm" onClick={handleScanValidNonAntibiotic}>Scan Valid Non-ABX</Button> <Button variant="destructive" size="sm" onClick={handleScanInvalid}>Scan Invalid</Button> <Button variant="warning" size="sm" onClick={handleScanExpired}>Scan Expired</Button> </CardContent> </Card> </div> ); }\r\n        function MedicineSearchListing({ navigatePatientView, navigateTo }) { const [searchTerm, setSearchTerm] = useState(\'\'); const [searchResults, setSearchResults] = useState(MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES); const handleSearch = (e) => { const term = e.target.value.toLowerCase(); setSearchTerm(e.target.value); setSearchResults( MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES.filter(med => med.name.toLowerCase().includes(term) || med.category.toLowerCase().includes(term) ) ); }; const handleAddToCart = (medId, pharmacyName, price) => { alert(`Pholder: Add ${medId} from ${pharmacyName} ($${price.toFixed(2)}) to cart.`); }; const handleViewDetails = (medId) => { alert(`Pholder: View details ${medId}.`); }; return ( <div className="space-y-6"> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /> <Input placeholder="Search medicine or category..." className="pl-12 text-base h-12" value={searchTerm} onChange={handleSearch} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {searchResults.length > 0 ? ( searchResults.map(med => ( <Card key={med.id} className="overflow-hidden flex flex-col"> <CardHeader className="flex flex-row items-start gap-4 p-4"> <img src={med.imageUrl} alt={med.name} className="w-20 h-20 object-contain rounded-md border flex-shrink-0" /> <div className="flex-grow"> <h4 className="font-semibold text-base mb-1">{med.name}</h4> <p className="text-sm text-gray-500 mb-2">{med.category}</p> {med.requiresPrescription && <Badge variant="warning">Rx</Badge>} {med.isAntibiotic && <Badge variant="destructive" className="ml-1">ABX</Badge>} </div> </CardHeader> <CardContent className="pt-0 pb-4 flex-grow flex flex-col"> <h5 className="text-sm font-medium mb-2 text-gray-700">Compare Prices:</h5> {med.pharmacies.length > 0 ? ( <div className="space-y-3"> {med.pharmacies.slice(0, 3).map(pharm => ( <div key={pharm.name} className="flex justify-between items-center p-2 bg-gray-50 rounded-md border"> <div> <span className="text-sm font-medium">{pharm.name}</span> <Badge variant={getStatusBadgeVariant(pharm.stockStatus)} className="ml-2">{pharm.stockStatus}</Badge> </div> <div className="text-right flex-shrink-0"> <p className="text-base font-semibold text-blue-700">${pharm.price.toFixed(2)}</p> <Button size="sm" variant="link" className="text-xs h-auto p-0 mt-1" onClick={() => handleAddToCart(med.id, pharm.name, pharm.price)} disabled={med.requiresPrescription} > {med.requiresPrescription ? \'Requires Rx\' : \'Add to Cart\'} </Button> </div> </div> ))} {med.pharmacies.length > 3 && ( <Button variant="link" size="sm" className="w-full mt-2" onClick={() => handleViewDetails(med.id)}> View {med.pharmacies.length - 3} more... </Button> )} </div> ) : ( <p className="text-sm text-gray-500 italic">Unavailable.</p> )} </CardContent> <CardFooter className="border-t pt-3"> <Button variant="outline" onClick={() => handleViewDetails(med.id)} className="w-full" size="sm"> View Details </Button> </CardFooter> </Card> )) ) : ( <div className="col-span-full text-center py-10 text-gray-500"> <Pill className="mx-auto h-12 w-12 text-gray-400 mb-4"/> <p>No medicines found for "{searchTerm}".</p> <p className="text-sm mt-2">Try again or <button className="text-blue-600 underline" onClick={() => navigateTo ? navigateTo(\'patientPortal\') : (navigatePatientView ? navigatePatientView(\'upload\') : alert(\'Cannot navigate\')) }>upload Rx</button>.</p> </div> )} </div> </div> ); }\r\n        function PrescriptionUpload({ navigatePatientView }) { const [selectedFile, setSelectedFile] = useState(null); const [notes, setNotes] = useState(\'\'); const [isUploading, setIsUploading] = useState(false); const [uploadStatus, setUploadStatus] = useState(\'\'); const handleFileChange = (event) => { if (event.target.files && event.target.files[0]) { setSelectedFile(event.target.files[0]); setUploadStatus(\'\'); } }; const handleSubmit = async (event) => { event.preventDefault(); if (!selectedFile) { alert("Select file."); return; } setIsUploading(true); setUploadStatus(\'\'); await new Promise(resolve => setTimeout(resolve, 1500)); const isSuccess = Math.random() > 0.2; if (isSuccess) { setUploadStatus(\'success\'); setSelectedFile(null); setNotes(\'\'); } else { setUploadStatus(\'error\'); } setIsUploading(false); }; return ( <div className="space-y-6 max-w-2xl mx-auto"> <Card> <CardHeader> <CardTitle>Upload Prescription</CardTitle> <CardDescription>Submit image/PDF for review/quote.</CardDescription> </CardHeader> <form onSubmit={handleSubmit}> <CardContent className="pt-6 space-y-4"> <div> <Label htmlFor="rx-file">File (Image/PDF)</Label> <Input id="rx-file" type="file" accept="image/*,.pdf" onChange={handleFileChange} required className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/> {selectedFile && (<p className="text-sm mt-2">Selected: {selectedFile.name}</p>)} </div> <div> <Label htmlFor="notes">Notes (Optional)</Label> <Textarea id="notes" placeholder="e.g., Brand preference, urgency..." value={notes} onChange={(e) => setNotes(e.target.value)} className="mt-1"/> </div> </CardContent> <CardFooter className="flex justify-end border-t pt-4"> <Button type="submit" disabled={isUploading || !selectedFile}> {isUploading ? \'Uploading...\' : <><UploadCloud className="mr-2 h-4 w-4" /> Submit</>} </Button> </CardFooter> </form> </Card> {uploadStatus === \'success\' && ( <div className="p-4 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm mt-4"> Upload successful! Check <button className="font-bold underline" onClick={() => navigatePatientView(\'dashboard\')}>Dashboard</button> for status/quote. </div> )} {uploadStatus === \'error\' && ( <div className="p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm mt-4"> Upload failed. Try again or contact support. </div> )} </div> ); }\r\n        function QuotedPrescriptionView({ quote, navigatePatientView }) { if (!quote) { return ( <div className="space-y-6"> <Card> <CardHeader><CardTitle>Prescription Quote</CardTitle></CardHeader> <CardContent className="pt-6 text-center text-gray-500"> No quote available. Check <button className="text-blue-600 underline" onClick={() => navigatePatientView(\'dashboard\')}>dashboard</button>. </CardContent> </Card> </div> ); } const handleAddToCart = () => { alert(`Pholder: Add quote ($${quote.total.toFixed(2)}) to cart.`); }; const handlePayment = (method) => { if (method === \'medicalAid\') { const useBio = window.confirm("Simulate MA Payment:\\nUse Biometrics?"); if (useBio) { alert("Place finger... (Sim)"); setTimeout(() => { const ok = Math.random() > 0.1; alert(ok ? "Biometric OK! Processing..." : "Biometric Failed."); if(ok){ /* TODO: Update order */ } }, 1500); } else { const pin = prompt("Enter MA PIN (Sim):"); if (pin) { alert("PIN OK. Processing..."); /* TODO: Update order */ } else { alert("PIN cancelled."); } } } else { alert(`Pholder: Proceed to ${method} ($${quote.total.toFixed(2)})...`); } }; return ( <div className="space-y-6"> <Card> <CardHeader> <CardTitle>Your Prescription Quote</CardTitle> <CardDescription>Review items & checkout.</CardDescription> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="text-center">Qty</TableHead> <TableHead className="text-right">Price</TableHead> <TableHead className="text-right">Subtotal</TableHead> </TableRow> </TableHeader> <TableBody> {quote.items.map((item, index) => ( <TableRow key={index}> <TableCell className="font-medium">{item.name}</TableCell> <TableCell className="text-center">{item.qty}</TableCell> <TableCell className="text-right">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right">${(item.qty * item.price).toFixed(2)}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3} className="text-right font-semibold text-base">Total:</TableCell> <TableCell className="text-right font-bold text-lg">${quote.total.toFixed(2)}</TableCell> </TableRow> </TableFooter> </Table> </CardContent> <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4 border-t pt-6"> <Button variant="outline" onClick={handleAddToCart}> <ShoppingCart className="mr-2 h-4 w-4"/> Add to Cart </Button> <div className="flex flex-wrap gap-2"> <Button onClick={() => handlePayment(\'medicalAid\')} className="bg-green-600 hover:bg-green-700"> <Fingerprint className="mr-2 h-4 w-4" /> Pay with MA </Button> <Button onClick={() => handlePayment(\'EcoCash\')}> Pay EcoCash </Button> <Button onClick={() => handlePayment(\'Other\')} variant="secondary"> Other </Button> </div> </CardFooter> </Card> </div> ); }\r\n        function MedicineVerificationModal({ isOpen, onClose, verificationData }) { if (!verificationData) return null; const { status, message, medicineName, batchNumber, expiryDate, pharmacySource, wholesaleSource, manufacturer, isAntibiotic } = verificationData; let statusIcon, statusColorClass, title, bgColorClass = "bg-white"; switch (status) { case \'verified\': statusIcon = <CheckCircle className="h-12 w-12 text-green-500" />; statusColorClass = "text-green-700"; title = "Verified"; bgColorClass = "bg-green-50"; break; case \'invalid\': statusIcon = <XCircle className="h-12 w-12 text-red-500" />; statusColorClass = "text-red-700"; title = "FAILED"; bgColorClass = "bg-red-50"; break; case \'expired\': statusIcon = <AlertTriangle className="h-12 w-12 text-yellow-500" />; statusColorClass = "text-yellow-700"; title = "EXPIRED"; bgColorClass = "bg-yellow-50"; break; default: statusIcon = <Info className="h-12 w-12 text-gray-500" />; statusColorClass = "text-gray-700"; title = "Info"; } return ( <Modal isOpen={isOpen} onClose={onClose} title={title} maxWidth="md"> <div className={`flex flex-col items-center text-center space-y-4 p-6 rounded-lg ${bgColorClass}`}> {statusIcon} <p className={`font-semibold text-lg ${statusColorClass}`}>{message}</p> {(status === \'verified\' || status === \'expired\') && ( <Card className="w-full mt-4 text-left bg-white shadow-md"> <CardHeader><CardTitle className="text-base">Details</CardTitle></CardHeader> <CardContent className="space-y-1 text-sm pt-2"> <div className="grid grid-cols-3 gap-x-2 gap-y-1"> <span className="font-medium text-gray-500">Med:</span> <span className="col-span-2 font-medium">{medicineName || \'N/A\'}</span> <span className="font-medium text-gray-500">Batch:</span> <span className="col-span-2 font-mono">{batchNumber || \'N/A\'}</span> <span className="font-medium text-gray-500">Expiry:</span> <span className={`col-span-2 ${status === \'expired\' ? \'text-red-600 font-bold\' : \'\'}`}>{expiryDate || \'N/A\'}</span> <span className="font-medium text-gray-500">Manuf:</span> <span className="col-span-2">{manufacturer || \'N/A\'}</span> <span className="font-medium text-gray-500">Whsle:</span> <span className="col-span-2">{wholesaleSource || \'N/A\'}</span> <span className="font-medium text-gray-500">Pharm:</span> <span className="col-span-2">{pharmacySource || \'N/A\'}</span> </div> </CardContent> </Card> )} {status === \'verified\' && isAntibiotic && ( <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 text-yellow-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>ABX Alert:</strong> Use only as prescribed.</span> </div> )} {status === \'invalid\' && ( <div className="mt-4 p-3 bg-red-100 border border-red-300 text-red-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>Action:</strong> Do not use. Report!</span> </div> )} <Button onClick={onClose} className="mt-6" variant={status === \'invalid\' ? \'destructive\' : \'default\'}>Close</Button> </div> </Modal> ); }\r\n\r\n        // --- Pharmacy Portal & Sub-Components ---\r\n        function PharmacyPortal({ setActiveView, openVerificationModal, patientData }) {\r\n            console.log("Rendering PharmacyPortal Component");\r\n            const [pharmacySubView, setPharmacySubView] = useState(\'orders\');\r\n            const [isDispensingModalOpen, setDispensingModalOpen] = useState(false);\r\n            const [isOrderDetailsModalOpen, setOrderDetailsModalOpen] = useState(false);\r\n            const [selectedOrderForModal, setSelectedOrderForModal] = useState(null);\r\n            const [orders, setOrders] = useState(() => {\r\n                 console.log("Initializing PharmacyPortal \'orders\' state with MOCK_PHARMACY_ORDERS.");\r\n                 return JSON.parse(JSON.stringify(MOCK_PHARMACY_ORDERS));\r\n            });\r\n\r\n            const updateOrderStatus = (orderId, newStatus) => {\r\n                console.log(`(updateOrderStatus) called for ID: ${orderId}, New Status: ${newStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current status: ${order.status}. Updating to ${newStatus}.`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(order.medicalAidStatus)); return { ...order, status: newStatus, requiresAction }; } return order; })); };\r\n\r\n            const updateOrderAndMAStatus = (orderId, newOrderStatus, newMAStatus) => {\r\n                console.log(`(updateOrderAndMAStatus) called for ID: ${orderId}. New Order Status: ${newOrderStatus}, New MA Status: ${newMAStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current: Status=${order.status}, MA=${order.medicalAidStatus}.`); const updatedStatus = newOrderStatus ?? order.status; const updatedMAStatus = newMAStatus ?? order.medicalAidStatus; const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(updatedStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(updatedMAStatus)); console.log(` -> Updated state: Status=${updatedStatus}, MA=${updatedMAStatus}, RequiresAction=${requiresAction}`); return { ...order, status: updatedStatus, medicalAidStatus: updatedMAStatus, requiresAction }; } return order; })); };\r\n\r\n            const openDispensingModal = () => setDispensingModalOpen(true);\r\n            const closeDispensingModal = () => setDispensingModalOpen(false);\r\n            const openOrderDetailsModalHandler = (order) => { console.log("Opening Order Details Modal for order:", order); setSelectedOrderForModal(order); setOrderDetailsModalOpen(true); };\r\n            const closeOrderDetailsModalHandler = () => { console.log("Closing Order Details Modal"); setOrderDetailsModalOpen(false); setSelectedOrderForModal(null); };\r\n\r\n            const renderSubView = () => {\r\n                 console.log("Rendering Pharmacy SubView:", pharmacySubView);\r\n                 // Wrap sub-view rendering in try-catch for better error isolation\r\n                 try {\r\n                     switch(pharmacySubView) {\r\n                        case \'inventory\':\r\n                            console.log(" -> Attempting to render PharmacyInventory...");\r\n                            return <PharmacyInventory />; // The component we are debugging\r\n                        case \'orders\': return <OrderManagementView orders={orders} updateOrderStatus={updateOrderStatus} openOrderDetailsModal={openOrderDetailsModalHandler} />;\r\n                        case \'marketWatch\': return <MarketWatchView />;\r\n                        case \'analytics\': return <PharmacyAnalytics />;\r\n                        case \'claims\': return <MedicalAidClaimsView orders={orders} />;\r\n                        default: console.warn(`Unknown pharmacySubView: ${pharmacySubView}.`); return <div className="text-center p-8 text-gray-500">Select a view from the tabs above.</div>;\r\n                     }\r\n                 } catch (error) {\r\n                     console.error(`Error rendering pharmacy subview "${pharmacySubView}":`, error);\r\n                     // Display error prominently if sub-view fails\r\n                     return (\r\n                        <div className="text-center p-8 text-red-600 bg-red-50 border border-red-300 rounded-md">\r\n                             <h3 className="text-lg font-semibold mb-2">Error Loading \'{pharmacySubView}\' View</h3>\r\n                             <p>There was a problem rendering this section.</p>\r\n                             <p className="text-sm mt-2">Please check the browser console (F12) for technical details.</p>\r\n                             <pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || error.message}</pre>\r\n                         </div>\r\n                    );\r\n                 }\r\n            };\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <nav className="flex space-x-1 border-b overflow-x-auto">\r\n                        <Button variant={pharmacySubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'orders\')} data-state={pharmacySubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button>\r\n                        <Button variant=\'ghost\' onClick={openDispensingModal} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Pill className="mr-2 h-4 w-4" /> Dispense</Button>\r\n                        <Button variant={pharmacySubView === \'inventory\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'inventory\')} data-state={pharmacySubView === \'inventory\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Package className="mr-2 h-4 w-4" /> Inventory</Button>\r\n                        <Button variant={pharmacySubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'marketWatch\')} data-state={pharmacySubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button>\r\n                        <Button variant={pharmacySubView === \'analytics\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'analytics\')} data-state={pharmacySubView === \'analytics\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BarChart className="mr-2 h-4 w-4" /> Analytics</Button>\r\n                        <Button variant={pharmacySubView === \'claims\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'claims\')} data-state={pharmacySubView === \'claims\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CreditCard className="mr-2 h-4 w-4" /> Claims</Button>\r\n                        <Button variant=\'ghost\' onClick={() => alert(\'Pholder: Walk-in Quote\')} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4" /> Quote Walk-in</Button>\r\n                    </nav>\r\n                    <div className="pt-6">\r\n                       {renderSubView()}\r\n                    </div>\r\n                    <DispensingModal isOpen={isDispensingModalOpen} onClose={closeDispensingModal} />\r\n                    <OrderDetailsModal isOpen={isOrderDetailsModalOpen} onClose={closeOrderDetailsModalHandler} order={selectedOrderForModal} updateOrderAndMAStatusCallback={updateOrderAndMAStatus} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function PharmacyInventory() {\r\n            console.log("PharmacyInventory: Component rendering started.");\r\n            const [inventory, setInventory] = useState(MOCK_PHARMACY_INVENTORY);\r\n            const [searchTerm, setSearchTerm] = useState(\'\');\r\n            const [filterCategory, setFilterCategory] = useState(\'all\');\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            console.log("PharmacyInventory: State initialized.");\r\n\r\n            const filteredInventory = useMemo(() => {\r\n                console.log("PharmacyInventory: Calculating filteredInventory memo...");\r\n                try {\r\n                    return inventory.filter(item => {\r\n                        // Added robust checks for potential null/undefined values\r\n                        const term = searchTerm.toLowerCase();\r\n                        const nameMatch = item && item.name && typeof item.name.toLowerCase === \'function\' ? item.name.toLowerCase().includes(term) : false;\r\n                        const idMatch = item && item.id && typeof item.id.toLowerCase === \'function\' ? item.id.toLowerCase().includes(term) : false;\r\n                        const categoryMatch = item && item.category && typeof item.category.toLowerCase === \'function\' ? item.category.toLowerCase().includes(term) : false;\r\n                        const matchesSearch = nameMatch || idMatch || categoryMatch;\r\n\r\n                        const matchesCategory = filterCategory === \'all\' || (item && item.category === filterCategory);\r\n                        const matchesStatus = filterStatus === \'all\' || (item && item.status === filterStatus);\r\n                        return matchesSearch && matchesCategory && matchesStatus;\r\n                    });\r\n                } catch(error) {\r\n                    console.error("PharmacyInventory: Error during filtering:", error);\r\n                    return []; // Return empty array on error\r\n                }\r\n            }, [inventory, searchTerm, filterCategory, filterStatus]);\r\n\r\n            const categories = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating categories memo...");\r\n                 try {\r\n                    const uniqueCategories = new Set(inventory.map(item => item?.category).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueCategories)].sort();\r\n                 } catch (error) {\r\n                    console.error("PharmacyInventory: Error calculating categories:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            const statuses = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating statuses memo...");\r\n                 try {\r\n                    const uniqueStatuses = new Set(inventory.map(item => item?.status).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueStatuses)];\r\n                 } catch(error) {\r\n                    console.error("PharmacyInventory: Error calculating statuses:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            console.log("PharmacyInventory: Memos calculated. Filtered count:", filteredInventory.length);\r\n\r\n            const handleAddItem = () => alert(\'Pholder: Add Item Modal\');\r\n            const handleEditItem = (itemId) => alert(`Pholder: Edit Modal ${itemId}`);\r\n            const handleOrderFromWholesaler = () => alert(\'Pholder: Wholesaler Order UI\');\r\n\r\n            console.log("PharmacyInventory: Preparing to return JSX.");\r\n\r\n            // Wrap the entire JSX return in a try-catch as a last resort for rendering errors\r\n            try {\r\n                return (\r\n                    <div className="space-y-6">\r\n                        {/* Header */}\r\n                        <header className="flex flex-wrap justify-between items-center pb-4 gap-4 border-b">\r\n                            <div> <h2 className="text-xl font-semibold">Inventory Management</h2> <p className="text-gray-500 text-sm">Manage stock & details.</p> </div>\r\n                            <div className="flex items-center space-x-2 flex-wrap gap-2"> <Button variant="outline" size="sm" onClick={handleOrderFromWholesaler}><Truck className="mr-2 h-4 w-4" /> Order Stock</Button> <Button size="sm" onClick={handleAddItem}><PlusCircle className="mr-2 h-4 w-4" /> Add Item</Button> </div>\r\n                        </header>\r\n                        {/* Filters */}\r\n                        <Card>\r\n                            <CardContent className="pt-6 flex flex-wrap items-center gap-4">\r\n                                <div className="relative flex-grow min-w-[200px]"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" /><Input placeholder="Search Name, ID, Category..." className="pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="cat-filter" className="sr-only">Category</Label><Select id="cat-filter" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full">{categories.map(cat => (<SelectItem key={cat} value={cat}>{cat === \'all\' ? \'All Categories\' : cat}</SelectItem>))}</Select></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="stat-filter" className="sr-only">Status</Label><Select id="stat-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* Table */}\r\n                        <Card>\r\n                            <CardHeader><CardTitle>Medicine Stock List</CardTitle></CardHeader>\r\n                            <CardContent className="pt-4">\r\n                                <Table>\r\n                                    <TableHeader><TableRow><TableHead>ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Stock</TableHead><TableHead className="text-right">Price</TableHead><TableHead>Status</TableHead><TableHead>Supplier</TableHead><TableHead>Updated</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                    <TableBody>\r\n                                        {filteredInventory.length > 0 ? (\r\n                                            filteredInventory.map((item) => (\r\n                                                item && item.id ? (\r\n                                                    <TableRow key={item.id} className={item.stock === 0 ? \'opacity-60 bg-gray-50\' : item.stock < 10 ? \'bg-yellow-50/70\' : \'\'}>\r\n                                                        <TableCell className="font-mono text-xs">{item.id}</TableCell>\r\n                                                        <TableCell className="font-medium">{item.name || \'N/A\'}</TableCell>\r\n                                                        <TableCell>{item.category || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right font-semibold">{typeof item.stock === \'number\' ? item.stock : \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right">{(typeof item.price === \'number\' ? item.price : 0).toFixed(2)}</TableCell>\r\n                                                        <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status || \'N/A\'}</Badge></TableCell>\r\n                                                        <TableCell>{item.supplier || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-xs">{item.lastUpdated || \'N/A\'}</TableCell>\r\n                                                        <TableCell><Button variant="ghost" size="sm" onClick={() => handleEditItem(item.id)}>Edit</Button></TableCell>\r\n                                                    </TableRow>\r\n                                                ) : null\r\n                                            ))\r\n                                        ) : (\r\n                                            <TableRow><TableCell colSpan={9} className="h-24 text-center text-gray-500">No inventory items match the current filters.</TableCell></TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </CardContent>\r\n                            <CardFooter className="pt-4 justify-between items-center border-t">\r\n                                <p className="text-sm text-gray-500">Showing {filteredInventory.length} of {inventory.length} items.</p>\r\n                                <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                );\r\n            } catch (error) {\r\n                console.error("PharmacyInventory: Error during JSX rendering:", error);\r\n                return <div className="p-4 text-red-600 bg-red-50 border border-red-300 rounded">Error rendering inventory table. Check console. <pre>{error.stack}</pre></div>;\r\n            }\r\n        }\r\n\r\n        function OrderManagementView({ orders, updateOrderStatus, openOrderDetailsModal }) {\r\n            console.log("Rendering OrderManagementView. Received orders prop:", orders);\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            const validOrders = Array.isArray(orders) ? orders : [];\r\n            if (!Array.isArray(orders)) { console.error("OrderManagementView received non-array \'orders\' prop:", orders); }\r\n            const statuses = useMemo(() => { if (!validOrders.length) return [\'all\']; const validStatuses = validOrders.map(order => order?.status).filter(Boolean); return [\'all\', ...new Set(validStatuses)].sort(); }, [validOrders]);\r\n            const filteredOrders = useMemo(() => { if (!validOrders.length) return []; if (filterStatus === \'all\') return validOrders; return validOrders.filter(order => order?.status === filterStatus); }, [validOrders, filterStatus]);\r\n            console.log(`OrderManagementView: Filter Status=\'${filterStatus}\', Filtered Orders Count=${filteredOrders.length}`);\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <header className="pb-4 flex flex-wrap justify-between items-center gap-4 border-b">\r\n                        <div><h2 className="text-xl font-semibold">Order Management</h2><p className="text-gray-500 text-sm">View and manage incoming patient orders.</p></div>\r\n                        <div className="flex items-center gap-2"><Label htmlFor="order-status-filter" className="text-sm">Filter by Status:</Label><Select id="order-status-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-40">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                    </header>\r\n                    <Card>\r\n                        <CardHeader><CardTitle>Incoming & Recent Orders</CardTitle></CardHeader>\r\n                        <CardContent className="pt-4">\r\n                            <Table>\r\n                                <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Patient</TableHead><TableHead>Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Total</TableHead><TableHead>Medical Aid</TableHead><TableHead>Payment</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                <TableBody>\r\n                                    {filteredOrders.length > 0 ? (\r\n                                        filteredOrders.map((order) => ( order && order.id ? ( <TableRow key={order.id} className={order.requiresAction ? \'bg-blue-50/70 hover:bg-blue-100/50\' : \'\'}>\r\n                                                    <TableCell className="font-mono text-xs">{order.id}</TableCell>\r\n                                                    <TableCell>{order.patientName || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.date || \'N/A\'}</TableCell>\r\n                                                    <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status || \'N/A\'}</Badge></TableCell>\r\n                                                    <TableCell className="text-right font-medium">${(typeof order.total === \'number\' ? order.total : 0).toFixed(2)}</TableCell>\r\n                                                    <TableCell>{order.medicalAidProvider ? (<Badge variant={getClaimStatusVariant(order.medicalAidStatus)}>{order.medicalAidStatus || \'N/A\'}</Badge>) : (<Badge variant="outline">N/A</Badge>)}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.paymentMethod || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="space-x-1 whitespace-nowrap">\r\n                                                        <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => openOrderDetailsModal(order)}>Details</Button>\r\n                                                        {order.status === \'Pending Approval\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Approve</Button>}\r\n                                                        {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Ready for Pickup\')}>Ready</Button>}\r\n                                                        {order.status === \'Ready for Pickup\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Completed\')}>Complete</Button>}\r\n                                                        {order.status === \'Pending Payment\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Mark Paid</Button> }\r\n                                                    </TableCell>\r\n                                                </TableRow> ) : null\r\n                                        ))\r\n                                    ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No orders match the selected filter.</TableCell></TableRow> )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                        <CardFooter className="pt-4 border-t justify-between items-center">\r\n                             <p className="text-sm text-gray-500">Showing {filteredOrders.length} of {validOrders.length} orders.</p>\r\n                             <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        function OrderDetailsModal({ isOpen, onClose, order, updateOrderAndMAStatusCallback }) {\r\n            const [internalOrderData, setInternalOrderData] = useState(null);\r\n            useEffect(() => { console.log("OrderDetailsModal Effect: Received order prop:", order); if (order && (!internalOrderData || internalOrderData.id !== order.id)) { console.log(` -> Updating internal state for order ID: ${order.id}`); setInternalOrderData({ ...order }); } else if (!order && internalOrderData) { console.log(" -> Clearing internal state as order prop is null/undefined."); setInternalOrderData(null); } }, [order]);\r\n            if (!isOpen || !internalOrderData) { return null; }\r\n            const { id, patientName, date, status, total, items, medicalAidStatus, amountCovered, medicalAidProvider, paymentMethod } = internalOrderData;\r\n            console.log(`OrderDetailsModal Rendering content for Order ID: ${id}`);\r\n            const showClaimButton = medicalAidProvider && (medicalAidStatus === \'Received\' || medicalAidStatus === \'Pending Patient Auth\');\r\n            const showMarkPaidButton = status === \'Pending Payment\';\r\n            const showApproveButton = status === \'Pending Approval\';\r\n            const showReadyButton = status === \'Processing\';\r\n            const showCompleteButton = status === \'Ready for Pickup\' || status === \'Out for Delivery\';\r\n            const handleClaimSubmit = () => { const newMAStatus = \'Claim Submitted\'; console.log(`Modal action: Submitting claim for ${id}, setting MA status to ${newMAStatus}`); setInternalOrderData(prev => prev ? { ...prev, medicalAidStatus: newMAStatus, requiresAction: false } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, null, newMAStatus); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Claim Submitted for ${id}`); };\r\n            const handleStatusUpdate = (newStatus) => { console.log(`Modal action: Updating status for ${id} to ${newStatus}`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(medicalAidStatus)); setInternalOrderData(prev => prev ? { ...prev, status: newStatus, requiresAction } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, newStatus, null); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Order ${id} updated to ${newStatus}.`); };\r\n            const orderItems = Array.isArray(items) ? items : [];\r\n\r\n            return (\r\n                <Modal isOpen={isOpen} onClose={onClose} title={`Order Details: ${id}`} maxWidth="xl">\r\n                    <div className="space-y-4">\r\n                        <Card><CardHeader><CardTitle className="text-base">Order Information</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Patient:</span> <span className="font-medium">{patientName || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Date:</span> <span>{date || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Status:</span> <span><Badge variant={getStatusBadgeVariant(status)}>{status || \'N/A\'}</Badge></span></div><div><span className="text-gray-500 mr-2">Total:</span> <span className="font-semibold">${(typeof total === \'number\' ? total : 0).toFixed(2)}</span></div><div><span className="text-gray-500 mr-2">Payment Method:</span> <span>{paymentMethod || \'N/A\'}</span></div></CardContent></Card>\r\n                        <Card><CardHeader><CardTitle className="text-base">Items in Order</CardTitle></CardHeader><CardContent className="pt-4">{orderItems.length > 0 ? (<ul className="space-y-1 text-sm">{orderItems.map((item, index) => ( <li key={item.id || index} className="flex justify-between border-b py-1 last:border-0"><span>{item.qty || 0} x {item.name || \'Unknown Item\'}</span></li> ))}</ul>) : (<p className="text-sm text-gray-500 italic">No items listed for this order.</p>)}</CardContent></Card>\r\n                        {medicalAidProvider && ( <Card><CardHeader><CardTitle className="text-base">Medical Aid Details</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Provider:</span> <span>{medicalAidProvider}</span></div><div><span className="text-gray-500 mr-2">Claim Status:</span> <Badge variant={getClaimStatusVariant(medicalAidStatus)}>{medicalAidStatus || \'N/A\'}</Badge></div><div><span className="text-gray-500 mr-2">Amount Covered:</span> <span className="font-semibold">${(typeof amountCovered === \'number\' ? amountCovered : 0).toFixed(2)}</span></div>{showClaimButton && ( <div className="md:col-span-2 mt-2"><Button onClick={handleClaimSubmit} size="sm" variant="success"><FileCheck className="mr-2 h-4 w-4" /> Submit Claim Now</Button></div> )}</CardContent></Card> )}\r\n                        <div className="flex flex-wrap justify-between items-center gap-3 border-t pt-4 mt-4">\r\n                            <div className="flex flex-wrap gap-2">{showApproveButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm">Approve Order</Button>}{showReadyButton && <Button onClick={() => handleStatusUpdate(\'Ready for Pickup\')} size="sm">Mark Ready for Pickup</Button>}{showCompleteButton && <Button onClick={() => handleStatusUpdate(\'Completed\')} size="sm" variant="success">Mark as Completed</Button>}{showMarkPaidButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm" variant="success">Mark as Paid</Button> }</div>\r\n                            <Button variant="outline" onClick={onClose}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n        function DispensingModal({ isOpen, onClose }) { const [patientSearchTerm, setPatientSearchTerm] = useState(\'\'); const [selectedPatient, setSelectedPatient] = useState(null); const [medicineSearchTerm, setMedicineSearchTerm] = useState(\'\'); const [dispensingCart, setDispensingCart] = useState([]); const [inventory] = useState(MOCK_PHARMACY_INVENTORY); const handlePatientSearch = () => { const term = patientSearchTerm.toLowerCase(); const foundPatient = MOCK_PHARMACY_ORDERS.find(o => o.patientName.toLowerCase().includes(term) || o.patientId?.toLowerCase() === term); if (foundPatient) { setSelectedPatient({ id: foundPatient.patientId, name: foundPatient.patientName }); setPatientSearchTerm(\'\'); } else { setSelectedPatient(null); alert(\'Patient not found.\'); } }; const filteredInventory = useMemo(() => { if (!medicineSearchTerm) return []; return inventory.filter(item => item.name.toLowerCase().includes(medicineSearchTerm.toLowerCase()) && item.stock > 0); }, [medicineSearchTerm, inventory]); const addToCart = (medItem) => { const existingItemIndex = dispensingCart.findIndex(item => item.id === medItem.id); if (existingItemIndex > -1) { const currentQty = dispensingCart[existingItemIndex].qty; if (currentQty < medItem.stock) { setDispensingCart(prevCart => prevCart.map((item, index) => index === existingItemIndex ? { ...item, qty: item.qty + 1 } : item)); } else { alert(`Max stock (${medItem.stock}) reached for ${medItem.name}`); } } else { if (medItem.stock > 0) { setDispensingCart(prevCart => [...prevCart, { id: medItem.id, name: medItem.name, qty: 1, price: medItem.price, stock: medItem.stock }]); } else { alert(`${medItem.name} is out of stock.`); } } setMedicineSearchTerm(\'\'); }; const updateQty = (itemId, newQtyStr) => { const newQty = parseInt(newQtyStr, 10); if (isNaN(newQty)) return; const itemInCart = dispensingCart.find(item => item.id === itemId); if (!itemInCart) return; if (newQty <= 0) { setDispensingCart(prevCart => prevCart.filter(item => item.id !== itemId)); } else if (newQty <= itemInCart.stock) { setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: newQty } : item)); } else { alert(`Quantity (${newQty}) exceeds stock (${itemInCart.stock}). Maximum quantity set.`); setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: itemInCart.stock } : item)); } }; const calculateTotal = () => dispensingCart.reduce((total, item) => total + (item.qty * item.price), 0); const handleDispenseAndSendToPOS = () => { if (!selectedPatient && !window.confirm("No patient selected. Proceed as Walk-in Sale?")) return; if (dispensingCart.length === 0) { alert("Cart is empty."); return; } const patientInfo = selectedPatient || { id: \'WALK-IN\', name: \'Walk-in Customer\' }; const saleData = { patient: patientInfo, items: dispensingCart, total: calculateTotal(), timestamp: new Date().toISOString(), type: \'Dispensed\' }; console.log("-> Sending to POS:", saleData); alert(`Dispensed for ${patientInfo.name}. Total: $${saleData.total.toFixed(2)}. (Simulated POS send)`); handleReset(); onClose(); }; const handleReset = () => { setPatientSearchTerm(\'\'); setSelectedPatient(null); setMedicineSearchTerm(\'\'); setDispensingCart([]); }; return ( <Modal isOpen={isOpen} onClose={onClose} title="Dispense / Walk-in Sale" maxWidth="4xl"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[70vh]"> <div className="lg:col-span-1 space-y-4 flex flex-col"> <Card className="flex-shrink-0"> <CardHeader><CardTitle className="text-base">1. Select Patient</CardTitle></CardHeader> <CardContent className="pt-2 space-y-2"> <div className="flex gap-2 items-center"> <Input placeholder="Search Name/ID or leave blank..." value={patientSearchTerm} onChange={(e) => setPatientSearchTerm(e.target.value)}/> <Button onClick={handlePatientSearch} size="sm" variant="outline">Find</Button> </div> {selectedPatient ? ( <div className="p-2 bg-green-100 rounded text-sm font-medium text-green-800">Selected: {selectedPatient.name}</div> ) : ( <div className="p-2 bg-yellow-100 rounded text-sm text-yellow-800">Default: Walk-in Sale</div> )} </CardContent> </Card> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">2. Add Medicines</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow flex flex-col"> <Input placeholder="Search Medicine Name..." value={medicineSearchTerm} onChange={(e) => setMedicineSearchTerm(e.target.value)} className="mb-2"/> <div className="mt-1 border rounded-md overflow-y-auto flex-grow bg-gray-50 min-h-[150px]"> {medicineSearchTerm && filteredInventory.length > 0 ? ( filteredInventory.map(item => ( <div key={item.id} className="p-2 hover:bg-blue-100 cursor-pointer flex justify-between items-center border-b" onClick={() => addToCart(item)}> <span className="text-sm">{item.name} <span className="text-xs text-gray-500">(Stock: {item.stock})</span></span> <span className="text-sm font-semibold">${item.price.toFixed(2)}</span> </div> )) ) : medicineSearchTerm ? ( <p className="text-sm text-red-500 p-4 text-center italic">No matching medicine found in stock.</p> ) : ( <p className="text-sm text-gray-400 p-4 text-center italic">Type above to search medicines...</p> )} </div> </CardContent> </Card> </div> <div className="lg:col-span-2 space-y-4 flex flex-col"> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">3. Review Cart</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow overflow-y-auto"> {dispensingCart.length > 0 ? ( <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="w-24 text-center">Qty</TableHead> <TableHead className="w-20 text-right">Price</TableHead> <TableHead className="w-24 text-right">Subtotal</TableHead> <TableHead className="w-10 text-center">Rem</TableHead> </TableRow> </TableHeader> <TableBody> {dispensingCart.map(item => ( <TableRow key={item.id}> <TableCell className="text-sm">{item.name}</TableCell> <TableCell> <Input type="number" min="1" max={item.stock} value={item.qty} onChange={(e) => updateQty(item.id, e.target.value)} className="h-8 w-16 text-center p-1"/> </TableCell> <TableCell className="text-right text-sm">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right text-sm font-medium">${(item.qty * item.price).toFixed(2)}</TableCell> <TableCell className="text-center"> <button onClick={() => updateQty(item.id, 0)} className="text-red-500 hover:text-red-700 p-1 font-bold" title="Remove">&times;</button> </TableCell> </TableRow> ))} </TableBody> </Table> ) : ( <p className="text-center text-gray-500 py-10 italic">Cart is currently empty. Add medicines from the left.</p> )} </CardContent> {dispensingCart.length > 0 && ( <CardFooter className="border-t pt-3 flex justify-end items-center"> <span className="text-sm font-semibold mr-2">Total Amount:</span> <span className="font-bold text-xl text-blue-700">${calculateTotal().toFixed(2)}</span> </CardFooter> )} </Card> <div className="flex justify-between gap-3 pt-4 border-t flex-shrink-0"> <Button variant="outline" onClick={handleReset}>Clear Cart</Button> <div className="flex gap-3"> <Button variant="secondary" onClick={onClose}>Cancel</Button> <Button onClick={handleDispenseAndSendToPOS} disabled={dispensingCart.length === 0}> <MonitorSmartphone className="mr-2 h-4 w-4" /> Dispense & Send to POS </Button> </div> </div> </div> </div> </Modal> ); }\r\n        function PharmacyAnalytics() { return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Analytics & Reports</h2> <p className="text-gray-500 text-sm">Performance insights.</p> </header> <Card> <CardHeader><CardTitle>Key Performance Indicators (KPIs)</CardTitle></CardHeader> <CardContent className="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Sales (Today)</p><p className="text-2xl font-bold text-blue-800">$1,234</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Orders (Today)</p><p className="text-2xl font-bold text-green-800">42</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Low Stock Items</p><p className="text-2xl font-bold text-yellow-900">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Low Stock\').length}</p></div> <div className="p-4 bg-red-50 rounded border border-red-200"><p className="text-xs uppercase text-red-600 font-medium">Out of Stock</p><p className="text-2xl font-bold text-red-800">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Out of Stock\').length}</p></div> </CardContent> </Card> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader><CardTitle>Monthly Sales Trend</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><BarChartComponent data={MOCK_SALES_DATA} /></ResponsiveContainer></CardContent> </Card> <Card> <CardHeader><CardTitle>Top Selling Categories</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><LineChart data={[{name:\'Pain\', v:40}, {name:\'ABX\', v:30}, {name:\'Vit\', v:25}]} /></ResponsiveContainer></CardContent> </Card> </div> <Card> <CardHeader><CardTitle>Generate Custom Reports</CardTitle></CardHeader> <CardContent className="pt-4 space-y-3"> <p className="text-sm text-gray-600">Select report type and date range to generate.</p> <div className="flex flex-wrap gap-4 items-end"> <div className="flex-grow min-w-[150px]"> <Label htmlFor="report-type">Report Type</Label> <Select id="report-type" className="mt-1"> <SelectItem value="daily_sales">Daily Sales Summary</SelectItem> <SelectItem value="monthly_sales">Monthly Sales Report</SelectItem> <SelectItem value="sales_tender">Sales by Tender Type</SelectItem> <SelectItem value="sales_user">Sales by User</SelectItem> <SelectItem value="stock_level">Current Stock Levels</SelectItem> <SelectItem value="stock_usage">Stock Usage Report</SelectItem> <SelectItem value="stock_expiry">Stock Expiry Report</SelectItem> <SelectItem value="debtors">Debtors List</SelectItem> <SelectItem value="inv_valuation">Inventory Valuation</SelectItem> </Select> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="start-date">Start Date</Label> <Input id="start-date" type="date" className="mt-1"/> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="end-date">End Date</Label> <Input id="end-date" type="date" className="mt-1"/> </div> <Button onClick={() => alert(\'Pholder: Generate selected report\')}><FileCheck className="mr-2 h-4 w-4"/> Generate Report</Button> </div> </CardContent> </Card> </div> ); }\r\n        function MedicalAidClaimsView({ orders }) { const validOrders = Array.isArray(orders) ? orders : []; const claimsData = validOrders.filter(o => o && o.medicalAidProvider).map(o => ({ id: `CLAIM-${o.id}`, orderId: o.id, patientName: o.patientName || \'N/A\', provider: o.medicalAidProvider, date: o.date || \'N/A\', amountClaimed: (typeof o.amountCovered === \'number\' ? o.amountCovered : 0), status: o.medicalAidStatus || \'N/A\', })); return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Medical Aid Claims Management</h2> <p className="text-gray-500 text-sm">Track and manage medical aid claims.</p> </header> <Card> <CardHeader><CardTitle>Claim Status Overview</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Claim ID</TableHead><TableHead>Order ID</TableHead><TableHead>Patient</TableHead> <TableHead>Provider</TableHead><TableHead>Date</TableHead> <TableHead className="text-right">Claimed Amt</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {claimsData.length > 0 ? ( claimsData.map(claim => ( <TableRow key={claim.id}> <TableCell className="font-mono text-xs">{claim.id}</TableCell><TableCell className="font-mono text-xs">{claim.orderId}</TableCell> <TableCell>{claim.patientName}</TableCell><TableCell>{claim.provider}</TableCell> <TableCell className="text-xs">{claim.date}</TableCell><TableCell className="text-right font-medium">${claim.amountClaimed.toFixed(2)}</TableCell> <TableCell><Badge variant={getClaimStatusVariant(claim.status)}>{claim.status}</Badge></TableCell> <TableCell className="space-x-1 whitespace-nowrap"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Claim Details ${claim.id}`)}>Details</Button> {claim.status === \'Received\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Submit Claim ${claim.id}`)}>Submit</Button>} {claim.status === \'Pending Patient Auth\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Request Auth ${claim.id}`)} disabled>Req. Auth</Button>} {claim.status === \'Claim Rejected\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Resubmit Claim ${claim.id}`)}>Resubmit</Button>} {claim.status === \'Claim Submitted\' && <Badge variant="info" className="ml-2">Submitted</Badge>} {claim.status === \'Paid\' && <Badge variant="success" className="ml-2">Paid</Badge>} </TableCell> </TableRow> )) ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No medical aid claims found.</TableCell></TableRow> )} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <p className="text-sm text-gray-500">Showing {claimsData.length} claims.</p> </CardFooter> </Card> <Card> <CardHeader><CardTitle>Claims Summary & Analytics</CardTitle></CardHeader> <CardContent className="pt-4 text-center italic text-gray-400"> Placeholder: Charts visualizing claims status (Pending, Submitted, Paid, Rejected), claim amounts by provider, aging analysis, etc. </CardContent> </Card> </div> ); }\r\n        function MarketWatchView() { const data = MOCK_MARKET_WATCH_DATA; const adverts = MOCK_ADVERTS; const getTrendIcon = (trendString) => { if (!trendString) return null; if (trendString.includes(\'+\') || trendString.toLowerCase().includes(\'high\') || trendString.toLowerCase().includes(\'increase\')) return <TrendingUp className="h-4 w-4 text-green-600 inline ml-1" />; if (trendString.includes(\'-\') || trendString.toLowerCase().includes(\'low\') || trendString.toLowerCase().includes(\'decrease\')) return <TrendingDown className="h-4 w-4 text-red-600 inline ml-1" />; return null; }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <div> <h2 className="text-xl font-semibold">Market Watch Insights</h2> <p className="text-gray-500 text-sm">AI-powered intelligence on market trends, demand, and stock levels.</p> </div> </header> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <Card className="lg:col-span-3 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-blue-200"> <CardHeader> <CardTitle className="flex items-center text-blue-800"><Cpu className="mr-2 h-5 w-5" /> AI-Driven Insights</CardTitle> <CardDescription>Real-time analysis and actionable recommendations.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-3"> {data.aiInsights.map((insight, index) => ( <div key={index} className="text-sm p-3 bg-white/70 rounded border border-blue-100 shadow-sm flex items-start gap-2"> <Info className="h-4 w-4 text-blue-600 mt-0.5 shrink-0"/> <div> <p className=" text-gray-800">{insight}</p> <p className="text-xs text-blue-600 mt-1 italic">Source: ehutano+ AI Engine</p> </div> </div> ))} </CardContent> </Card> <Card className="lg:col-span-2"> <CardHeader> <CardTitle className="flex items-center"><Activity className="mr-2 h-5 w-5 text-orange-600" /> Product Trends & Demand Signals</CardTitle> <CardDescription>Monitor fast-moving items, high demand, and pricing changes.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-4"> <div> <h4 className="font-semibold mb-2 flex items-center"><TrendingUp className="mr-2 h-4 w-4 text-green-600"/> Fast Moving Items</h4> {data.fastMoving.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="trendUp">{item.trend} {getTrendIcon(item.trend)}</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><Users className="mr-2 h-4 w-4 text-red-600"/> High Demand Indicators</h4> {data.highDemand.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.reason}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="warning">High Demand</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><DollarSign className="mr-2 h-4 w-4 text-indigo-600" /> Price Change Alerts</h4> {data.priceAlerts.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.note}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant={item.change.startsWith(\'+\') ? \'trendDown\' : \'trendUp\'}>{item.change} {getTrendIcon(item.change)}</Badge> </div> ))} </div> </CardContent> </Card> <Card className="lg:col-span-1 flex flex-col space-y-4"> <div> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackageX className="mr-2 h-5 w-5 text-red-600" /> Stock Alerts</CardTitle> <CardDescription>Out-of-stock & low stock items.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 max-h-48 overflow-y-auto"> {data.stockOuts.map(item => ( <div key={item.id} className={`text-sm p-2 rounded border ${getStatusBadgeVariant(item.status)===\'destructive\' ? \'bg-red-50 border-red-200\' : \'bg-yellow-50 border-yellow-200\'}`}> <p className="font-medium">{item.name} <Badge variant={getStatusBadgeVariant(item.status)}>{item.status}</Badge></p> <p className="text-xs">Supplier: {item.supplier} | {item.note}</p> <p className="text-xs italic text-gray-500">Source: {item.source}</p> </div> ))} </CardContent> </div> <div className="border-t flex-grow flex flex-col"> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackagePlus className="mr-2 h-5 w-5 text-cyan-600" /> New Market Arrivals</CardTitle> <CardDescription>Newly registered or imported.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 flex-grow overflow-y-auto"> <h5 className="text-xs font-semibold uppercase text-gray-500">Newly Registered (via MCAZ)</h5> {data.newlyRegistered.map(item => ( <div key={item.id} className="text-sm p-2 border-b"><p>{item.name}</p><p className="text-xs">Supplier: {item.supplier} (Registered: {item.date})</p></div> ))} <h5 className="text-xs font-semibold uppercase text-gray-500 pt-2 mt-2">Recently Imported</h5> {data.recentlyImported.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0"><p>{item.name}</p><p className="text-xs">Source: {item.source} | Arrived: {item.arrival}</p><p className="text-xs">Distributor: {item.distributor}</p></div> ))} </CardContent> </div> </Card> <Card className="lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center"><Megaphone className="mr-2 h-5 w-5 text-purple-600" /> Industry Adverts (MCAZ Approved)</CardTitle> <CardDescription>Approved promotions & announcements.</CardDescription> </CardHeader> <CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {adverts.map(ad => ( <a key={ad.id} href={ad.link} target="_blank" rel="noopener noreferrer" className="block group border rounded overflow-hidden hover:shadow-md bg-white transition-shadow"> <img src={ad.imageUrl} alt={ad.title} className="w-full h-24 object-cover"/> <div className="p-3"> <p className="text-sm font-medium mb-1 group-hover:text-blue-600">{ad.title}</p> <p className="text-xs text-gray-500">{ad.type}</p> <p className="text-xs text-gray-400 mt-2">Ref: {ad.approvedBy}</p> </div> </a> ))} </CardContent> </Card> </div> </div> ); }\r\n\r\n        // --- Doctor Portal ---\r\n        function DoctorPortal({ setActiveView }) { const [activeSubView, setActiveSubView] = useState(\'dashboard\'); const mockPatients = [ { id: \'PAT101\', name: \'Tendai Moyo\', lastVisit: \'2025-03-20\', condition: \'Hypertension\' }, { id: \'PAT102\', name: \'Alice Banda\', lastVisit: \'2025-04-10\', condition: \'Diabetes Type 2\' }, { id: \'PAT103\', name: \'John Doe\', lastVisit: \'2025-04-22\', condition: \'Check-up\' }, ]; const mockAppointments = [ { id: \'APP001\', time: \'09:00\', patientName: \'Jane Smith\', reason: \'Follow-up\' }, { id: \'APP002\', time: \'09:30\', patientName: \'Peter Jones\', reason: \'New Consult\' }, { id: \'APP003\', time: \'10:00\', patientName: \'Tendai Moyo\', reason: \'BP Check\' }, ]; const renderContent = () => { switch (activeSubView) { case \'patients\': return ( <Card> <CardHeader><CardTitle>Patient Records</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Patients..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Patient ID</TableHead><TableHead>Name</TableHead><TableHead>Last Visit</TableHead><TableHead>Primary Condition</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockPatients.map(p => ( <TableRow key={p.id}> <TableCell className="font-mono text-xs">{p.id}</TableCell><TableCell>{p.name}</TableCell><TableCell>{p.lastVisit}</TableCell><TableCell>{p.condition}</TableCell> <TableCell><Button variant="link" size="sm" onClick={() => alert(`Pholder: View Patient Record ${p.name}`)}>View Record</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'prescriptions\': return ( <Card> <CardHeader><CardTitle>Electronic Prescriptions (E-Rx)</CardTitle></CardHeader> <CardContent className="pt-4 space-y-4"> <Button onClick={() => alert(\'Pholder: Open New E-Rx Form Modal\')}> <PlusCircle className="mr-2 h-4 w-4"/> Create New Prescription </Button> <div><h4 className="font-medium mb-2">Recently Issued Prescriptions</h4><p className="text-sm text-gray-500">Placeholder: List of recent Rxs with status (Sent, Filled, Pending).</p></div> <img src="https://placehold.co/600x150/e0f2f7/0891b2?text=E-Rx+List+Mockup" alt="E-Rx List Placeholder" className="mt-4 rounded border"/> </CardContent> </Card> ); case \'appointments\': return ( <Card> <CardHeader><CardTitle>Today\'s Schedule</CardTitle></CardHeader> <CardContent className="pt-4"> <Table> <TableHeader><TableRow><TableHead>Time</TableHead><TableHead>Patient</TableHead><TableHead>Reason for Visit</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockAppointments.map(a => ( <TableRow key={a.id}> <TableCell>{a.time}</TableCell><TableCell>{a.patientName}</TableCell><TableCell>{a.reason}</TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Start Consultation ${a.patientName}`)}>Start Consult</Button> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Add Notes/Record ${a.patientName}`)}>Add Record</Button> </TableCell> </TableRow> ))} </TableBody> </Table> <Button variant="outline" size="sm" className="mt-4" onClick={() => alert(\'Pholder: Open Full Calendar View\')}>View Full Calendar</Button> </CardContent> </Card> ); case \'dashboard\': default: return ( <Card> <CardHeader><CardTitle>Doctor Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-blue-50" onClick={() => setActiveSubView(\'appointments\')}> <CalendarDays className="h-6 w-6 mb-1 text-blue-600"/> <span className="font-medium">Today\'s Appointments</span> <span className="text-sm text-gray-600">({mockAppointments.length} scheduled)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-green-50" onClick={() => setActiveSubView(\'prescriptions\')}> <FileText className="h-6 w-6 mb-1 text-green-600"/> <span className="font-medium">E-Prescriptions</span> <span className="text-sm text-gray-600">(Create & Manage)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-purple-50" onClick={() => setActiveSubView(\'patients\')}> <Users className="h-6 w-6 mb-1 text-purple-600"/> <span className="font-medium">Patient Records</span> <span className="text-sm text-gray-600">(View & Search)</span> </Button> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2 flex items-center"><Bell className="mr-2 h-4 w-4"/> Notifications & Tasks</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Lab result received for Alice B.</li> <li>Placeholder: Refill request from Tendai M.</li> <li>Placeholder: Message from Pharmacy re: Rx124</li> </ul> <Button variant="link" size="sm" className="mt-2">View All Notifications</Button> </div> </CardContent> </Card> ); } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl md:text-3xl font-bold">Doctor Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage patients, electronic prescriptions, and appointments efficiently.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={activeSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'dashboard\')} data-state={activeSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4"/>Dashboard</Button> <Button variant={activeSubView === \'appointments\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'appointments\')} data-state={activeSubView === \'appointments\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CalendarDays className="mr-2 h-4 w-4"/>Appointments</Button> <Button variant={activeSubView === \'patients\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'patients\')} data-state={activeSubView === \'patients\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Users className="mr-2 h-4 w-4"/>Patients</Button> <Button variant={activeSubView === \'prescriptions\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'prescriptions\')} data-state={activeSubView === \'prescriptions\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4"/>E-Rx</Button> </nav> <div className="pt-6"> {renderContent()} </div> </div> ); }\r\n\r\n        // --- Wholesaler Portal ---\r\n        function WholesalerPortal({ setActiveView }) { const [wholesalerSubView, setWholesalerSubView] = useState(\'dashboard\'); const mockWholesalerCatalog = MOCK_PHARMACY_INVENTORY.filter(i => i.wholesaleSource?.startsWith(\'MediSupply\') || i.wholesaleSource?.startsWith(\'PharmaDistro\')); const mockWholesalerOrders = [ { id: \'W-ORD-001\', pharmacyName: \'Bonvie Pharmacy\', date: \'2025-04-24\', total: 450.00, status: \'Shipped\' }, { id: \'W-ORD-002\', pharmacyName: \'City Pharmacy\', date: \'2025-04-25\', total: 1200.50, status: \'Processing\' }, { id: \'W-ORD-003\', pharmacyName: \'Pulse Pharmacy\', date: \'2025-04-25\', total: 320.00, status: \'Pending Confirmation\' }, ]; const renderWholesalerContent = () => { switch (wholesalerSubView) { case \'dashboard\': return ( <Card> <CardHeader><CardTitle>Wholesaler Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Pending Orders</p><p className="text-2xl font-bold text-blue-800">{mockWholesalerOrders.filter(o => o.status.includes(\'Pending\') || o.status === \'Processing\').length}</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Active Catalog Items</p><p className="text-2xl font-bold text-green-800">{mockWholesalerCatalog.filter(i => i.stock > 0).length}</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Items Nearing Low Stock</p><p className="text-2xl font-bold text-yellow-900">5</p></div> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2">Recent Activity</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Order W-ORD-001 shipped to Bonvie Pharmacy.</li> <li>Placeholder: New order W-ORD-003 received from Pulse Pharmacy.</li> <li>Placeholder: Stock updated for Paracetamol 500mg.</li> </ul> <Button variant="link" size="sm" className="mt-2" onClick={() => setWholesalerSubView(\'orders\')}>View All Orders</Button> </div> </CardContent> </Card> ); case \'catalog\': return ( <Card> <CardHeader className="flex flex-row justify-between items-center"> <div><CardTitle>Product Catalog Management</CardTitle></div> <Button onClick={() => alert(\'Pholder: Open Add New Product Modal\')} size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Add New Product</Button> </CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Catalog (Name, ID, Category)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Product ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Wholesale Price</TableHead><TableHead className="text-right">Available Stock</TableHead><TableHead>Stock Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerCatalog.map(item => ( <TableRow key={item.id}> <TableCell className="font-mono text-xs">{item.id}</TableCell><TableCell>{item.name}</TableCell><TableCell>{item.category}</TableCell> <TableCell className="text-right">${(item.price * 0.8).toFixed(2)}</TableCell> <TableCell className="text-right">{item.stock * 10}</TableCell> <TableCell><Badge variant={item.stock > 0 ? \'success\' : \'destructive\'}>{item.stock > 0 ? \'In Stock\' : \'Out Of Stock\'}</Badge></TableCell> <TableCell><Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Edit Product ${item.id}`)}>Edit</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'orders\': return ( <Card> <CardHeader><CardTitle>Incoming Pharmacy Orders</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Orders (ID, Pharmacy Name)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Pharmacy Customer</TableHead><TableHead>Order Date</TableHead><TableHead className="text-right">Order Total</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerOrders.map(order => ( <TableRow key={order.id} className={order.status.includes(\'Pending\') ? \'bg-yellow-50/70\' : \'\'}> <TableCell className="font-mono text-xs">{order.id}</TableCell><TableCell>{order.pharmacyName}</TableCell><TableCell className="text-xs">{order.date}</TableCell> <TableCell className="text-right font-medium">${order.total.toFixed(2)}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Order Details ${order.id}`)}>Details</Button> {order.status === \'Pending Confirmation\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Confirm Order ${order.id}`)}>Confirm</Button>} {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Mark as Shipped ${order.id}`)}>Mark Shipped</Button>} {order.status === \'Shipped\' && <Badge variant="info" className="ml-2">Shipped</Badge>} </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'marketWatch\': return <MarketWatchView />; default: return <div className="text-center p-8 text-gray-500">Select a section.</div>; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Wholesaler Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage your product catalog, process pharmacy orders, and view market insights.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={wholesalerSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'dashboard\')} data-state={wholesalerSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4" /> Dashboard</Button> <Button variant={wholesalerSubView === \'catalog\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'catalog\')} data-state={wholesalerSubView === \'catalog\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BookOpen className="mr-2 h-4 w-4" /> Catalog</Button> <Button variant={wholesalerSubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'orders\')} data-state={wholesalerSubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button> <Button variant={wholesalerSubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'marketWatch\')} data-state={wholesalerSubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button> </nav> <div className="pt-6"> {renderWholesalerContent()} </div> </div> ); }\r\n\r\n        // --- Community Wellness Hub ---\r\n        function CommunityWellnessHub({setActiveView}) { const [activeTab, setActiveTab] = useState(\'activities\'); const [activities, setActivities] = useState(MOCK_WELLNESS_ACTIVITIES); const [selectedDay, setSelectedDay] = useState(\'Monday\'); const [blogCategory, setBlogCategory] = useState(\'All\'); const handleBooking = (activityId) => { setActivities(prevActivities => prevActivities.map(act => { if (act.id === activityId && act.slots > 0 && !act.booked) { alert(`Successfully booked ${act.name}!`); return { ...act, slots: act.slots - 1, booked: true }; } else if (act.id === activityId && act.booked) { alert(`You have already booked ${act.name}.`); return act; } else if (act.id === activityId && act.slots === 0) { alert(`Sorry, ${act.name} is currently full.`); return act; } return act; }) ); }; const filteredActivities = activities.filter(act => act.day === selectedDay); const daysOfWeek = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'].filter(day => MOCK_WELLNESS_ACTIVITIES.some(a => a.day === day)); const blogCategories = [\'All\', ...new Set(MOCK_BLOG_POSTS.map(p => p.category))]; const filteredBlogPosts = blogCategory === \'All\' ? MOCK_BLOG_POSTS : MOCK_BLOG_POSTS.filter(p => p.category === blogCategory); const renderTabContent = () => { switch (activeTab) { case \'activities\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Community Activities & Event Schedule</h2> <p className="text-sm text-gray-600">Book sports sessions, fitness classes, support groups, and other wellness events.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">View Schedule For:</span> {daysOfWeek.map(day => ( <Button key={day} variant={selectedDay === day ? \'default\' : \'outline\'} size="sm" onClick={() => setSelectedDay(day)}> {day} </Button> ))} </div> <Card> <CardHeader> <CardTitle>Available Activities for {selectedDay}</CardTitle> </CardHeader> <CardContent className="pt-4 space-y-4"> {filteredActivities.length > 0 ? ( filteredActivities.map(act => ( <div key={act.id} className={`flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border rounded-lg gap-4 ${act.booked ? \'bg-green-50 border-green-200\' : act.slots === 0 ? \'bg-red-50 border-red-200 opacity-70\' : \'bg-white hover:bg-gray-50\'}`}> <div className="flex items-center gap-3 flex-grow"> <span className="text-3xl">{act.icon}</span> <div> <p className="font-semibold">{act.name}</p> <p className="text-sm text-gray-600">{act.time} @ {act.location}</p> <p className="text-xs mt-1"> {act.slots > 0 ? <span className="text-green-700">{`${act.slots} slots available`}</span> : <span className="font-medium text-red-600">Fully Booked</span>} </p> </div> </div> <Button size="sm" onClick={() => handleBooking(act.id)} disabled={act.slots === 0 || act.booked} className={`mt-2 sm:mt-0 flex-shrink-0 ${act.booked ? \'bg-green-600 hover:bg-green-700 cursor-default\' : act.slots === 0 ? \'bg-gray-400 cursor-not-allowed\' : \'bg-blue-600 hover:bg-blue-700\'}`}> {act.booked ? (<><CheckCircle className="mr-1 h-4 w-4"/> You\'re Booked</>) : (act.slots > 0 ? \'Book Your Slot\' : \'Full\')} </Button> </div> )) ) : ( <p className="text-center py-6 text-gray-500 italic">No activities scheduled for {selectedDay}.</p> )} </CardContent> </Card> </div> ); case \'blog\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Wellness Blog & Articles</h2> <p className="text-sm text-gray-600">Read the latest health tips, lifestyle advice, and expert insights.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">Filter by Category:</span> {blogCategories.map(cat => ( <Button key={cat} variant={blogCategory === cat ? \'default\' : \'outline\'} size="sm" onClick={() => setBlogCategory(cat)}> {cat} </Button> ))} </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredBlogPosts.map(post => ( <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-200"> <img src={post.imageUrl} alt={post.title} className="h-40 w-full object-cover"/> <CardHeader> <Badge variant="secondary" className="w-fit mb-2">{post.category}</Badge> <CardTitle className="text-lg">{post.title}</CardTitle> <CardDescription>By {post.author} - {post.date}</CardDescription> </CardHeader> <CardContent className="pt-2 flex-grow"> <p className="text-sm text-gray-700">{post.snippet}</p> </CardContent> <CardFooter className="pt-2 border-t"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Navigate to full blog post ${post.id}`)}>Read Full Article</Button> </CardFooter> </Card> ))} {filteredBlogPosts.length === 0 && ( <p className="md:col-span-2 lg:col-span-3 text-center py-10 text-gray-500 italic">No blog posts found in the "{blogCategory}" category.</p> )} </div> </div> ); case \'resources\': return ( <div className="space-y-8"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Health Resources & Interactive Tools</h2> <p className="text-sm text-gray-600">Access guides, calculators, and information on various health topics.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-gradient-to-br from-orange-50 to-amber-100 border border-orange-200"> <CardHeader> <CardTitle className="flex items-center text-orange-800"><Utensils className="mr-2 h-5 w-5"/> Diabetes Management</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-orange-700">Resources for managing diabetes effectively.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Downloadable Meal Plans</li> <li>Video Guide: Using Your Meter</li> <li>Article: Importance of Foot Care</li> <li>Find Local Support Groups</li> </ul> <Button size="sm" className="bg-orange-500 hover:bg-orange-600 text-white" onClick={() => alert(\'Pholder: Navigate to Diabetes Resource Page\')}>Explore Diabetes Section</Button> </CardContent> </Card> <Card className="bg-gradient-to-br from-red-50 to-rose-100 border border-red-200"> <CardHeader> <CardTitle className="flex items-center text-red-800"><Heart className="mr-2 h-5 w-5"/> Hypertension Control</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-red-700">Tips for managing high blood pressure.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Low Sodium Recipe Book (PDF)</li> <li>Audio Guide: Stress Reduction Techniques</li> <li>Interactive Blood Pressure Log Tool</li> <li>Understanding Your Readings</li> </ul> <Button size="sm" className="bg-red-500 hover:bg-red-600 text-white" onClick={() => alert(\'Pholder: Navigate to Hypertension Page\')}>View BP Management Tips</Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Scale className="mr-2 h-5 w-5"/> BMI Calculator</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Calculate your Body Mass Index.</p> <div className="flex gap-2 mt-2"> <div className="flex-1"><Label htmlFor="height-input">Height (cm)</Label><Input id="height-input" placeholder="e.g., 175" type="number"/></div> <div className="flex-1"><Label htmlFor="weight-input">Weight (kg)</Label><Input id="weight-input" placeholder="e.g., 70" type="number"/></div> </div> <Button size="sm" className="mt-3" onClick={() => alert(\'Pholder: Calculate BMI based on inputs\')}>Calculate BMI</Button> <p className="text-sm mt-3">Your BMI: <span className="font-semibold">[Result Placeholder]</span></p> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Brain className="mr-2 h-5 w-5"/> Mental Wellness Corner</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Resources for mental health and well-being.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Guided Mindfulness Exercises (Audio)</li> <li>Recognizing Signs of Burnout</li> <li>Directory of Local Mental Health Professionals</li> <li>Tips for Improving Sleep Quality</li> </ul> <Button size="sm" variant="link" onClick={() => alert(\'Pholder: Navigate to Mental Wellness Page\')}>Explore Mental Wellness</Button> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-3 text-gray-700">Quick Health Links</h4> <div className="grid grid-cols-1 sm:grid-cols-3 gap-3"> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Ministry of Health & Child Care (MoHCC)</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Common Colds & Flu Information</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Basic First Aid Guide</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">National Vaccination Schedules</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Find a Clinic Near You</a> </div> </div> </div> ); case \'antibiotic\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold flex items-center text-blue-800"><Pill className="mr-2 h-5 w-5"/> Antibiotic Stewardship: Be Antibiotic Wise</h2> <p className="text-sm text-gray-600">Learn about the responsible use of antibiotics to combat resistance.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-blue-50 border border-blue-200"> <CardHeader><CardTitle>Why is Responsible Use Important?</CardTitle></CardHeader> <CardContent className="pt-2 text-sm text-blue-800"><p>Antibiotic resistance is a major global health threat. When bacteria become resistant, antibiotics may not work when needed most. Using antibiotics only when necessary and as prescribed helps preserve their effectiveness for everyone.</p></CardContent> </Card> <Card> <CardHeader><CardTitle>Key Principles of Antibiotic Use</CardTitle></CardHeader> <CardContent className="pt-2"> <ul className="list-disc list-inside text-sm space-y-2 text-gray-700"> <li><strong>Viruses vs. Bacteria:</strong> Antibiotics ONLY treat bacterial infections, not viruses like colds or flu.</li> <li><strong>Complete the Full Course:</strong> Always finish your prescribed antibiotics, even if you start feeling better. Stopping early can allow resistant bacteria to survive.</li> <li><strong>Do Not Share:</strong> Never use antibiotics prescribed for someone else or share yours.</li> <li><strong>Trust Your Doctor:</strong> Don\'t pressure your doctor for antibiotics if they say you don\'t need them.</li> <li><strong>Prevent Infections:</strong> Practice good hygiene (like handwashing) and stay up-to-date on vaccinations to prevent infections in the first place.</li> </ul> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6 bg-yellow-50 p-4 rounded border border-yellow-200"> <h4 className="font-semibold mb-2 text-yellow-800 flex items-center"><AlertTriangle className="mr-2 h-4 w-4"/> Patient Advisory</h4> <p className="text-sm text-yellow-900">Always consult your doctor or pharmacist before taking any medication, including antibiotics. Ensure you understand the instructions and potential side effects. Report any adverse reactions immediately.</p> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-2">Further Information</h4> <div className="space-y-1"> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">World Health Organization (WHO) - Antimicrobial Resistance</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Africa CDC - Antimicrobial Resistance Programme</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Local Resources on Antibiotic Use (Placeholder Link)</a> </div> </div> </div> ); default: return null; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Community Wellness Hub</h1> <p className="text-sm mt-1 text-gray-600">Explore activities, health information, and resources for a healthier you.</p> </header> <div className="border-b border-gray-200"> <nav className="-mb-px flex space-x-4 overflow-x-auto"> <button onClick={() => setActiveTab(\'activities\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'activities\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'activities\' ? \'active\' : \'\'}> <CalendarDays className="inline mr-1 h-4 w-4" /> Activities & Events </button> <button onClick={() => setActiveTab(\'blog\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'blog\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'blog\' ? \'active\' : \'\'}> <BookOpen className="inline mr-1 h-4 w-4" /> Wellness Blog </button> <button onClick={() => setActiveTab(\'resources\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'resources\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'resources\' ? \'active\' : \'\'}> <Settings className="inline mr-1 h-4 w-4" /> Health Resources & Tools </button> <button onClick={() => setActiveTab(\'antibiotic\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'antibiotic\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'antibiotic\' ? \'active\' : \'\'}> <Pill className="inline mr-1 h-4 w-4" /> Be Antibiotic Wise </button> </nav> </div> <div className="mt-6"> {renderTabContent()} </div> </div> ); }\r\n\r\n        // --- Main App Component ---\r\n        function App() {\r\n            console.log("App Component: Initial Render");\r\n            const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n            const [userRole, setUserRole] = useState(null);\r\n            const [userName, setUserName] = useState(\'\');\r\n            const [userData, setUserData] = useState(null);\r\n            const [activeView, setActiveView] = useState(\'landing\');\r\n            const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n            const [verificationData, setVerificationData] = useState(null);\r\n\r\n            const openVerificationModal = (data) => { setVerificationData(data); setIsVerificationModalOpen(true); };\r\n            const closeVerificationModal = () => setIsVerificationModalOpen(false);\r\n\r\n            const handleLogin = (role) => {\r\n                console.log(`App Component: handleLogin called with role: ${role}`);\r\n                let defaultView = \'landing\'; let currentUserName = \'\'; let currentUserData = null; let authStatus = false;\r\n                switch (role) {\r\n                    case \'patient\': defaultView = \'patientPortal\'; currentUserName = MOCK_PATIENT_DATA.name; currentUserData = MOCK_PATIENT_DATA; authStatus = true; break;\r\n                    case \'pharmacy\': defaultView = \'pharmacyPortal\'; currentUserName = \'City Pharmacy Staff\'; currentUserData = { id: \'PHARM001\', name: \'City Pharmacy\'}; authStatus = true; break;\r\n                    case \'doctor\': defaultView = \'doctorPortal\'; currentUserName = \'Dr. Musasa\'; currentUserData = { id: \'DOC001\' }; authStatus = true; break;\r\n                    case \'wholesaler\': defaultView = \'wholesalerPortal\'; currentUserName = \'MediSupply Inc.\'; currentUserData = { id: \'WH001\' }; authStatus = true; break;\r\n                    default: console.warn(`App Component: Unknown role "${role}" passed to handleLogin. Staying on landing page.`); role = null; defaultView = \'landing\'; authStatus = false; break;\r\n                }\r\n                setIsAuthenticated(authStatus); setUserRole(role); setActiveView(defaultView); setUserName(currentUserName); setUserData(currentUserData); console.log(`App Component: Login state updated. Auth=${authStatus}, Role=${role}, View=${defaultView}`);\r\n            };\r\n\r\n            const handleLogout = () => { console.log("App Component: handleLogout called."); setIsAuthenticated(false); setUserRole(null); setUserName(\'\'); setUserData(null); setActiveView(\'landing\'); console.log("App Component: Logout state updated. Redirecting to landing."); };\r\n\r\n            const navigateTo = (view) => {\r\n                console.log(`App Component: navigateTo called for view: ${view}. Current auth: ${isAuthenticated}, role: ${userRole}`);\r\n                const publicViews = [\'landing\', \'wellness\']; const semiPublicViews = [\'medicineSearch\']; const allowedViews = { patient: [\'patientPortal\', \'wellness\', \'medicineSearch\', \'prescriptionUpload\', \'quotedRx\'], pharmacy: [\'pharmacyPortal\', \'wellness\'], doctor: [\'doctorPortal\', \'wellness\'], wholesaler: [\'wholesalerPortal\', \'wellness\'], };\r\n                if (publicViews.includes(view)) { console.log(` -> Navigating to public view: ${view}`); setActiveView(view); return; }\r\n                if (semiPublicViews.includes(view) && !isAuthenticated) { console.log(` -> Navigating to semi-public view (unauthenticated): ${view}`); setActiveView(view); return; }\r\n                if (!isAuthenticated) { console.log(` -> Navigation to "${view}" denied (not authenticated). Redirecting to landing.`); setActiveView(\'landing\'); return; }\r\n                if (allowedViews[userRole]?.includes(view)) { console.log(` -> Navigation allowed for role "${userRole}" to view "${view}".`); setActiveView(view); }\r\n                else if (view === \'wellness\') { console.log(` -> Navigation allowed for authenticated user ("${userRole}") to wellness.`); setActiveView(view); }\r\n                else { console.warn(` -> Access denied for role "${userRole}" attempting to navigate to view "${view}". Redirecting to user\'s default portal.`); const defaultPortal = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(allowedViews[userRole]?.includes(defaultPortal) ? defaultPortal : \'landing\'); alert(`Access Denied: You do not have permission to view \'${view}\'. Redirecting to your dashboard.`); }\r\n            };\r\n\r\n            const renderMainContent = () => {\r\n                console.log(`App Component: renderMainContent triggered. Active View: ${activeView}, Role: ${userRole}, Auth: ${isAuthenticated}`);\r\n                if (!isAuthenticated) { switch (activeView) { case \'wellness\': return <CommunityWellnessHub setActiveView={navigateTo}/>; case \'medicineSearch\': return <MedicineSearchListing navigateTo={navigateTo} />; case \'landing\': default: console.log(" -> Rendering LandingPage (unauthenticated)."); return <LandingPage setActiveView={navigateTo} login={handleLogin} navigateTo={navigateTo}/>; } }\r\n\r\n                console.log(` -> Rendering authenticated content for view: ${activeView}`);\r\n                try {\r\n                    const renderPortal = (PortalComponent, requiredRole, props = {}) => { if (userRole === requiredRole) { console.log(` -> Rendering ${requiredRole} portal.`); return <PortalComponent setActiveView={navigateTo} openVerificationModal={openVerificationModal} patientData={userData} {...props} />; } else { console.warn(`Role mismatch: Trying to render ${requiredRole} portal for user role ${userRole}. Rendering Access Denied.`); return renderAccessDenied(); } };\r\n\r\n                    switch (activeView) {\r\n                        case \'patientPortal\': return renderPortal(PatientPortal, \'patient\', { navigateTo });\r\n                        case \'pharmacyPortal\': return renderPortal(PharmacyPortal, \'pharmacy\');\r\n                        case \'doctorPortal\': return renderPortal(DoctorPortal, \'doctor\');\r\n                        case \'wholesalerPortal\': return renderPortal(WholesalerPortal, \'wholesaler\');\r\n                        case \'wellness\': console.log(" -> Rendering CommunityWellnessHub (authenticated)."); return <CommunityWellnessHub setActiveView={navigateTo}/>;\r\n                        case \'medicineSearch\': if (userRole === \'patient\') return <MedicineSearchListing navigateTo={navigateTo} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'prescriptionUpload\': if (userRole === \'patient\') return <PrescriptionUpload navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'quotedRx\': if (userRole === \'patient\') { const quote = userData?.prescriptions?.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quote?.quote} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; } else return renderAccessDenied();\r\n                        default: console.warn(` -> Unhandled authenticated view route: "${activeView}". Resetting to user\'s default portal.`); const defaultPortalView = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(defaultPortalView); return null;\r\n                    }\r\n                } catch (error) {\r\n                     console.error(`CRITICAL ERROR rendering authenticated view "${activeView}" for role "${userRole}":`, error);\r\n                     return ( <div className="text-center p-8 text-red-600 bg-red-50 border border-red-200 rounded-md"><h2 className="text-xl font-semibold mb-2">Oops! Something went wrong.</h2><p>We encountered an error while loading this part of the application.</p><p className="mt-2">Please try refreshing the page. If the problem persists, contact support.</p><p className="mt-4 text-xs text-red-500"><i>Error details (for support): {error.message}</i></p><p className="text-xs text-red-500"><i>(Check browser console (F12) for more info)</i></p><pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || \'No stack trace available.\'}</pre></div> );\r\n                }\r\n            };\r\n\r\n            const renderAccessDenied = () => ( <div className="text-center py-10 px-4"> <Card className="max-w-md mx-auto bg-red-50 border-red-200"> <CardHeader> <CardTitle className="text-red-700 flex items-center justify-center"><AlertTriangle className="h-6 w-6 mr-2"/> Access Denied</CardTitle> </CardHeader> <CardContent className="pt-4 text-red-800"> <p>You do not have permission to access this page (\'{activeView}\') with your current role (\'{userRole || \'None\'}\').</p> <Button onClick={() => navigateTo(userRole ? `${userRole}Portal` : \'landing\')} className="mt-6 bg-red-600 hover:bg-red-700 text-white">Go to My Dashboard / Home</Button> </CardContent> </Card> </div> );\r\n\r\n            const renderNavigation = () => {\r\n                console.log(`App Component: renderNavigation. Auth=${isAuthenticated}, Role=${userRole}, View=${activeView}`);\r\n                if (!isAuthenticated) { return ( <div className="flex items-center space-x-2 sm:space-x-4"> <Button variant="ghost" onClick={() => navigateTo(\'medicineSearch\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Search className="mr-1 h-4 w-4" /> Search Meds </Button> <Button variant="ghost" onClick={() => navigateTo(\'wellness\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Activity className="mr-1 h-4 w-4" /> Wellness </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Show Login Options/Modal\')} size="sm"> <LogIn className="mr-1 h-4 w-4" /> Login </Button> <Button onClick={() => alert(\'Pholder: Show Registration Options/Modal\')} size="sm"> Register </Button> </div> ); }\r\n                else {\r\n                     const portalButtons = { patient: <Button variant={activeView === \'patientPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'patientPortal\')} size="sm" data-state={activeView === \'patientPortal\' ? \'active\' : \'\'}><Home className="mr-1 h-4 w-4" /> Dashboard</Button>, pharmacy: <Button variant={activeView === \'pharmacyPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'pharmacyPortal\')} size="sm" data-state={activeView === \'pharmacyPortal\' ? \'active\' : \'\'}><Building className="mr-1 h-4 w-4" /> Pharmacy Portal</Button>, doctor: <Button variant={activeView === \'doctorPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'doctorPortal\')} size="sm" data-state={activeView === \'doctorPortal\' ? \'active\' : \'\'}><Stethoscope className="mr-1 h-4 w-4" /> Doctor Portal</Button>, wholesaler: <Button variant={activeView === \'wholesalerPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wholesalerPortal\')} size="sm" data-state={activeView === \'wholesalerPortal\' ? \'active\' : \'\'}><Truck className="mr-1 h-4 w-4" /> Wholesaler Portal</Button>, };\r\n                    return ( <div className="flex items-center space-x-2 sm:space-x-4 overflow-x-auto py-1 flex-grow justify-end">\r\n                            {portalButtons[userRole]}\r\n                            <Button variant={activeView === \'wellness\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wellness\')} size="sm" data-state={activeView === \'wellness\' ? \'active\' : \'\'}><Activity className="mr-1 h-4 w-4" /> Wellness</Button>\r\n                            <div className="flex items-center space-x-3 pl-3 border-l border-gray-200 ml-2 flex-shrink-0">\r\n                                <Button variant="ghost" size="icon" className="relative hover:bg-gray-100 rounded-full" onClick={() => alert(\'Placeholder: Show Notifications Panel\')}> <Bell className="h-5 w-5 text-gray-600" /> <span className="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full ring-1 ring-white bg-red-500"/> </Button>\r\n                                <span className="text-sm font-medium text-gray-700 hidden sm:inline" title={`Logged in as: ${userRole}`}>Welcome, {userName}</span>\r\n                                <Button variant="outline" onClick={handleLogout} size="sm"> <LogOut className="mr-1 h-4 w-4" /> Logout </Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            };\r\n\r\n\r\n            // Ensure NO HTML comments are inside this return block\r\n            return (\r\n                <div className="min-h-screen bg-gray-100 flex flex-col">\r\n                    {/* Sticky Navigation Bar */}\r\n                    <nav className="bg-white shadow-md sticky top-0 z-40">\r\n                        <div className="container mx-auto px-4 py-2 flex flex-wrap justify-between items-center gap-4">\r\n                             <span\r\n                                className="text-2xl font-bold text-blue-700 cursor-pointer shrink-0 mr-6"\r\n                                onClick={() => navigateTo(isAuthenticated ? `${userRole}Portal` : \'landing\')}\r\n                                title="Go to Home/Dashboard"\r\n                             >\r\n                                ehutano<span className="text-green-600">+</span>\r\n                             </span>\r\n                             {renderNavigation()}\r\n                         </div>\r\n                    </nav>\r\n\r\n                    {/* Main Content Area */}\r\n                    <main className="container mx-auto p-4 md:p-6 lg:p-8 flex-grow">\r\n                        {renderMainContent()}\r\n                    </main>\r\n\r\n                    {/* Footer */}\r\n                    <footer className="bg-gray-800 text-gray-400 text-sm py-10 mt-16">\r\n                        <div className="container mx-auto px-4">\r\n                             <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 mb-8">\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Company</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">About Us</a></li> <li><a href="#" className="hover:text-white hover:underline">Careers</a></li> <li><a href="#" className="hover:text-white hover:underline">Contact</a></li> <li><a href="#" className="hover:text-white hover:underline" onClick={(e) => { e.preventDefault(); navigateTo(\'wellness\'); }}>Blog</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Legal</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Privacy Policy</a></li> <li><a href="#" className="hover:text-white hover:underline">Terms of Service</a></li> <li><a href="#" className="hover:text-white hover:underline">Compliance</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Resources</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Help Center</a></li> <li><a href="#" className="hover:text-white hover:underline">API Documentation</a></li> <li><a href="#" className="hover:text-white hover:underline">System Status</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Connect</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Facebook</a></li> <li><a href="#" className="hover:text-white hover:underline">Twitter / X</a></li> <li><a href="#" className="hover:text-white hover:underline">LinkedIn</a></li> <li><a href="#" className="hover:text-white hover:underline">WhatsApp Support</a></li> </ul> </div>\r\n                                <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right mt-8 lg:mt-0"> <span className="text-3xl font-bold text-white"> ehutano<span className="text-green-400">+</span> </span> <p className="text-xs mt-2">Digital Health Solutions</p> </div>\r\n                             </div>\r\n                             <div className="border-t border-gray-700 pt-6 text-center text-xs"> &copy; {new Date().getFullYear()} ehutano+. A division of Health Futures Ltd. All rights reserved. </div>\r\n                        </div>\r\n                    </footer>\r\n\r\n                     {/* Centralized Modals */}\r\n                    <MedicineVerificationModal isOpen={isVerificationModalOpen} onClose={closeVerificationModal} verificationData={verificationData} />\r\n                    {/* OrderDetailsModal & DispensingModal are rendered within PharmacyPortal */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        // --- Render the App ---\r\n        try {\r\n            console.log("Attempting ReactDOM.render...");\r\n            ReactDOM.render(<App />, document.getElementById(\'root\'));\r\n            console.log("React app rendered successfully.");\r\n        } catch (error) {\r\n             console.error("CRITICAL ERROR DURING REACT RENDERING:", error);\r\n             const rootElement = document.getElementById(\'root\');\r\n             if (rootElement) {\r\n                rootElement.innerHTML = `<div style="padding: 2rem; border: 2px solid red; background-color: #fee; color: #a00; font-family: sans-serif; text-align: center;">\r\n                                            <h2>Application Initialization Error</h2>\r\n                                            <p>We\'re sorry, but the application failed to load correctly.</p>\r\n                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>\r\n                                            <p style="margin-top: 1em; font-size: 0.9em; color: #500;"><i>Technical Details (for support): ${error.message}</i></p>\r\n                                            <p style="font-size: 0.8em;">(Check the browser\'s developer console (F12) for more detailed error information)</p>\r\n                                            <pre style="margin-top: 1em; text-align: left; background: #fff; border: 1px solid #ccc; padding: 1em; overflow-x: auto; font-size: 0.8em;">${error.stack || \'No stack trace available.\'}</pre>\r\n                                         </div>`;\r\n             }\r\n        }\r\n\r\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\r\n        // ***********************************************************************\r\n        // ehutano+ React Frontend Components (Structured Portals & Auth) - v6 - CORRECTED v6\r\n        // ***********************************************************************\r\n        // Final check: Ensuring no stray HTML comments are within the React JSX.\r\n        // ***********************************************************************\r\n\r\n        const { useState, useMemo, useEffect } = React;\r\n\r\n        // --- Mock Data ---\r\n        const MOCK_PATIENT_DATA = { name: \'Tendai Moyo\', medicalAid: { provider: \'Cimas\', memberId: \'CIM123456789\', verified: true }, recentOrders: [ { id: \'ORD789\', date: \'2025-04-18\', status: \'Delivered\', total: \'$15.50\', items: [\'Paracetamol 500mg\', \'Vitamin C Tabs\'] }, { id: \'ORD788\', date: \'2025-04-15\', status: \'Delivered\', total: \'$22.00\', items: [\'Amoxicillin 250mg (Script)\'] }, { id: \'ORD785\', date: \'2025-04-10\', status: \'Cancelled\', total: \'$8.75\', items: [\'Cough Syrup\'] }, ], prescriptions: [ { id: \'RX123\', medicine: \'Amoxicillin 250mg\', doctor: \'Dr. Chipo Musasa\', dateIssued: \'2025-04-14\', status: \'Filled\', refillsLeft: 0, uploadId: \'UPL001\' }, { id: \'RX124\', medicine: \'Lisinopril 10mg\', doctor: \'Dr. David Chen\', dateIssued: \'2025-03-20\', status: \'Active\', refillsLeft: 2, uploadId: \'UPL002\' }, { id: \'UPL003\', status: \'Pending Review\', dateUploaded: \'2025-04-25\', notes: \'Need urgently please\', isQuoteReady: false }, { id: \'UPL004\', status: \'Quote Ready\', dateUploaded: \'2025-04-24\', isQuoteReady: true, quote: { total: 35.50, items: [{ name: \'Metformin 500mg\', price: 9.50, qty: 1 }, { name: \'Amlodipine 5mg\', price: 13.00, qty: 2 }] } } ], reminders: [ { id: \'REM01\', type: \'Refill\', medicine: \'Lisinopril 10mg\', dueDate: \'2025-05-15\' }, { id: \'REM02\', type: \'Appointment\', details: \'Check-up with Dr. Chen\', dueDate: \'2025-05-01\' }, ], healthMetrics: { bloodPressure: \'120/80 mmHg\', lastCheckup: \'2025-03-20\', } };\r\n        const MOCK_PHARMACY_INVENTORY = [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', category: \'Pain Relief\', stock: 150, price: 2.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot A\' }, { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', category: \'Antibiotics\', stock: 45, price: 8.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot B\' }, { id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', category: \'Vitamins\', stock: 80, price: 5.75, supplier: \'HealthWell\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot C\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', category: \'Allergy\', stock: 5, price: 4.20, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-18\', status: \'Low Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot D\' }, { id: \'MED005\', name: \'Cough Syrup XYZ\', category: \'Cold & Flu\', stock: 0, price: 6.50, supplier: \'MediSupply\', lastUpdated: \'2025-04-15\', status: \'Out of Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'LocalChem\', wholesaleSource: \'MediSupply Lot E\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', category: \'Digestive Health\', stock: 60, price: 7.10, supplier: \'HealthWell\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot F\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', category: \'Pain Relief\', stock: 200, price: 3.10, supplier: \'MediSupply\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot G\' }, { id: \'MED008\', name: \'Metformin 500mg\', category: \'Diabetes\', stock: 70, price: 9.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'PharmaDistro Lot H\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', category: \'Antibiotics\', stock: 30, price: 12.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-21\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot I\' }, ];\r\n        const MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES = MOCK_PHARMACY_INVENTORY.map(item => ({ id: item.id, name: item.name, category: item.category, requiresPrescription: item.requiresPrescription, isAntibiotic: item.isAntibiotic, imageUrl: `https://placehold.co/150x150/e2e8f0/334155?text=${item.name.split(\' \')[0]}`, pharmacies: [ { name: \'Bonvie Pharmacy\', price: item.price, stockStatus: item.stock > 10 ? \'In Stock\' : (item.stock > 0 ? \'Low Stock\' : \'Out of Stock\') }, { name: \'Pulse Pharmacy\', price: item.price * 1.05, stockStatus: Math.random() > 0.2 ? \'In Stock\' : \'Low Stock\' }, { name: \'City Pharmacy\', price: item.price * 0.98, stockStatus: Math.random() > 0.1 ? \'In Stock\' : \'Out of Stock\' }, ].filter(p => p.stockStatus !== \'Out of Stock\'), }));\r\n        const MOCK_SALES_DATA = [ { name: \'Jan\', sales: 4000 }, { name: \'Feb\', sales: 3000 }, { name: \'Mar\', sales: 5000 }, { name: \'Apr\', sales: 4500 }, { name: \'May\', sales: 6000 }, { name: \'Jun\', sales: 5500 }, ];\r\n        const MOCK_PARTNER_LOGOS = [ { name: \'Cimas MedAid\', url: \'https://placehold.co/150x60/a5f3fc/0e7490?text=Cimas+Logo\' }, { name: \'Bonvie Pharmacy\', url: \'https://placehold.co/150x60/d8b4fe/581c87?text=Bonvie+Pharmacy\' }, { name: \'MediSupply Wholesalers\', url: \'https://placehold.co/150x60/fecaca/991b1b?text=MediSupply\' }, { name: \'Wellness Hub ZW\', url: \'https://placehold.co/150x60/a7f3d0/14532d?text=Wellness+Hub\' }, { name: \'Dr. Moyo Clinic\', url: \'https://placehold.co/150x60/bfdbfe/1e40af?text=Dr.+Moyo\' }, { name: \'First Mutual Health\', url: \'https://placehold.co/150x60/fed7aa/9a3412?text=FMH+Logo\' }, { name: \'Pulse Pharmacy\', url: \'https://placehold.co/150x60/fbcfe8/9d174d?text=Pulse+Pharmacy\' }, { name: \'PharmaDistro Ltd\', url: \'https://placehold.co/150x60/e0e7ff/3730a3?text=PharmaDistro\' }, ];\r\n        const MOCK_PHARMACY_ORDERS = [ { id: \'ORD-PHARM-001\', patientName: \'Alice Banda\', date: \'2025-04-23\', status: \'Pending Payment\', total: 35.50, items: [{ id: \'MED002\', name: \'Amoxicillin 250mg Caps\', qty: 1 }, { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', qty: 2 }], medicalAidStatus: \'Pending Patient Auth\', amountCovered: 0.00, medicalAidProvider: \'Cimas\', requiresAction: true, paymentMethod: \'Medical Aid\', patientId: \'PAT001\' }, { id: \'ORD-PHARM-002\', patientName: \'Tendai Moyo\', date: \'2025-04-22\', status: \'Ready for Pickup\', total: 12.00, items: [{ id: \'MED009\', name: \'Ciprofloxacin 500mg\', qty: 1 }], medicalAidStatus: \'Received\', amountCovered: 10.00, medicalAidProvider: \'First Mutual Health\', requiresAction: true, paymentMethod: \'Medical Aid / Co-Pay\', patientId: \'PAT002\' }, { id: \'ORD-PHARM-003\', patientName: \'John Doe\', date: \'2025-04-21\', status: \'Completed\', total: 5.75, items: [{ id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: false, paymentMethod: \'EcoCash\', patientId: \'PAT003\' }, { id: \'ORD-PHARM-004\', patientName: \'Jane Smith\', date: \'2025-04-24\', status: \'Processing\', total: 9.50, items: [{ id: \'MED008\', name: \'Metformin 500mg\', qty: 1 }], medicalAidStatus: \'Claim Submitted\', amountCovered: 7.50, medicalAidProvider: \'Cimas\', requiresAction: false, paymentMethod: \'Medical Aid\', patientId: \'PAT004\' }, { id: \'ORD-PHARM-005\', patientName: \'Blessing R\', date: \'2025-04-25\', status: \'Pending Approval\', total: 25.00, items: [{ id: \'MED006\', name: \'Omeprazole 20mg Caps\', qty: 2 }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: true, paymentMethod: \'Cash on Delivery\', patientId: \'PAT005\' }, ];\r\n        const MOCK_VERIFICATION_DATA_VALID = { status: \'verified\', medicineName: \'Amoxicillin 250mg Caps\', batchNumber: \'BCH12345\', expiryDate: \'2026-12-31\', pharmacySource: \'Bonvie Pharmacy\', wholesaleSource: \'MediSupply Lot B\', manufacturer: \'GenericMed\', isAntibiotic: true, message: \'Medicine verified successfully. Genuine product.\' };\r\n        const MOCK_VERIFICATION_DATA_INVALID = { status: \'invalid\', message: \'Verification Failed! Product may be falsified. Report to pharmacy/MCAZ.\', isAntibiotic: false, };\r\n        const MOCK_VERIFICATION_DATA_EXPIRED = { status: \'expired\', medicineName: \'Paracetamol 500mg Tabs\', batchNumber: \'BCH67890\', expiryDate: \'2024-03-31\', pharmacySource: \'Pulse Pharmacy\', wholesaleSource: \'PharmaDistro Lot C\', manufacturer: \'PharmaCo\', isAntibiotic: false, message: \'Warning: This medicine has EXPIRED. Do not use.\' };\r\n        const MOCK_MARKET_WATCH_DATA = { fastMoving: [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', trend: \'+25% sales WoW\', source: \'Aggregated POS\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', trend: \'High seasonal demand\', source: \'AI Model\' }, { id: \'MED003\', name: \'Vitamin C 1000mg\', trend: \'+15% sales WoW\', source: \'Wholesaler Volume\' }, ], highDemand: [ { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', reason: \'Increased Rx volume\', source: \'E-Rx Trends\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', reason: \'UTI treatment spike\', source: \'Clinic Data\' }, { id: \'MEDXXX\', name: \'Salbutamol Inhalers\', reason: \'Allergy season onset\', source: \'AI Model\' }, ], stockOuts: [ { id: \'MED005\', name: \'Cough Syrup XYZ\', supplier: \'MediSupply\', note: \'ETA 3 days\', status: \'Out of Stock\', source: \'Wholesaler Feed\' }, { id: \'MEDXYZ\', name: \'Salbutamol Inhaler\', supplier: \'PharmaDistro\', note: \'Manufacturing delay\', status: \'Out of Stock\', source: \'Supplier Comms\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', supplier: \'PharmaDistro\', note: \'Multiple low levels\', status: \'Low Stock\', source: \'Aggregated Inventory\' }, ], priceAlerts: [ { id: \'MED008\', name: \'Metformin 500mg\', change: \'+5% supplier price\', note: \'Effective next cycle\', source: \'PharmaDistro Update\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', change: \'-3% promotion\', note: \'Limited time offer\', source: \'Supplier Bulletin\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', change: \'+8% import cost\', note: \'FX fluctuation\', source: \'Import Agent\' }, ], newlyRegistered: [ { id: \'MED101\', name: \'Generic Lisinopril 5mg\', supplier: \'NewGen Pharma\', date: \'2025-04-15\', source: \'MCAZ Registry\' }, { id: \'MED102\', name: \'Adv. Allergy Spray\', supplier: \'HealthWell\', date: \'2025-04-10\', source: \'MCAZ Registry\' }, ], recentlyImported: [ { id: \'MEDIMP01\', name: \'Vaccine Batch X\', source: \'WHO\', arrival: \'2025-04-20\', distributor: \'Govt Stores\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', source: \'EU Supplier\', arrival: \'2025-04-18\', distributor: \'PharmaDistro\' }, ], aiInsights: [ "AI Trend: Potential shortage of pediatric Paracetamol Syrup expected in 2 weeks based on consumption & low regional stock. Check inventory.", "Demand Forecast: 30%+ increase predicted for allergy meds next month (pollen). Consider early stocking.", "Opportunity: Promote Vitamin D based on seasonal patterns & low recent sales velocity.", "Pricing Anomaly: Ciprofloxacin wholesale price shows higher variance. Cross-check quotes.", ], };\r\n        const MOCK_ADVERTS = [ { id: \'AD001\', title: \'Bonvie Pharmacy: Flu Shots Available Now!\', imageUrl: \'https://placehold.co/300x100/d8b4fe/581c87?text=Bonvie+Flu+Shots\', link: \'#\', approvedBy: \'MCAZ Ref: AD/FLU/25/001\', type: \'Pharmacy Promotion\' }, { id: \'AD002\', title: \'MediSupply: Reliable Partner for Bulk Orders\', imageUrl: \'https://placehold.co/300x100/fecaca/991b1b?text=MediSupply+Wholesale\', link: \'#\', approvedBy: \'MCAZ Ref: AD/WS/25/003\', type: \'Wholesaler Service\' }, { id: \'AD003\', title: \'Stay Healthy with BrandX Vitamins\', imageUrl: \'https://placehold.co/300x100/a7f3d0/14532d?text=BrandX+Vitamins\', link: \'#\', approvedBy: \'MCAZ Ref: AD/PROD/25/015\', type: \'Product Promotion\' }, ];\r\n        const MOCK_WELLNESS_ACTIVITIES = [ { id: \'ACT001\', name: \'5-a-side Soccer\', day: \'Monday\', time: \'18:00\', location: \'Field A\', slots: 3, booked: false, icon: \'⚽\' }, { id: \'ACT002\', name: \'Yoga Class\', day: \'Tuesday\', time: \'07:00\', location: \'Studio 1\', slots: 5, booked: false, icon: \'🧘\' }, { id: \'ACT003\', name: \'Basketball Pickup\', day: \'Tuesday\', time: \'19:00\', location: \'Court 1\', slots: 8, booked: false, icon: \'🏀\' }, { id: \'ACT004\', name: \'Tennis Singles\', day: \'Wednesday\', time: \'10:00\', location: \'Court 2\', slots: 1, booked: true, icon: \'🎾\' }, { id: \'ACT005\', name: \'Health Walk\', day: \'Thursday\', time: \'06:30\', location: \'Park Entrance\', slots: 15, booked: false, icon: \'🚶\u200d♀️\' }, { id: \'ACT006\', name: \'Zumba Fitness\', day: \'Friday\', time: \'17:30\', location: \'Studio 2\', slots: 0, booked: false, icon: \'💃\' }, { id: \'ACT007\', name: \'Diabetes Support\', day: \'Wednesday\', time: \'14:00\', location: \'Room 1\', slots: 10, booked: false, icon: \'💬\' }, { id: \'ACT008\', name: \'Healthy Cooking\', day: \'Thursday\', time: \'12:00\', location: \'Demo Kitchen\', slots: 6, booked: false, icon: \'🧑\u200d🍳\' }, ];\r\n        const MOCK_BLOG_POSTS = [ { id: \'BLOG001\', title: \'Seasonal Allergies in Zim\', date: \'2025-04-20\', author: \'Dr. Musasa\', snippet: \'Manage symptoms with local tips...\', imageUrl: \'https://placehold.co/300x150/a7f3d0/14532d?text=Allergies\', category: \'General Health\' }, { id: \'BLOG002\', title: \'Importance of Hydration\', date: \'2025-04-15\', author: \'Wellness Team\', snippet: \'Crucial for health in warmer climates...\', imageUrl: \'https://placehold.co/300x150/bfdbfe/1e40af?text=Hydration\', category: \'Lifestyle\' }, { id: \'BLOG003\', title: \'Simple Home Exercises\', date: \'2025-04-10\', author: \'Coach Themba\', snippet: \'Stay active without leaving home...\', imageUrl: \'https://placehold.co/300x150/fecaca/991b1b?text=Home+Exercise\', category: \'Fitness\' }, { id: \'BLOG004\', title: \'Healthy Eating on Budget\', date: \'2025-04-05\', author: \'Nutritionist N.\', snippet: \'Affordable & nutritious local options...\', imageUrl: \'https://placehold.co/300x150/fed7aa/9a3412?text=Healthy+Eating\', category: \'Nutrition\' }, { id: \'BLOG005\', title: \'Managing Type 2 Diabetes\', date: \'2025-04-22\', author: \'Diabetes Educator\', snippet: \'Lifestyle changes are vital...\', imageUrl: \'https://placehold.co/300x150/fde68a/ca8a04?text=Diabetes+Mgmt\', category: \'Diabetes\' }, { id: \'BLOG006\', title: \'Managing High Blood Pressure\', date: \'2025-04-18\', author: \'Dr. Chen\', snippet: \'Learn risks & management steps...\', imageUrl: \'https://placehold.co/300x150/fda4af/be123c?text=Hypertension\', category: \'Heart Health\' }, ];\r\n\r\n        // --- UI Components ---\r\n        const Button = ({ children, variant = \'default\', size = \'default\', className = \'\', disabled, ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"; const variants = { default: "bg-blue-600 text-white hover:bg-blue-700/90", destructive: "bg-red-600 text-white hover:bg-red-700/90", outline: "border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-900", secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200/80", ghost: "hover:bg-gray-100 hover:text-gray-900", link: "text-blue-600 underline-offset-4 hover:underline", success: "bg-green-600 text-white hover:bg-green-700/90", warning: "bg-yellow-400 text-yellow-900 hover:bg-yellow-500/90", }; const sizes = { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }; const variantStyle = variants[variant] || variants.default; return <button disabled={disabled} className={`${baseStyle} ${variantStyle} ${sizes[size]} ${className}`} {...props}>{children}</button>; };\r\n        const Card = ({ children, className = \'\', ...props }) => ( <div className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`} {...props}>{children}</div> );\r\n        const CardHeader = ({ children, className = \'\', ...props }) => <div className={`flex flex-col space-y-1.5 p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardTitle = ({ children, className = \'\', ...props }) => <h3 className={`text-lg md:text-xl font-semibold leading-none tracking-tight ${className}`} {...props}>{children}</h3>;\r\n        const CardDescription = ({ children, className = \'\', ...props }) => <p className={`text-sm text-gray-500 ${className}`} {...props}>{children}</p>;\r\n        const CardContent = ({ children, className = \'\', ...props }) => <div className={`p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardFooter = ({ children, className = \'\', ...props }) => <div className={`flex items-center p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const Table = ({ children, className = \'\', ...props }) => <div className="w-full overflow-auto"><table className={`w-full caption-bottom text-sm ${className}`} {...props}>{children}</table></div>;\r\n        const TableHeader = ({ children, className = \'\', ...props }) => <thead className={`[&_tr]:border-b bg-gray-50 ${className}`} {...props}>{children}</thead>;\r\n        const TableBody = ({ children, className = \'\', ...props }) => <tbody className={`[&_tr:last-child]:border-0 divide-y divide-gray-200 ${className}`} {...props}>{children}</tbody>;\r\n        const TableFooter = ({ children, className = \'\', ...props }) => <tfoot className={`border-t bg-gray-100/50 font-medium ${className}`} {...props}>{children}</tfoot>;\r\n        const TableRow = ({ children, className = \'\', ...props }) => <tr className={`border-b border-gray-200 transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-blue-50 ${className}`} {...props}>{children}</tr>;\r\n        const TableHead = ({ children, className = \'\', ...props }) => <th className={`h-12 px-4 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>{children}</th>;\r\n        const TableCell = ({ children, className = \'\', ...props }) => <td className={`p-4 align-middle ${className}`} {...props}>{children}</td>;\r\n        const TableCaption = ({ children, className = \'\', ...props }) => <caption className={`mt-4 text-sm text-gray-500 ${className}`} {...props}>{children}</caption>;\r\n        const Input = ({ className = \'\', type = \'text\', ...props }) => ( <input type={type} className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Select = ({ children, className = \'\', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 appearance-none pr-8 bg-no-repeat bg-right bg-[url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="%236b7280" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/></svg>\')] ${className}`} {...props}> {children} </select> );\r\n        const SelectItem = ({ children, value, ...props }) => <option value={value} {...props}>{children}</option>;\r\n        const Badge = ({ children, variant = \'default\', className = \'\', ...props }) => { const baseStyle = "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"; const variants = { default: "border-transparent bg-blue-600 text-blue-50", secondary: "border-transparent bg-gray-200 text-gray-800", destructive: "border-transparent bg-red-600 text-red-50", outline: "text-gray-900 border-gray-300", success: "border-transparent bg-green-500 text-white", warning: "border-transparent bg-yellow-400 text-yellow-900", info: "border-transparent bg-sky-500 text-white", trendUp: "border-transparent bg-emerald-100 text-emerald-800", trendDown: "border-transparent bg-rose-100 text-rose-800", }; const variantStyle = variants[variant] || variants.default; return <span className={`${baseStyle} ${variantStyle} ${className}`} {...props}>{children}</span>; };\r\n        const Label = ({ children, className = \'\', ...props }) => ( <label className={`block text-sm font-medium text-gray-700 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}> {children} </label> );\r\n        const Textarea = ({ className = \'\', ...props }) => ( <textarea className={`flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Modal = ({ isOpen, onClose, title, children, maxWidth = \'lg\' }) => { if (!isOpen) return null; const widthClasses = { sm: \'max-w-sm\', md: \'max-w-md\', lg: \'max-w-lg\', xl: \'max-w-xl\', \'2xl\': \'max-w-2xl\', \'3xl\': \'max-w-3xl\', \'4xl\': \'max-w-4xl\' }; return ( <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 backdrop-blur-sm animate-fade-in" onClick={onClose}> <div className={`bg-white rounded-lg shadow-xl w-full ${widthClasses[maxWidth] || widthClasses.lg} max-h-[90vh] flex flex-col overflow-hidden transform transition-all animate-scale-in`} onClick={e => e.stopPropagation()} > <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10"> <h3 className="text-lg font-semibold text-gray-800">{title}</h3> <button onClick={onClose} className="text-gray-400 hover:text-gray-700 text-2xl leading-none p-1 rounded-full hover:bg-gray-100">&times;</button> </div> <div className="p-4 md:p-6 overflow-y-auto flex-grow"> {children} </div> </div> </div> ); };\r\n\r\n        // --- Icons ---\r\n        const ShoppingCart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="9" cy="21" r="1"/><circle cx="20" cy="21" r="1"/><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/></svg>;\r\n        const Pill = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"/><path d="m8.5 8.5 7 7"/></svg>;\r\n        const Bell = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/><path d="M13.73 21a2 2 0 0 1-3.46 0"/></svg>;\r\n        const FileText = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>;\r\n        const User = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;\r\n        const Search = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;\r\n        const PlusCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="16"/><line x1="8" x2="16" y1="12" y2="12"/></svg>;\r\n        const Filter = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;\r\n        const BarChart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="20" y2="10"/><line x1="18" x2="18" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="16"/></svg>;\r\n        const Settings = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0 2l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const UploadCloud = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M12 12v9"/><path d="m16 16-4-4-4 4"/></svg>;\r\n        const Stethoscope = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"/><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"/><circle cx="20" cy="10" r="2"/></svg>;\r\n        const Truck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>;\r\n        const Building = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><path d="M9 22v-4h6v4"/><path d="M8 6h.01"/><path d="M16 6h.01"/><path d="M12 6h.01"/><path d="M12 10h.01"/><path d="M12 14h.01"/><path d="M16 10h.01"/><path d="M16 14h.01"/><path d="M8 10h.01"/><path d="M8 14h.01"/></svg>;\r\n        const Activity = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>;\r\n        const Home = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;\r\n        const Users = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;\r\n        const MapPin = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>;\r\n        const LogIn = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/><polyline points="10 17 15 12 10 7"/><line x1="15" x2="3" y1="12" y2="12"/></svg>;\r\n        const LogOut = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>;\r\n        const HeartPulse = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.22 12H9.5l.7-1 2.1 2.1.8-1 1.9 1.9h5.27"/></svg>;\r\n        const FileSearch = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"/><path d="M14 2v6h6"/><circle cx="5" cy="14" r="3"/><path d="m9 18-1.5-1.5"/></svg>;\r\n        const FileCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="m9 15 2 2 4-4"/></svg>;\r\n        const CreditCard = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>;\r\n        const PackageCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16.19 11.26-4.19 4.19-1.53-1.53"/><path d="M22 11.16V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1.17"/><path d="m16 4 3 3H4"/><path d="M18 7.84V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12.17"/><path d="M21 10.84v.32a2 2 0 0 1-2 2H17"/><path d="M7 16h10"/></svg>;\r\n        const QrCode = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="5" height="5" x="3" y="3" rx="1"/><rect width="5" height="5" x="16" y="3" rx="1"/><rect width="5" height="5" x="3" y="16" rx="1"/><path d="M21 16h-3a2 2 0 0 0-2 2v3"/><path d="M21 21v.01"/><path d="M12 7v3a2 2 0 0 1-2 2H7"/><path d="M3 12h.01"/><path d="M12 3h.01"/><path d="M12 16v.01"/><path d="M16 12h1"/><path d="M21 12v.01"/><path d="M12 21v-1"/></svg>;\r\n        const AlertTriangle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>;\r\n        const CheckCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><path d="m9 11 3 3L22 4"/></svg>;\r\n        const XCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>;\r\n        const BookOpen = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;\r\n        const ClipboardList = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>;\r\n        const Info = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>;\r\n        const TrendingUp = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>;\r\n        const PackageX = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"/><path d="m7.5 4.27 9 5.15"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/><path d="m17 13 5 5"/><path d="m22 13-5 5"/></svg>;\r\n        const DollarSign = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;\r\n        const PackagePlus = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4a7 7 0 1 1-9 0"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><line x1="12" x2="12" y1="12" y2="22"/><polyline points="7 12 12 14.5 17 12"/><line x1="3.29" x2="12" y1="7" y2="12"/><line x1="20.71" x2="12" y1="7" y2="12"/><line x1="12" x2="12" y1="8" y2="10"/><line x1="10" x2="14" y1="9" y2="9"/></svg>;\r\n        const Cpu = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><rect width="6" height="6" x="9" y="9" rx="1"/><path d="M15 2v2"/><path d="M15 20v2"/><path d="M9 2v2"/><path d="M9 20v2"/><path d="M2 9h2"/><path d="M2 15h2"/><path d="M20 9h2"/><path d="M20 15h2"/><path d="M9 4V2"/><path d="M15 4V2"/><path d="M9 20v2"/><path d="M15 20v2"/></svg>;\r\n        const Megaphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 11 18-5v12L3 14v-3z"/><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"/></svg>;\r\n        const Eye = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const CalendarDays = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;\r\n        const Utensils = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>;\r\n        const Heart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/></svg>;\r\n        const Scale = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2"/><path d="M19 7h2"/></svg>;\r\n        const Brain = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3.06Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3.06Z"/></svg>;\r\n        const Package = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="16.5" x2="7.5" y1="9.4" y2="9.4"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27 6.96 12 12.01 20.73 6.96"/><line x1="12" x2="12" y1="22.08" y2="12"/></svg>;\r\n        const MonitorSmartphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"/><path d="M10 19v-3.96 3.15"/><path d="M7 19h5"/><rect width="6" height="10" x="16" y="12" rx="2"/></svg>;\r\n        const Receipt = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"/><path d="M8 8h8"/><path d="M8 12h8"/><path d="M10 16h4"/></svg>;\r\n        const HelpCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>;\r\n        const MessageSquare = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>;\r\n        const Fingerprint = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4"/><path d="M5 19.5A8.5 8.5 0 0 1 12 11a8.5 8.5 0 0 1 7 8.5"/><path d="M10 16.5c0 .8.7 1.5 1.5 1.5S13 17.3 13 16.5"/><path d="M16 14a1 1 0 0 1 1 1v1.5c0 .8-.7 1.5-1.5 1.5S14 17.3 14 16.5V15a1 1 0 0 1 1-1z"/><path d="M8 14a1 1 0 0 0-1 1v1.5c0 .8.7 1.5 1.5 1.5S10 17.3 10 16.5V15a1 1 0 0 0-1-1z"/><path d="M18 19.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/><path d="M6 19.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/><path d="M12 5.5c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5"/><path d="M15 8.5c0 .8-.7 1.5-1.5 1.5S12 9.3 12 8.5"/><path d="M12 11.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"/></svg>;\r\n        const TrendingDown = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>;\r\n\r\n        // --- Recharts Placeholder ---\r\n        const ResponsiveContainer = ({ children }) => <div className="w-full h-[300px] bg-gray-100 flex items-center justify-center text-gray-400 italic rounded border border-gray-200">{children}</div>;\r\n        const LineChart = ({ children, data }) => <div className="p-4">Line Chart Placeholder - Data: {data?.length} points</div>;\r\n        const BarChartComponent = ({ children, data }) => <div className="p-4">Bar Chart Placeholder - Data: {data?.length} points</div>;\r\n        const Line = (props) => null; const Bar = (props) => null; const XAxis = (props) => null; const YAxis = (props) => null; const CartesianGrid = (props) => null; const Tooltip = (props) => null; const Legend = (props) => null;\r\n\r\n        // Utility function\r\n        const getStatusBadgeVariant = (status) => { status = status?.toLowerCase() || \'\'; if (status.includes(\'complete\') || status.includes(\'paid\') || status.includes(\'in stock\') || status.includes(\'verified\') || status.includes(\'active\') || status.includes(\'claim submitted\') || status.includes(\'received\')) return \'success\'; if (status.includes(\'pending\') || status.includes(\'low stock\') || status.includes(\'expired\')) return \'warning\'; if (status.includes(\'processing\') || status.includes(\'ready\') || status.includes(\'shipped\')) return \'info\'; if (status.includes(\'reject\') || status.includes(\'cancel\') || status.includes(\'out of stock\') || status.includes(\'invalid\')) return \'destructive\'; return \'secondary\'; };\r\n        const getClaimStatusVariant = getStatusBadgeVariant;\r\n\r\n        // --- Landing Page ---\r\n        function LandingPage({ setActiveView, login, navigateTo }) { console.log("Rendering LandingPage"); return ( <div className="space-y-12"> <section className="text-center py-16 px-4 bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-lg shadow-sm"> <h1 className="text-4xl md:text-5xl font-bold text-blue-800 mb-4">Welcome to ehutano<span className="text-green-600">+</span></h1> <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">Your trusted digital partner for pharmacy services, health management, and community wellness in Zimbabwe.</p> <div className="flex flex-wrap justify-center gap-4"> <Button size="lg" onClick={() => navigateTo(\'medicineSearch\')}><Search className="mr-2 h-5 w-5" /> Find Medicines Now</Button> <Button size="lg" variant="outline" onClick={() => setActiveView(\'wellness\')}><Activity className="mr-2 h-5 w-5" /> Explore Wellness Hub</Button> </div> </section> <section className="grid md:grid-cols-3 gap-8 text-center"> <Card><CardHeader><Pill className="mx-auto h-10 w-10 text-blue-600 mb-2"/><CardTitle>Online Pharmacy</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Search, compare prices, order medicines, upload prescriptions.</p><Button variant="link" className="mt-4" onClick={() => login(\'patient\')}>Patient Login/Register</Button></CardContent></Card> <Card><CardHeader><Building className="mx-auto h-10 w-10 text-purple-600 mb-2"/><CardTitle>Pharmacy Portal</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Manage inventory, orders, market insights & analytics.</p><Button variant="link" className="mt-4" onClick={() => login(\'pharmacy\')}>Pharmacy Login/Register</Button></CardContent></Card> <Card><CardHeader><HeartPulse className="mx-auto h-10 w-10 text-green-600 mb-2"/><CardTitle>Wellness Hub</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Book events, access health resources, read wellness blog.</p><Button variant="link" className="mt-4" onClick={() => setActiveView(\'wellness\')}>Visit Wellness Hub</Button></CardContent></Card> </section> <section className="py-12 bg-gray-50 rounded-lg"> <div className="container mx-auto px-4 text-center"> <h2 className="text-3xl font-bold text-gray-800 mb-8">How ehutano+ Works</h2> <div className="grid md:grid-cols-4 gap-8"> <div className="flex flex-col items-center p-4"><div className="bg-blue-100 rounded-full p-4 mb-4"><FileSearch className="h-8 w-8 text-blue-600" /></div><h3 className="font-semibold mb-1">1. Search/Upload</h3><p className="text-sm text-gray-600">Find medicine or Rx.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-purple-100 rounded-full p-4 mb-4"><FileCheck className="h-8 w-8 text-purple-600" /></div><h3 className="font-semibold mb-1">2. Quote/Compare</h3><p className="text-sm text-gray-600">Get quote/prices.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-yellow-100 rounded-full p-4 mb-4"><CreditCard className="h-8 w-8 text-yellow-600" /></div><h3 className="font-semibold mb-1">3. Order & Pay</h3><p className="text-sm text-gray-600">Confirm & pay.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-green-100 rounded-full p-4 mb-4"><PackageCheck className="h-8 w-8 text-green-600" /></div><h3 className="font-semibold mb-1">4. Delivery/Pickup</h3><p className="text-sm text-gray-600">Receive/collect.</p></div> </div> </div> </section> <section className="py-12 bg-white border-t border-b border-gray-200"> <div className="container mx-auto px-4"> <h2 className="text-2xl font-semibold text-center text-gray-700 mb-10">Our Trusted Partners</h2> <div className="relative w-full overflow-hidden [mask-image:_linear-gradient(to_right,transparent_0,_black_128px,_black_calc(100%-128px),transparent_100%)]"> <div className="flex w-max animate-scroll hover:paused">{[...MOCK_PARTNER_LOGOS, ...MOCK_PARTNER_LOGOS].map((logo, index) => ( <div key={index} className="flex-shrink-0 mx-8 flex items-center justify-center h-16"><img src={logo.url} alt={`${logo.name} Logo`} className="max-h-full object-contain grayscale opacity-70 hover:grayscale-0 hover:opacity-100 transition-all duration-300" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/150x60/f0f0f0/c0c0c0?text=Err"; e.target.alt = `${logo.name} Err`; }}/></div> ))}</div> </div> </div> </section> <section className="text-center py-10 px-4 bg-gray-50 rounded-lg shadow-sm border"> <h2 className="text-2xl font-semibold text-gray-800 mb-4">Are you a Doctor or Wholesaler?</h2> <p className="text-gray-600 max-w-xl mx-auto mb-6">Join our network to streamline workflows and connect.</p> <div className="flex justify-center gap-4"> <Button variant="outline" onClick={() => login(\'doctor\')}><Stethoscope className="mr-2 h-4 w-4"/> Doctor Login/Register</Button> <Button variant="outline" onClick={() => login(\'wholesaler\')}><Truck className="mr-2 h-4 w-4"/> Wholesaler Login/Register</Button> </div> </section> </div> ); }\r\n\r\n        // --- Patient Portal Components ---\r\n        function PatientPortal({ setActiveView, openVerificationModal, patientData, navigateTo }) { console.log("Rendering PatientPortal"); const [currentSubView, setCurrentSubView] = useState(\'dashboard\'); const navigatePatientView = (view) => { setCurrentSubView(view); }; const renderPatientContent = () => { switch (currentSubView) { case \'search\': return <MedicineSearchListing navigatePatientView={navigatePatientView} navigateTo={navigateTo} />; case \'upload\': return <PrescriptionUpload navigatePatientView={navigatePatientView} />; case \'quotedRx\': const quoteReadyRx = patientData.prescriptions.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quoteReadyRx?.quote} navigatePatientView={navigatePatientView} />; case \'dashboard\': default: return <PatientDashboard setActiveView={setActiveView} openVerificationModal={openVerificationModal} patientData={patientData} navigatePatientView={navigatePatientView} />; } }; return ( <div className="space-y-6"> <nav className="flex space-x-1 border-b overflow-x-auto mb-6"> <Button variant={currentSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'dashboard\')} data-state={currentSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Home className="mr-1 h-4 w-4"/> Dashboard</Button> <Button variant={currentSubView === \'search\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'search\')} data-state={currentSubView === \'search\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Search className="mr-1 h-4 w-4"/> Find Medicine</Button> <Button variant={currentSubView === \'upload\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'upload\')} data-state={currentSubView === \'upload\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><UploadCloud className="mr-1 h-4 w-4"/> Upload Rx</Button> {patientData.prescriptions.some(rx => rx.isQuoteReady) && ( <Button variant={currentSubView === \'quotedRx\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'quotedRx\')} data-state={currentSubView === \'quotedRx\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent relative"> <FileCheck className="mr-1 h-4 w-4"/> View Quote <span className="absolute top-0 right-0 block h-2 w-2 rounded-full ring-1 ring-white bg-red-500"/> </Button> )} </nav> {renderPatientContent()} </div> ); }\r\n        function PatientDashboard({ setActiveView, openVerificationModal, patientData, navigatePatientView }) { const patient = patientData; const handleScan = (mockData) => { const inventoryItem = MOCK_PHARMACY_INVENTORY.find(item => item.name === mockData.medicineName); const fullVerificationData = { ...mockData, wholesaleSource: inventoryItem?.wholesaleSource || \'N/A\', manufacturer: inventoryItem?.manufacturer || \'N/A\', }; openVerificationModal(fullVerificationData); }; const handleScanValidAntibiotic = () => handleScan(MOCK_VERIFICATION_DATA_VALID); const handleScanValidNonAntibiotic = () => handleScan({ ...MOCK_VERIFICATION_DATA_VALID, isAntibiotic: false, medicineName: \'Paracetamol 500mg Tabs\' }); const handleScanInvalid = () => handleScan(MOCK_VERIFICATION_DATA_INVALID); const handleScanExpired = () => handleScan(MOCK_VERIFICATION_DATA_EXPIRED); const quoteReadyRx = patient.prescriptions.find(rx => rx.isQuoteReady); return ( <div className="space-y-6"> {quoteReadyRx && ( <Card className="bg-gradient-to-r from-green-100 to-emerald-100 border-green-300"> <CardContent className="pt-4 flex flex-col sm:flex-row items-center justify-between gap-4"> <div className="flex items-center gap-3"> <FileCheck className="h-8 w-8 text-green-700 flex-shrink-0" /> <div> <h4 className="font-semibold text-green-800">Prescription Quote Ready!</h4> <p className="text-sm text-green-700">Quote for {quoteReadyRx.id} is available.</p> </div> </div> <Button onClick={() => navigatePatientView(\'quotedRx\')} className="bg-green-600 hover:bg-green-700 mt-2 sm:mt-0 flex-shrink-0">View Quote</Button> </CardContent> </Card> )} <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'search\')}> <Search className="mr-2 h-5 w-5 text-blue-600"/> <span>Order Medicine</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'upload\')}> <UploadCloud className="mr-2 h-5 w-5 text-green-600"/> <span>Upload Rx</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={handleScanValidAntibiotic}> <QrCode className="mr-2 h-5 w-5 text-indigo-600"/> <span>Verify Meds</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => alert(\'Pholder: Appointments\')}> <Stethoscope className="mr-2 h-5 w-5 text-purple-600"/> <span>Appointments</span> </Button> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <Card> <CardHeader> <CardTitle>Recent Orders</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>ID</TableHead> <TableHead>Date</TableHead> <TableHead>Status</TableHead> <TableHead>Total</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {patient.recentOrders.map((order) => ( <TableRow key={order.id}> <TableCell className="font-medium">{order.id}</TableCell> <TableCell>{order.date}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell>{order.total}</TableCell> <TableCell><Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View order ${order.id}`)}>View</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Orders\')}>View All Orders</Button> </CardFooter> </Card> </div> <div className="space-y-6"> <Card> <CardHeader> <CardTitle>My Prescriptions</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-60 overflow-y-auto pt-4"> {patient.prescriptions.filter(rx => !rx.isQuoteReady).map((rx) => ( <div key={rx.id} className={`text-sm p-3 rounded-lg border bg-gray-50`}> {rx.medicine ? ( <> <p className="font-semibold">{rx.medicine}</p> <p className="text-xs text-gray-600">Dr. {rx.doctor} ({rx.dateIssued})</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge> ({rx.refillsLeft} refills)</p> {rx.status === \'Active\' && rx.refillsLeft > 0 && ( <Button variant="link" size="sm" className="p-0 h-auto mt-1 text-xs" onClick={() => alert(`Pholder: Refill ${rx.medicine}`)}>Request Refill</Button> )} </> ) : ( <> <p className="font-semibold">Uploaded Rx ({rx.id})</p> <p className="text-xs text-gray-600">Uploaded: {rx.dateUploaded}</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge></p> {rx.notes && <p className="text-xs italic">Notes: "{rx.notes}"</p>} </> )} </div> ))} {patient.prescriptions.filter(rx => !rx.isQuoteReady).length === 0 && <p className="text-sm text-gray-500">No active/pending Rxs.</p>} </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Rxs\')}>View All Prescriptions</Button> </CardFooter> </Card> <Card> <CardHeader> <CardTitle>Reminders</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-48 overflow-y-auto pt-4"> {patient.reminders.map((rem) => ( <div key={rem.id} className="text-sm p-3 bg-blue-50 rounded-lg border border-blue-200 flex justify-between items-center"> <div><p className="font-semibold">{rem.type === \'Refill\' ? `Refill: ${rem.medicine}` : rem.details}</p><p className="text-xs text-gray-600">Due: {rem.dueDate}</p></div> <Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Dismiss ${rem.id}`)}>X</Button> </div> ))} {patient.reminders.length === 0 && <p className="text-sm text-gray-500">No reminders.</p>} </CardContent> </Card> </div> </div> <Card> <CardHeader> <CardTitle>Need Help?</CardTitle> </CardHeader> <CardContent className="pt-4 flex flex-wrap gap-4 justify-center"> <Button variant="outline" onClick={() => alert(\'Pholder: AI Chat\')}> <HelpCircle className="mr-2 h-4 w-4"/> Ask AI </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Live Chat\')}> <MessageSquare className="mr-2 h-4 w-4"/> Chat Pharmacist </Button> </CardContent> </Card> <Card className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200"> <CardHeader> <CardTitle className="text-green-800">Wellness Hub</CardTitle> </CardHeader> <CardContent className="pt-4 flex items-center gap-4"> <img src="https://placehold.co/100x80/a7f3d0/14532d?text=Wellness" alt="Wellness" className="rounded-lg h-20"/> <div className="flex-grow"><p className="mb-3 text-gray-700 text-sm">Book events, read articles, use tools.</p><Button onClick={() => setActiveView(\'wellness\')} className="bg-green-600 hover:bg-green-700" size="sm"> <Activity className="mr-2 h-4 w-4"/> Go to Wellness </Button></div> </CardContent> </Card> <Card className="mt-6"> <CardHeader><CardTitle>QR Scan Simulation</CardTitle></CardHeader> <CardContent className="pt-4 flex flex-wrap gap-2"> <Button variant="secondary" size="sm" onClick={handleScanValidAntibiotic}>Scan Valid ABX</Button> <Button variant="secondary" size="sm" onClick={handleScanValidNonAntibiotic}>Scan Valid Non-ABX</Button> <Button variant="destructive" size="sm" onClick={handleScanInvalid}>Scan Invalid</Button> <Button variant="warning" size="sm" onClick={handleScanExpired}>Scan Expired</Button> </CardContent> </Card> </div> ); }\r\n        function MedicineSearchListing({ navigatePatientView, navigateTo }) { const [searchTerm, setSearchTerm] = useState(\'\'); const [searchResults, setSearchResults] = useState(MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES); const handleSearch = (e) => { const term = e.target.value.toLowerCase(); setSearchTerm(e.target.value); setSearchResults( MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES.filter(med => med.name.toLowerCase().includes(term) || med.category.toLowerCase().includes(term) ) ); }; const handleAddToCart = (medId, pharmacyName, price) => { alert(`Pholder: Add ${medId} from ${pharmacyName} ($${price.toFixed(2)}) to cart.`); }; const handleViewDetails = (medId) => { alert(`Pholder: View details ${medId}.`); }; return ( <div className="space-y-6"> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /> <Input placeholder="Search medicine or category..." className="pl-12 text-base h-12" value={searchTerm} onChange={handleSearch} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {searchResults.length > 0 ? ( searchResults.map(med => ( <Card key={med.id} className="overflow-hidden flex flex-col"> <CardHeader className="flex flex-row items-start gap-4 p-4"> <img src={med.imageUrl} alt={med.name} className="w-20 h-20 object-contain rounded-md border flex-shrink-0" /> <div className="flex-grow"> <h4 className="font-semibold text-base mb-1">{med.name}</h4> <p className="text-sm text-gray-500 mb-2">{med.category}</p> {med.requiresPrescription && <Badge variant="warning">Rx</Badge>} {med.isAntibiotic && <Badge variant="destructive" className="ml-1">ABX</Badge>} </div> </CardHeader> <CardContent className="pt-0 pb-4 flex-grow flex flex-col"> <h5 className="text-sm font-medium mb-2 text-gray-700">Compare Prices:</h5> {med.pharmacies.length > 0 ? ( <div className="space-y-3"> {med.pharmacies.slice(0, 3).map(pharm => ( <div key={pharm.name} className="flex justify-between items-center p-2 bg-gray-50 rounded-md border"> <div> <span className="text-sm font-medium">{pharm.name}</span> <Badge variant={getStatusBadgeVariant(pharm.stockStatus)} className="ml-2">{pharm.stockStatus}</Badge> </div> <div className="text-right flex-shrink-0"> <p className="text-base font-semibold text-blue-700">${pharm.price.toFixed(2)}</p> <Button size="sm" variant="link" className="text-xs h-auto p-0 mt-1" onClick={() => handleAddToCart(med.id, pharm.name, pharm.price)} disabled={med.requiresPrescription} > {med.requiresPrescription ? \'Requires Rx\' : \'Add to Cart\'} </Button> </div> </div> ))} {med.pharmacies.length > 3 && ( <Button variant="link" size="sm" className="w-full mt-2" onClick={() => handleViewDetails(med.id)}> View {med.pharmacies.length - 3} more... </Button> )} </div> ) : ( <p className="text-sm text-gray-500 italic">Unavailable.</p> )} </CardContent> <CardFooter className="border-t pt-3"> <Button variant="outline" onClick={() => handleViewDetails(med.id)} className="w-full" size="sm"> View Details </Button> </CardFooter> </Card> )) ) : ( <div className="col-span-full text-center py-10 text-gray-500"> <Pill className="mx-auto h-12 w-12 text-gray-400 mb-4"/> <p>No medicines found for "{searchTerm}".</p> <p className="text-sm mt-2">Try again or <button className="text-blue-600 underline" onClick={() => navigateTo ? navigateTo(\'patientPortal\') : (navigatePatientView ? navigatePatientView(\'upload\') : alert(\'Cannot navigate\')) }>upload Rx</button>.</p> </div> )} </div> </div> ); }\r\n        function PrescriptionUpload({ navigatePatientView }) { const [selectedFile, setSelectedFile] = useState(null); const [notes, setNotes] = useState(\'\'); const [isUploading, setIsUploading] = useState(false); const [uploadStatus, setUploadStatus] = useState(\'\'); const handleFileChange = (event) => { if (event.target.files && event.target.files[0]) { setSelectedFile(event.target.files[0]); setUploadStatus(\'\'); } }; const handleSubmit = async (event) => { event.preventDefault(); if (!selectedFile) { alert("Select file."); return; } setIsUploading(true); setUploadStatus(\'\'); await new Promise(resolve => setTimeout(resolve, 1500)); const isSuccess = Math.random() > 0.2; if (isSuccess) { setUploadStatus(\'success\'); setSelectedFile(null); setNotes(\'\'); } else { setUploadStatus(\'error\'); } setIsUploading(false); }; return ( <div className="space-y-6 max-w-2xl mx-auto"> <Card> <CardHeader> <CardTitle>Upload Prescription</CardTitle> <CardDescription>Submit image/PDF for review/quote.</CardDescription> </CardHeader> <form onSubmit={handleSubmit}> <CardContent className="pt-6 space-y-4"> <div> <Label htmlFor="rx-file">File (Image/PDF)</Label> <Input id="rx-file" type="file" accept="image/*,.pdf" onChange={handleFileChange} required className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/> {selectedFile && (<p className="text-sm mt-2">Selected: {selectedFile.name}</p>)} </div> <div> <Label htmlFor="notes">Notes (Optional)</Label> <Textarea id="notes" placeholder="e.g., Brand preference, urgency..." value={notes} onChange={(e) => setNotes(e.target.value)} className="mt-1"/> </div> </CardContent> <CardFooter className="flex justify-end border-t pt-4"> <Button type="submit" disabled={isUploading || !selectedFile}> {isUploading ? \'Uploading...\' : <><UploadCloud className="mr-2 h-4 w-4" /> Submit</>} </Button> </CardFooter> </form> </Card> {uploadStatus === \'success\' && ( <div className="p-4 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm mt-4"> Upload successful! Check <button className="font-bold underline" onClick={() => navigatePatientView(\'dashboard\')}>Dashboard</button> for status/quote. </div> )} {uploadStatus === \'error\' && ( <div className="p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm mt-4"> Upload failed. Try again or contact support. </div> )} </div> ); }\r\n        function QuotedPrescriptionView({ quote, navigatePatientView }) { if (!quote) { return ( <div className="space-y-6"> <Card> <CardHeader><CardTitle>Prescription Quote</CardTitle></CardHeader> <CardContent className="pt-6 text-center text-gray-500"> No quote available. Check <button className="text-blue-600 underline" onClick={() => navigatePatientView(\'dashboard\')}>dashboard</button>. </CardContent> </Card> </div> ); } const handleAddToCart = () => { alert(`Pholder: Add quote ($${quote.total.toFixed(2)}) to cart.`); }; const handlePayment = (method) => { if (method === \'medicalAid\') { const useBio = window.confirm("Simulate MA Payment:\\nUse Biometrics?"); if (useBio) { alert("Place finger... (Sim)"); setTimeout(() => { const ok = Math.random() > 0.1; alert(ok ? "Biometric OK! Processing..." : "Biometric Failed."); if(ok){ /* TODO: Update order */ } }, 1500); } else { const pin = prompt("Enter MA PIN (Sim):"); if (pin) { alert("PIN OK. Processing..."); /* TODO: Update order */ } else { alert("PIN cancelled."); } } } else { alert(`Pholder: Proceed to ${method} ($${quote.total.toFixed(2)})...`); } }; return ( <div className="space-y-6"> <Card> <CardHeader> <CardTitle>Your Prescription Quote</CardTitle> <CardDescription>Review items & checkout.</CardDescription> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="text-center">Qty</TableHead> <TableHead className="text-right">Price</TableHead> <TableHead className="text-right">Subtotal</TableHead> </TableRow> </TableHeader> <TableBody> {quote.items.map((item, index) => ( <TableRow key={index}> <TableCell className="font-medium">{item.name}</TableCell> <TableCell className="text-center">{item.qty}</TableCell> <TableCell className="text-right">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right">${(item.qty * item.price).toFixed(2)}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3} className="text-right font-semibold text-base">Total:</TableCell> <TableCell className="text-right font-bold text-lg">${quote.total.toFixed(2)}</TableCell> </TableRow> </TableFooter> </Table> </CardContent> <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4 border-t pt-6"> <Button variant="outline" onClick={handleAddToCart}> <ShoppingCart className="mr-2 h-4 w-4"/> Add to Cart </Button> <div className="flex flex-wrap gap-2"> <Button onClick={() => handlePayment(\'medicalAid\')} className="bg-green-600 hover:bg-green-700"> <Fingerprint className="mr-2 h-4 w-4" /> Pay with MA </Button> <Button onClick={() => handlePayment(\'EcoCash\')}> Pay EcoCash </Button> <Button onClick={() => handlePayment(\'Other\')} variant="secondary"> Other </Button> </div> </CardFooter> </Card> </div> ); }\r\n        function MedicineVerificationModal({ isOpen, onClose, verificationData }) { if (!verificationData) return null; const { status, message, medicineName, batchNumber, expiryDate, pharmacySource, wholesaleSource, manufacturer, isAntibiotic } = verificationData; let statusIcon, statusColorClass, title, bgColorClass = "bg-white"; switch (status) { case \'verified\': statusIcon = <CheckCircle className="h-12 w-12 text-green-500" />; statusColorClass = "text-green-700"; title = "Verified"; bgColorClass = "bg-green-50"; break; case \'invalid\': statusIcon = <XCircle className="h-12 w-12 text-red-500" />; statusColorClass = "text-red-700"; title = "FAILED"; bgColorClass = "bg-red-50"; break; case \'expired\': statusIcon = <AlertTriangle className="h-12 w-12 text-yellow-500" />; statusColorClass = "text-yellow-700"; title = "EXPIRED"; bgColorClass = "bg-yellow-50"; break; default: statusIcon = <Info className="h-12 w-12 text-gray-500" />; statusColorClass = "text-gray-700"; title = "Info"; } return ( <Modal isOpen={isOpen} onClose={onClose} title={title} maxWidth="md"> <div className={`flex flex-col items-center text-center space-y-4 p-6 rounded-lg ${bgColorClass}`}> {statusIcon} <p className={`font-semibold text-lg ${statusColorClass}`}>{message}</p> {(status === \'verified\' || status === \'expired\') && ( <Card className="w-full mt-4 text-left bg-white shadow-md"> <CardHeader><CardTitle className="text-base">Details</CardTitle></CardHeader> <CardContent className="space-y-1 text-sm pt-2"> <div className="grid grid-cols-3 gap-x-2 gap-y-1"> <span className="font-medium text-gray-500">Med:</span> <span className="col-span-2 font-medium">{medicineName || \'N/A\'}</span> <span className="font-medium text-gray-500">Batch:</span> <span className="col-span-2 font-mono">{batchNumber || \'N/A\'}</span> <span className="font-medium text-gray-500">Expiry:</span> <span className={`col-span-2 ${status === \'expired\' ? \'text-red-600 font-bold\' : \'\'}`}>{expiryDate || \'N/A\'}</span> <span className="font-medium text-gray-500">Manuf:</span> <span className="col-span-2">{manufacturer || \'N/A\'}</span> <span className="font-medium text-gray-500">Whsle:</span> <span className="col-span-2">{wholesaleSource || \'N/A\'}</span> <span className="font-medium text-gray-500">Pharm:</span> <span className="col-span-2">{pharmacySource || \'N/A\'}</span> </div> </CardContent> </Card> )} {status === \'verified\' && isAntibiotic && ( <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 text-yellow-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>ABX Alert:</strong> Use only as prescribed.</span> </div> )} {status === \'invalid\' && ( <div className="mt-4 p-3 bg-red-100 border border-red-300 text-red-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>Action:</strong> Do not use. Report!</span> </div> )} <Button onClick={onClose} className="mt-6" variant={status === \'invalid\' ? \'destructive\' : \'default\'}>Close</Button> </div> </Modal> ); }\r\n\r\n        // --- Pharmacy Portal & Sub-Components ---\r\n        function PharmacyPortal({ setActiveView, openVerificationModal, patientData }) {\r\n            console.log("Rendering PharmacyPortal Component");\r\n            const [pharmacySubView, setPharmacySubView] = useState(\'orders\');\r\n            const [isDispensingModalOpen, setDispensingModalOpen] = useState(false);\r\n            const [isOrderDetailsModalOpen, setOrderDetailsModalOpen] = useState(false);\r\n            const [selectedOrderForModal, setSelectedOrderForModal] = useState(null);\r\n            const [orders, setOrders] = useState(() => {\r\n                 console.log("Initializing PharmacyPortal \'orders\' state with MOCK_PHARMACY_ORDERS.");\r\n                 return JSON.parse(JSON.stringify(MOCK_PHARMACY_ORDERS));\r\n            });\r\n\r\n            const updateOrderStatus = (orderId, newStatus) => {\r\n                console.log(`(updateOrderStatus) called for ID: ${orderId}, New Status: ${newStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current status: ${order.status}. Updating to ${newStatus}.`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(order.medicalAidStatus)); return { ...order, status: newStatus, requiresAction }; } return order; })); };\r\n\r\n            const updateOrderAndMAStatus = (orderId, newOrderStatus, newMAStatus) => {\r\n                console.log(`(updateOrderAndMAStatus) called for ID: ${orderId}. New Order Status: ${newOrderStatus}, New MA Status: ${newMAStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current: Status=${order.status}, MA=${order.medicalAidStatus}.`); const updatedStatus = newOrderStatus ?? order.status; const updatedMAStatus = newMAStatus ?? order.medicalAidStatus; const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(updatedStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(updatedMAStatus)); console.log(` -> Updated state: Status=${updatedStatus}, MA=${updatedMAStatus}, RequiresAction=${requiresAction}`); return { ...order, status: updatedStatus, medicalAidStatus: updatedMAStatus, requiresAction }; } return order; })); };\r\n\r\n            const openDispensingModal = () => setDispensingModalOpen(true);\r\n            const closeDispensingModal = () => setDispensingModalOpen(false);\r\n            const openOrderDetailsModalHandler = (order) => { console.log("Opening Order Details Modal for order:", order); setSelectedOrderForModal(order); setOrderDetailsModalOpen(true); };\r\n            const closeOrderDetailsModalHandler = () => { console.log("Closing Order Details Modal"); setOrderDetailsModalOpen(false); setSelectedOrderForModal(null); };\r\n\r\n            const renderSubView = () => {\r\n                 console.log("Rendering Pharmacy SubView:", pharmacySubView);\r\n                 // Wrap sub-view rendering in try-catch for better error isolation\r\n                 try {\r\n                     switch(pharmacySubView) {\r\n                        case \'inventory\':\r\n                            console.log(" -> Attempting to render PharmacyInventory...");\r\n                            return <PharmacyInventory />; // The component we are debugging\r\n                        case \'orders\': return <OrderManagementView orders={orders} updateOrderStatus={updateOrderStatus} openOrderDetailsModal={openOrderDetailsModalHandler} />;\r\n                        case \'marketWatch\': return <MarketWatchView />;\r\n                        case \'analytics\': return <PharmacyAnalytics />;\r\n                        case \'claims\': return <MedicalAidClaimsView orders={orders} />;\r\n                        default: console.warn(`Unknown pharmacySubView: ${pharmacySubView}.`); return <div className="text-center p-8 text-gray-500">Select a view from the tabs above.</div>;\r\n                     }\r\n                 } catch (error) {\r\n                     console.error(`Error rendering pharmacy subview "${pharmacySubView}":`, error);\r\n                     // Display error prominently if sub-view fails\r\n                     return (\r\n                        <div className="text-center p-8 text-red-600 bg-red-50 border border-red-300 rounded-md">\r\n                             <h3 className="text-lg font-semibold mb-2">Error Loading \'{pharmacySubView}\' View</h3>\r\n                             <p>There was a problem rendering this section.</p>\r\n                             <p className="text-sm mt-2">Please check the browser console (F12) for technical details.</p>\r\n                             <pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || error.message}</pre>\r\n                         </div>\r\n                    );\r\n                 }\r\n            };\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <nav className="flex space-x-1 border-b overflow-x-auto">\r\n                        <Button variant={pharmacySubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'orders\')} data-state={pharmacySubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button>\r\n                        <Button variant=\'ghost\' onClick={openDispensingModal} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Pill className="mr-2 h-4 w-4" /> Dispense</Button>\r\n                        <Button variant={pharmacySubView === \'inventory\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'inventory\')} data-state={pharmacySubView === \'inventory\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Package className="mr-2 h-4 w-4" /> Inventory</Button>\r\n                        <Button variant={pharmacySubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'marketWatch\')} data-state={pharmacySubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button>\r\n                        <Button variant={pharmacySubView === \'analytics\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'analytics\')} data-state={pharmacySubView === \'analytics\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BarChart className="mr-2 h-4 w-4" /> Analytics</Button>\r\n                        <Button variant={pharmacySubView === \'claims\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'claims\')} data-state={pharmacySubView === \'claims\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CreditCard className="mr-2 h-4 w-4" /> Claims</Button>\r\n                        <Button variant=\'ghost\' onClick={() => alert(\'Pholder: Walk-in Quote\')} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4" /> Quote Walk-in</Button>\r\n                    </nav>\r\n                    <div className="pt-6">\r\n                       {renderSubView()}\r\n                    </div>\r\n                    <DispensingModal isOpen={isDispensingModalOpen} onClose={closeDispensingModal} />\r\n                    <OrderDetailsModal isOpen={isOrderDetailsModalOpen} onClose={closeOrderDetailsModalHandler} order={selectedOrderForModal} updateOrderAndMAStatusCallback={updateOrderAndMAStatus} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function PharmacyInventory() {\r\n            console.log("PharmacyInventory: Component rendering started.");\r\n            const [inventory, setInventory] = useState(MOCK_PHARMACY_INVENTORY);\r\n            const [searchTerm, setSearchTerm] = useState(\'\');\r\n            const [filterCategory, setFilterCategory] = useState(\'all\');\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            console.log("PharmacyInventory: State initialized.");\r\n\r\n            const filteredInventory = useMemo(() => {\r\n                console.log("PharmacyInventory: Calculating filteredInventory memo...");\r\n                try {\r\n                    return inventory.filter(item => {\r\n                        // Added robust checks for potential null/undefined values\r\n                        const term = searchTerm.toLowerCase();\r\n                        const nameMatch = item && item.name && typeof item.name.toLowerCase === \'function\' ? item.name.toLowerCase().includes(term) : false;\r\n                        const idMatch = item && item.id && typeof item.id.toLowerCase === \'function\' ? item.id.toLowerCase().includes(term) : false;\r\n                        const categoryMatch = item && item.category && typeof item.category.toLowerCase === \'function\' ? item.category.toLowerCase().includes(term) : false;\r\n                        const matchesSearch = nameMatch || idMatch || categoryMatch;\r\n\r\n                        const matchesCategory = filterCategory === \'all\' || (item && item.category === filterCategory);\r\n                        const matchesStatus = filterStatus === \'all\' || (item && item.status === filterStatus);\r\n                        return matchesSearch && matchesCategory && matchesStatus;\r\n                    });\r\n                } catch(error) {\r\n                    console.error("PharmacyInventory: Error during filtering:", error);\r\n                    return []; // Return empty array on error\r\n                }\r\n            }, [inventory, searchTerm, filterCategory, filterStatus]);\r\n\r\n            const categories = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating categories memo...");\r\n                 try {\r\n                    const uniqueCategories = new Set(inventory.map(item => item?.category).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueCategories)].sort();\r\n                 } catch (error) {\r\n                    console.error("PharmacyInventory: Error calculating categories:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            const statuses = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating statuses memo...");\r\n                 try {\r\n                    const uniqueStatuses = new Set(inventory.map(item => item?.status).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueStatuses)];\r\n                 } catch(error) {\r\n                    console.error("PharmacyInventory: Error calculating statuses:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            console.log("PharmacyInventory: Memos calculated. Filtered count:", filteredInventory.length);\r\n\r\n            const handleAddItem = () => alert(\'Pholder: Add Item Modal\');\r\n            const handleEditItem = (itemId) => alert(`Pholder: Edit Modal ${itemId}`);\r\n            const handleOrderFromWholesaler = () => alert(\'Pholder: Wholesaler Order UI\');\r\n\r\n            console.log("PharmacyInventory: Preparing to return JSX.");\r\n\r\n            // Wrap the entire JSX return in a try-catch as a last resort for rendering errors\r\n            try {\r\n                return (\r\n                    <div className="space-y-6">\r\n                        {/* Header */}\r\n                        <header className="flex flex-wrap justify-between items-center pb-4 gap-4 border-b">\r\n                            <div> <h2 className="text-xl font-semibold">Inventory Management</h2> <p className="text-gray-500 text-sm">Manage stock & details.</p> </div>\r\n                            <div className="flex items-center space-x-2 flex-wrap gap-2"> <Button variant="outline" size="sm" onClick={handleOrderFromWholesaler}><Truck className="mr-2 h-4 w-4" /> Order Stock</Button> <Button size="sm" onClick={handleAddItem}><PlusCircle className="mr-2 h-4 w-4" /> Add Item</Button> </div>\r\n                        </header>\r\n                        {/* Filters */}\r\n                        <Card>\r\n                            <CardContent className="pt-6 flex flex-wrap items-center gap-4">\r\n                                <div className="relative flex-grow min-w-[200px]"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" /><Input placeholder="Search Name, ID, Category..." className="pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="cat-filter" className="sr-only">Category</Label><Select id="cat-filter" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full">{categories.map(cat => (<SelectItem key={cat} value={cat}>{cat === \'all\' ? \'All Categories\' : cat}</SelectItem>))}</Select></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="stat-filter" className="sr-only">Status</Label><Select id="stat-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* Table */}\r\n                        <Card>\r\n                            <CardHeader><CardTitle>Medicine Stock List</CardTitle></CardHeader>\r\n                            <CardContent className="pt-4">\r\n                                <Table>\r\n                                    <TableHeader><TableRow><TableHead>ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Stock</TableHead><TableHead className="text-right">Price</TableHead><TableHead>Status</TableHead><TableHead>Supplier</TableHead><TableHead>Updated</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                    <TableBody>\r\n                                        {filteredInventory.length > 0 ? (\r\n                                            filteredInventory.map((item) => (\r\n                                                item && item.id ? (\r\n                                                    <TableRow key={item.id} className={item.stock === 0 ? \'opacity-60 bg-gray-50\' : item.stock < 10 ? \'bg-yellow-50/70\' : \'\'}>\r\n                                                        <TableCell className="font-mono text-xs">{item.id}</TableCell>\r\n                                                        <TableCell className="font-medium">{item.name || \'N/A\'}</TableCell>\r\n                                                        <TableCell>{item.category || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right font-semibold">{typeof item.stock === \'number\' ? item.stock : \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right">{(typeof item.price === \'number\' ? item.price : 0).toFixed(2)}</TableCell>\r\n                                                        <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status || \'N/A\'}</Badge></TableCell>\r\n                                                        <TableCell>{item.supplier || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-xs">{item.lastUpdated || \'N/A\'}</TableCell>\r\n                                                        <TableCell><Button variant="ghost" size="sm" onClick={() => handleEditItem(item.id)}>Edit</Button></TableCell>\r\n                                                    </TableRow>\r\n                                                ) : null\r\n                                            ))\r\n                                        ) : (\r\n                                            <TableRow><TableCell colSpan={9} className="h-24 text-center text-gray-500">No inventory items match the current filters.</TableCell></TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </CardContent>\r\n                            <CardFooter className="pt-4 justify-between items-center border-t">\r\n                                <p className="text-sm text-gray-500">Showing {filteredInventory.length} of {inventory.length} items.</p>\r\n                                <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                );\r\n            } catch (error) {\r\n                console.error("PharmacyInventory: Error during JSX rendering:", error);\r\n                return <div className="p-4 text-red-600 bg-red-50 border border-red-300 rounded">Error rendering inventory table. Check console. <pre>{error.stack}</pre></div>;\r\n            }\r\n        }\r\n\r\n        function OrderManagementView({ orders, updateOrderStatus, openOrderDetailsModal }) {\r\n            console.log("Rendering OrderManagementView. Received orders prop:", orders);\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            const validOrders = Array.isArray(orders) ? orders : [];\r\n            if (!Array.isArray(orders)) { console.error("OrderManagementView received non-array \'orders\' prop:", orders); }\r\n            const statuses = useMemo(() => { if (!validOrders.length) return [\'all\']; const validStatuses = validOrders.map(order => order?.status).filter(Boolean); return [\'all\', ...new Set(validStatuses)].sort(); }, [validOrders]);\r\n            const filteredOrders = useMemo(() => { if (!validOrders.length) return []; if (filterStatus === \'all\') return validOrders; return validOrders.filter(order => order?.status === filterStatus); }, [validOrders, filterStatus]);\r\n            console.log(`OrderManagementView: Filter Status=\'${filterStatus}\', Filtered Orders Count=${filteredOrders.length}`);\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <header className="pb-4 flex flex-wrap justify-between items-center gap-4 border-b">\r\n                        <div><h2 className="text-xl font-semibold">Order Management</h2><p className="text-gray-500 text-sm">View and manage incoming patient orders.</p></div>\r\n                        <div className="flex items-center gap-2"><Label htmlFor="order-status-filter" className="text-sm">Filter by Status:</Label><Select id="order-status-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-40">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                    </header>\r\n                    <Card>\r\n                        <CardHeader><CardTitle>Incoming & Recent Orders</CardTitle></CardHeader>\r\n                        <CardContent className="pt-4">\r\n                            <Table>\r\n                                <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Patient</TableHead><TableHead>Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Total</TableHead><TableHead>Medical Aid</TableHead><TableHead>Payment</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                <TableBody>\r\n                                    {filteredOrders.length > 0 ? (\r\n                                        filteredOrders.map((order) => ( order && order.id ? ( <TableRow key={order.id} className={order.requiresAction ? \'bg-blue-50/70 hover:bg-blue-100/50\' : \'\'}>\r\n                                                    <TableCell className="font-mono text-xs">{order.id}</TableCell>\r\n                                                    <TableCell>{order.patientName || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.date || \'N/A\'}</TableCell>\r\n                                                    <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status || \'N/A\'}</Badge></TableCell>\r\n                                                    <TableCell className="text-right font-medium">${(typeof order.total === \'number\' ? order.total : 0).toFixed(2)}</TableCell>\r\n                                                    <TableCell>{order.medicalAidProvider ? (<Badge variant={getClaimStatusVariant(order.medicalAidStatus)}>{order.medicalAidStatus || \'N/A\'}</Badge>) : (<Badge variant="outline">N/A</Badge>)}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.paymentMethod || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="space-x-1 whitespace-nowrap">\r\n                                                        <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => openOrderDetailsModal(order)}>Details</Button>\r\n                                                        {order.status === \'Pending Approval\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Approve</Button>}\r\n                                                        {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Ready for Pickup\')}>Ready</Button>}\r\n                                                        {order.status === \'Ready for Pickup\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Completed\')}>Complete</Button>}\r\n                                                        {order.status === \'Pending Payment\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Mark Paid</Button> }\r\n                                                    </TableCell>\r\n                                                </TableRow> ) : null\r\n                                        ))\r\n                                    ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No orders match the selected filter.</TableCell></TableRow> )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                        <CardFooter className="pt-4 border-t justify-between items-center">\r\n                             <p className="text-sm text-gray-500">Showing {filteredOrders.length} of {validOrders.length} orders.</p>\r\n                             <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        function OrderDetailsModal({ isOpen, onClose, order, updateOrderAndMAStatusCallback }) {\r\n            const [internalOrderData, setInternalOrderData] = useState(null);\r\n            useEffect(() => { console.log("OrderDetailsModal Effect: Received order prop:", order); if (order && (!internalOrderData || internalOrderData.id !== order.id)) { console.log(` -> Updating internal state for order ID: ${order.id}`); setInternalOrderData({ ...order }); } else if (!order && internalOrderData) { console.log(" -> Clearing internal state as order prop is null/undefined."); setInternalOrderData(null); } }, [order]);\r\n            if (!isOpen || !internalOrderData) { return null; }\r\n            const { id, patientName, date, status, total, items, medicalAidStatus, amountCovered, medicalAidProvider, paymentMethod } = internalOrderData;\r\n            console.log(`OrderDetailsModal Rendering content for Order ID: ${id}`);\r\n            const showClaimButton = medicalAidProvider && (medicalAidStatus === \'Received\' || medicalAidStatus === \'Pending Patient Auth\');\r\n            const showMarkPaidButton = status === \'Pending Payment\';\r\n            const showApproveButton = status === \'Pending Approval\';\r\n            const showReadyButton = status === \'Processing\';\r\n            const showCompleteButton = status === \'Ready for Pickup\' || status === \'Out for Delivery\';\r\n            const handleClaimSubmit = () => { const newMAStatus = \'Claim Submitted\'; console.log(`Modal action: Submitting claim for ${id}, setting MA status to ${newMAStatus}`); setInternalOrderData(prev => prev ? { ...prev, medicalAidStatus: newMAStatus, requiresAction: false } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, null, newMAStatus); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Claim Submitted for ${id}`); };\r\n            const handleStatusUpdate = (newStatus) => { console.log(`Modal action: Updating status for ${id} to ${newStatus}`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(medicalAidStatus)); setInternalOrderData(prev => prev ? { ...prev, status: newStatus, requiresAction } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, newStatus, null); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Order ${id} updated to ${newStatus}.`); };\r\n            const orderItems = Array.isArray(items) ? items : [];\r\n\r\n            return (\r\n                <Modal isOpen={isOpen} onClose={onClose} title={`Order Details: ${id}`} maxWidth="xl">\r\n                    <div className="space-y-4">\r\n                        <Card><CardHeader><CardTitle className="text-base">Order Information</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Patient:</span> <span className="font-medium">{patientName || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Date:</span> <span>{date || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Status:</span> <span><Badge variant={getStatusBadgeVariant(status)}>{status || \'N/A\'}</Badge></span></div><div><span className="text-gray-500 mr-2">Total:</span> <span className="font-semibold">${(typeof total === \'number\' ? total : 0).toFixed(2)}</span></div><div><span className="text-gray-500 mr-2">Payment Method:</span> <span>{paymentMethod || \'N/A\'}</span></div></CardContent></Card>\r\n                        <Card><CardHeader><CardTitle className="text-base">Items in Order</CardTitle></CardHeader><CardContent className="pt-4">{orderItems.length > 0 ? (<ul className="space-y-1 text-sm">{orderItems.map((item, index) => ( <li key={item.id || index} className="flex justify-between border-b py-1 last:border-0"><span>{item.qty || 0} x {item.name || \'Unknown Item\'}</span></li> ))}</ul>) : (<p className="text-sm text-gray-500 italic">No items listed for this order.</p>)}</CardContent></Card>\r\n                        {medicalAidProvider && ( <Card><CardHeader><CardTitle className="text-base">Medical Aid Details</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Provider:</span> <span>{medicalAidProvider}</span></div><div><span className="text-gray-500 mr-2">Claim Status:</span> <Badge variant={getClaimStatusVariant(medicalAidStatus)}>{medicalAidStatus || \'N/A\'}</Badge></div><div><span className="text-gray-500 mr-2">Amount Covered:</span> <span className="font-semibold">${(typeof amountCovered === \'number\' ? amountCovered : 0).toFixed(2)}</span></div>{showClaimButton && ( <div className="md:col-span-2 mt-2"><Button onClick={handleClaimSubmit} size="sm" variant="success"><FileCheck className="mr-2 h-4 w-4" /> Submit Claim Now</Button></div> )}</CardContent></Card> )}\r\n                        <div className="flex flex-wrap justify-between items-center gap-3 border-t pt-4 mt-4">\r\n                            <div className="flex flex-wrap gap-2">{showApproveButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm">Approve Order</Button>}{showReadyButton && <Button onClick={() => handleStatusUpdate(\'Ready for Pickup\')} size="sm">Mark Ready for Pickup</Button>}{showCompleteButton && <Button onClick={() => handleStatusUpdate(\'Completed\')} size="sm" variant="success">Mark as Completed</Button>}{showMarkPaidButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm" variant="success">Mark as Paid</Button> }</div>\r\n                            <Button variant="outline" onClick={onClose}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n        function DispensingModal({ isOpen, onClose }) { const [patientSearchTerm, setPatientSearchTerm] = useState(\'\'); const [selectedPatient, setSelectedPatient] = useState(null); const [medicineSearchTerm, setMedicineSearchTerm] = useState(\'\'); const [dispensingCart, setDispensingCart] = useState([]); const [inventory] = useState(MOCK_PHARMACY_INVENTORY); const handlePatientSearch = () => { const term = patientSearchTerm.toLowerCase(); const foundPatient = MOCK_PHARMACY_ORDERS.find(o => o.patientName.toLowerCase().includes(term) || o.patientId?.toLowerCase() === term); if (foundPatient) { setSelectedPatient({ id: foundPatient.patientId, name: foundPatient.patientName }); setPatientSearchTerm(\'\'); } else { setSelectedPatient(null); alert(\'Patient not found.\'); } }; const filteredInventory = useMemo(() => { if (!medicineSearchTerm) return []; return inventory.filter(item => item.name.toLowerCase().includes(medicineSearchTerm.toLowerCase()) && item.stock > 0); }, [medicineSearchTerm, inventory]); const addToCart = (medItem) => { const existingItemIndex = dispensingCart.findIndex(item => item.id === medItem.id); if (existingItemIndex > -1) { const currentQty = dispensingCart[existingItemIndex].qty; if (currentQty < medItem.stock) { setDispensingCart(prevCart => prevCart.map((item, index) => index === existingItemIndex ? { ...item, qty: item.qty + 1 } : item)); } else { alert(`Max stock (${medItem.stock}) reached for ${medItem.name}`); } } else { if (medItem.stock > 0) { setDispensingCart(prevCart => [...prevCart, { id: medItem.id, name: medItem.name, qty: 1, price: medItem.price, stock: medItem.stock }]); } else { alert(`${medItem.name} is out of stock.`); } } setMedicineSearchTerm(\'\'); }; const updateQty = (itemId, newQtyStr) => { const newQty = parseInt(newQtyStr, 10); if (isNaN(newQty)) return; const itemInCart = dispensingCart.find(item => item.id === itemId); if (!itemInCart) return; if (newQty <= 0) { setDispensingCart(prevCart => prevCart.filter(item => item.id !== itemId)); } else if (newQty <= itemInCart.stock) { setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: newQty } : item)); } else { alert(`Quantity (${newQty}) exceeds stock (${itemInCart.stock}). Maximum quantity set.`); setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: itemInCart.stock } : item)); } }; const calculateTotal = () => dispensingCart.reduce((total, item) => total + (item.qty * item.price), 0); const handleDispenseAndSendToPOS = () => { if (!selectedPatient && !window.confirm("No patient selected. Proceed as Walk-in Sale?")) return; if (dispensingCart.length === 0) { alert("Cart is empty."); return; } const patientInfo = selectedPatient || { id: \'WALK-IN\', name: \'Walk-in Customer\' }; const saleData = { patient: patientInfo, items: dispensingCart, total: calculateTotal(), timestamp: new Date().toISOString(), type: \'Dispensed\' }; console.log("-> Sending to POS:", saleData); alert(`Dispensed for ${patientInfo.name}. Total: $${saleData.total.toFixed(2)}. (Simulated POS send)`); handleReset(); onClose(); }; const handleReset = () => { setPatientSearchTerm(\'\'); setSelectedPatient(null); setMedicineSearchTerm(\'\'); setDispensingCart([]); }; return ( <Modal isOpen={isOpen} onClose={onClose} title="Dispense / Walk-in Sale" maxWidth="4xl"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[70vh]"> <div className="lg:col-span-1 space-y-4 flex flex-col"> <Card className="flex-shrink-0"> <CardHeader><CardTitle className="text-base">1. Select Patient</CardTitle></CardHeader> <CardContent className="pt-2 space-y-2"> <div className="flex gap-2 items-center"> <Input placeholder="Search Name/ID or leave blank..." value={patientSearchTerm} onChange={(e) => setPatientSearchTerm(e.target.value)}/> <Button onClick={handlePatientSearch} size="sm" variant="outline">Find</Button> </div> {selectedPatient ? ( <div className="p-2 bg-green-100 rounded text-sm font-medium text-green-800">Selected: {selectedPatient.name}</div> ) : ( <div className="p-2 bg-yellow-100 rounded text-sm text-yellow-800">Default: Walk-in Sale</div> )} </CardContent> </Card> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">2. Add Medicines</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow flex flex-col"> <Input placeholder="Search Medicine Name..." value={medicineSearchTerm} onChange={(e) => setMedicineSearchTerm(e.target.value)} className="mb-2"/> <div className="mt-1 border rounded-md overflow-y-auto flex-grow bg-gray-50 min-h-[150px]"> {medicineSearchTerm && filteredInventory.length > 0 ? ( filteredInventory.map(item => ( <div key={item.id} className="p-2 hover:bg-blue-100 cursor-pointer flex justify-between items-center border-b" onClick={() => addToCart(item)}> <span className="text-sm">{item.name} <span className="text-xs text-gray-500">(Stock: {item.stock})</span></span> <span className="text-sm font-semibold">${item.price.toFixed(2)}</span> </div> )) ) : medicineSearchTerm ? ( <p className="text-sm text-red-500 p-4 text-center italic">No matching medicine found in stock.</p> ) : ( <p className="text-sm text-gray-400 p-4 text-center italic">Type above to search medicines...</p> )} </div> </CardContent> </Card> </div> <div className="lg:col-span-2 space-y-4 flex flex-col"> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">3. Review Cart</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow overflow-y-auto"> {dispensingCart.length > 0 ? ( <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="w-24 text-center">Qty</TableHead> <TableHead className="w-20 text-right">Price</TableHead> <TableHead className="w-24 text-right">Subtotal</TableHead> <TableHead className="w-10 text-center">Rem</TableHead> </TableRow> </TableHeader> <TableBody> {dispensingCart.map(item => ( <TableRow key={item.id}> <TableCell className="text-sm">{item.name}</TableCell> <TableCell> <Input type="number" min="1" max={item.stock} value={item.qty} onChange={(e) => updateQty(item.id, e.target.value)} className="h-8 w-16 text-center p-1"/> </TableCell> <TableCell className="text-right text-sm">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right text-sm font-medium">${(item.qty * item.price).toFixed(2)}</TableCell> <TableCell className="text-center"> <button onClick={() => updateQty(item.id, 0)} className="text-red-500 hover:text-red-700 p-1 font-bold" title="Remove">&times;</button> </TableCell> </TableRow> ))} </TableBody> </Table> ) : ( <p className="text-center text-gray-500 py-10 italic">Cart is currently empty. Add medicines from the left.</p> )} </CardContent> {dispensingCart.length > 0 && ( <CardFooter className="border-t pt-3 flex justify-end items-center"> <span className="text-sm font-semibold mr-2">Total Amount:</span> <span className="font-bold text-xl text-blue-700">${calculateTotal().toFixed(2)}</span> </CardFooter> )} </Card> <div className="flex justify-between gap-3 pt-4 border-t flex-shrink-0"> <Button variant="outline" onClick={handleReset}>Clear Cart</Button> <div className="flex gap-3"> <Button variant="secondary" onClick={onClose}>Cancel</Button> <Button onClick={handleDispenseAndSendToPOS} disabled={dispensingCart.length === 0}> <MonitorSmartphone className="mr-2 h-4 w-4" /> Dispense & Send to POS </Button> </div> </div> </div> </div> </Modal> ); }\r\n        function PharmacyAnalytics() { return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Analytics & Reports</h2> <p className="text-gray-500 text-sm">Performance insights.</p> </header> <Card> <CardHeader><CardTitle>Key Performance Indicators (KPIs)</CardTitle></CardHeader> <CardContent className="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Sales (Today)</p><p className="text-2xl font-bold text-blue-800">$1,234</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Orders (Today)</p><p className="text-2xl font-bold text-green-800">42</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Low Stock Items</p><p className="text-2xl font-bold text-yellow-900">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Low Stock\').length}</p></div> <div className="p-4 bg-red-50 rounded border border-red-200"><p className="text-xs uppercase text-red-600 font-medium">Out of Stock</p><p className="text-2xl font-bold text-red-800">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Out of Stock\').length}</p></div> </CardContent> </Card> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader><CardTitle>Monthly Sales Trend</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><BarChartComponent data={MOCK_SALES_DATA} /></ResponsiveContainer></CardContent> </Card> <Card> <CardHeader><CardTitle>Top Selling Categories</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><LineChart data={[{name:\'Pain\', v:40}, {name:\'ABX\', v:30}, {name:\'Vit\', v:25}]} /></ResponsiveContainer></CardContent> </Card> </div> <Card> <CardHeader><CardTitle>Generate Custom Reports</CardTitle></CardHeader> <CardContent className="pt-4 space-y-3"> <p className="text-sm text-gray-600">Select report type and date range to generate.</p> <div className="flex flex-wrap gap-4 items-end"> <div className="flex-grow min-w-[150px]"> <Label htmlFor="report-type">Report Type</Label> <Select id="report-type" className="mt-1"> <SelectItem value="daily_sales">Daily Sales Summary</SelectItem> <SelectItem value="monthly_sales">Monthly Sales Report</SelectItem> <SelectItem value="sales_tender">Sales by Tender Type</SelectItem> <SelectItem value="sales_user">Sales by User</SelectItem> <SelectItem value="stock_level">Current Stock Levels</SelectItem> <SelectItem value="stock_usage">Stock Usage Report</SelectItem> <SelectItem value="stock_expiry">Stock Expiry Report</SelectItem> <SelectItem value="debtors">Debtors List</SelectItem> <SelectItem value="inv_valuation">Inventory Valuation</SelectItem> </Select> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="start-date">Start Date</Label> <Input id="start-date" type="date" className="mt-1"/> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="end-date">End Date</Label> <Input id="end-date" type="date" className="mt-1"/> </div> <Button onClick={() => alert(\'Pholder: Generate selected report\')}><FileCheck className="mr-2 h-4 w-4"/> Generate Report</Button> </div> </CardContent> </Card> </div> ); }\r\n        function MedicalAidClaimsView({ orders }) { const validOrders = Array.isArray(orders) ? orders : []; const claimsData = validOrders.filter(o => o && o.medicalAidProvider).map(o => ({ id: `CLAIM-${o.id}`, orderId: o.id, patientName: o.patientName || \'N/A\', provider: o.medicalAidProvider, date: o.date || \'N/A\', amountClaimed: (typeof o.amountCovered === \'number\' ? o.amountCovered : 0), status: o.medicalAidStatus || \'N/A\', })); return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Medical Aid Claims Management</h2> <p className="text-gray-500 text-sm">Track and manage medical aid claims.</p> </header> <Card> <CardHeader><CardTitle>Claim Status Overview</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Claim ID</TableHead><TableHead>Order ID</TableHead><TableHead>Patient</TableHead> <TableHead>Provider</TableHead><TableHead>Date</TableHead> <TableHead className="text-right">Claimed Amt</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {claimsData.length > 0 ? ( claimsData.map(claim => ( <TableRow key={claim.id}> <TableCell className="font-mono text-xs">{claim.id}</TableCell><TableCell className="font-mono text-xs">{claim.orderId}</TableCell> <TableCell>{claim.patientName}</TableCell><TableCell>{claim.provider}</TableCell> <TableCell className="text-xs">{claim.date}</TableCell><TableCell className="text-right font-medium">${claim.amountClaimed.toFixed(2)}</TableCell> <TableCell><Badge variant={getClaimStatusVariant(claim.status)}>{claim.status}</Badge></TableCell> <TableCell className="space-x-1 whitespace-nowrap"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Claim Details ${claim.id}`)}>Details</Button> {claim.status === \'Received\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Submit Claim ${claim.id}`)}>Submit</Button>} {claim.status === \'Pending Patient Auth\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Request Auth ${claim.id}`)} disabled>Req. Auth</Button>} {claim.status === \'Claim Rejected\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Resubmit Claim ${claim.id}`)}>Resubmit</Button>} {claim.status === \'Claim Submitted\' && <Badge variant="info" className="ml-2">Submitted</Badge>} {claim.status === \'Paid\' && <Badge variant="success" className="ml-2">Paid</Badge>} </TableCell> </TableRow> )) ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No medical aid claims found.</TableCell></TableRow> )} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <p className="text-sm text-gray-500">Showing {claimsData.length} claims.</p> </CardFooter> </Card> <Card> <CardHeader><CardTitle>Claims Summary & Analytics</CardTitle></CardHeader> <CardContent className="pt-4 text-center italic text-gray-400"> Placeholder: Charts visualizing claims status (Pending, Submitted, Paid, Rejected), claim amounts by provider, aging analysis, etc. </CardContent> </Card> </div> ); }\r\n        function MarketWatchView() { const data = MOCK_MARKET_WATCH_DATA; const adverts = MOCK_ADVERTS; const getTrendIcon = (trendString) => { if (!trendString) return null; if (trendString.includes(\'+\') || trendString.toLowerCase().includes(\'high\') || trendString.toLowerCase().includes(\'increase\')) return <TrendingUp className="h-4 w-4 text-green-600 inline ml-1" />; if (trendString.includes(\'-\') || trendString.toLowerCase().includes(\'low\') || trendString.toLowerCase().includes(\'decrease\')) return <TrendingDown className="h-4 w-4 text-red-600 inline ml-1" />; return null; }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <div> <h2 className="text-xl font-semibold">Market Watch Insights</h2> <p className="text-gray-500 text-sm">AI-powered intelligence on market trends, demand, and stock levels.</p> </div> </header> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <Card className="lg:col-span-3 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-blue-200"> <CardHeader> <CardTitle className="flex items-center text-blue-800"><Cpu className="mr-2 h-5 w-5" /> AI-Driven Insights</CardTitle> <CardDescription>Real-time analysis and actionable recommendations.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-3"> {data.aiInsights.map((insight, index) => ( <div key={index} className="text-sm p-3 bg-white/70 rounded border border-blue-100 shadow-sm flex items-start gap-2"> <Info className="h-4 w-4 text-blue-600 mt-0.5 shrink-0"/> <div> <p className=" text-gray-800">{insight}</p> <p className="text-xs text-blue-600 mt-1 italic">Source: ehutano+ AI Engine</p> </div> </div> ))} </CardContent> </Card> <Card className="lg:col-span-2"> <CardHeader> <CardTitle className="flex items-center"><Activity className="mr-2 h-5 w-5 text-orange-600" /> Product Trends & Demand Signals</CardTitle> <CardDescription>Monitor fast-moving items, high demand, and pricing changes.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-4"> <div> <h4 className="font-semibold mb-2 flex items-center"><TrendingUp className="mr-2 h-4 w-4 text-green-600"/> Fast Moving Items</h4> {data.fastMoving.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="trendUp">{item.trend} {getTrendIcon(item.trend)}</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><Users className="mr-2 h-4 w-4 text-red-600"/> High Demand Indicators</h4> {data.highDemand.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.reason}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="warning">High Demand</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><DollarSign className="mr-2 h-4 w-4 text-indigo-600" /> Price Change Alerts</h4> {data.priceAlerts.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.note}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant={item.change.startsWith(\'+\') ? \'trendDown\' : \'trendUp\'}>{item.change} {getTrendIcon(item.change)}</Badge> </div> ))} </div> </CardContent> </Card> <Card className="lg:col-span-1 flex flex-col space-y-4"> <div> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackageX className="mr-2 h-5 w-5 text-red-600" /> Stock Alerts</CardTitle> <CardDescription>Out-of-stock & low stock items.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 max-h-48 overflow-y-auto"> {data.stockOuts.map(item => ( <div key={item.id} className={`text-sm p-2 rounded border ${getStatusBadgeVariant(item.status)===\'destructive\' ? \'bg-red-50 border-red-200\' : \'bg-yellow-50 border-yellow-200\'}`}> <p className="font-medium">{item.name} <Badge variant={getStatusBadgeVariant(item.status)}>{item.status}</Badge></p> <p className="text-xs">Supplier: {item.supplier} | {item.note}</p> <p className="text-xs italic text-gray-500">Source: {item.source}</p> </div> ))} </CardContent> </div> <div className="border-t flex-grow flex flex-col"> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackagePlus className="mr-2 h-5 w-5 text-cyan-600" /> New Market Arrivals</CardTitle> <CardDescription>Newly registered or imported.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 flex-grow overflow-y-auto"> <h5 className="text-xs font-semibold uppercase text-gray-500">Newly Registered (via MCAZ)</h5> {data.newlyRegistered.map(item => ( <div key={item.id} className="text-sm p-2 border-b"><p>{item.name}</p><p className="text-xs">Supplier: {item.supplier} (Registered: {item.date})</p></div> ))} <h5 className="text-xs font-semibold uppercase text-gray-500 pt-2 mt-2">Recently Imported</h5> {data.recentlyImported.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0"><p>{item.name}</p><p className="text-xs">Source: {item.source} | Arrived: {item.arrival}</p><p className="text-xs">Distributor: {item.distributor}</p></div> ))} </CardContent> </div> </Card> <Card className="lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center"><Megaphone className="mr-2 h-5 w-5 text-purple-600" /> Industry Adverts (MCAZ Approved)</CardTitle> <CardDescription>Approved promotions & announcements.</CardDescription> </CardHeader> <CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {adverts.map(ad => ( <a key={ad.id} href={ad.link} target="_blank" rel="noopener noreferrer" className="block group border rounded overflow-hidden hover:shadow-md bg-white transition-shadow"> <img src={ad.imageUrl} alt={ad.title} className="w-full h-24 object-cover"/> <div className="p-3"> <p className="text-sm font-medium mb-1 group-hover:text-blue-600">{ad.title}</p> <p className="text-xs text-gray-500">{ad.type}</p> <p className="text-xs text-gray-400 mt-2">Ref: {ad.approvedBy}</p> </div> </a> ))} </CardContent> </Card> </div> </div> ); }\r\n\r\n        // --- Doctor Portal ---\r\n        function DoctorPortal({ setActiveView }) { const [activeSubView, setActiveSubView] = useState(\'dashboard\'); const mockPatients = [ { id: \'PAT101\', name: \'Tendai Moyo\', lastVisit: \'2025-03-20\', condition: \'Hypertension\' }, { id: \'PAT102\', name: \'Alice Banda\', lastVisit: \'2025-04-10\', condition: \'Diabetes Type 2\' }, { id: \'PAT103\', name: \'John Doe\', lastVisit: \'2025-04-22\', condition: \'Check-up\' }, ]; const mockAppointments = [ { id: \'APP001\', time: \'09:00\', patientName: \'Jane Smith\', reason: \'Follow-up\' }, { id: \'APP002\', time: \'09:30\', patientName: \'Peter Jones\', reason: \'New Consult\' }, { id: \'APP003\', time: \'10:00\', patientName: \'Tendai Moyo\', reason: \'BP Check\' }, ]; const renderContent = () => { switch (activeSubView) { case \'patients\': return ( <Card> <CardHeader><CardTitle>Patient Records</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Patients..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Patient ID</TableHead><TableHead>Name</TableHead><TableHead>Last Visit</TableHead><TableHead>Primary Condition</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockPatients.map(p => ( <TableRow key={p.id}> <TableCell className="font-mono text-xs">{p.id}</TableCell><TableCell>{p.name}</TableCell><TableCell>{p.lastVisit}</TableCell><TableCell>{p.condition}</TableCell> <TableCell><Button variant="link" size="sm" onClick={() => alert(`Pholder: View Patient Record ${p.name}`)}>View Record</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'prescriptions\': return ( <Card> <CardHeader><CardTitle>Electronic Prescriptions (E-Rx)</CardTitle></CardHeader> <CardContent className="pt-4 space-y-4"> <Button onClick={() => alert(\'Pholder: Open New E-Rx Form Modal\')}> <PlusCircle className="mr-2 h-4 w-4"/> Create New Prescription </Button> <div><h4 className="font-medium mb-2">Recently Issued Prescriptions</h4><p className="text-sm text-gray-500">Placeholder: List of recent Rxs with status (Sent, Filled, Pending).</p></div> <img src="https://placehold.co/600x150/e0f2f7/0891b2?text=E-Rx+List+Mockup" alt="E-Rx List Placeholder" className="mt-4 rounded border"/> </CardContent> </Card> ); case \'appointments\': return ( <Card> <CardHeader><CardTitle>Today\'s Schedule</CardTitle></CardHeader> <CardContent className="pt-4"> <Table> <TableHeader><TableRow><TableHead>Time</TableHead><TableHead>Patient</TableHead><TableHead>Reason for Visit</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockAppointments.map(a => ( <TableRow key={a.id}> <TableCell>{a.time}</TableCell><TableCell>{a.patientName}</TableCell><TableCell>{a.reason}</TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Start Consultation ${a.patientName}`)}>Start Consult</Button> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Add Notes/Record ${a.patientName}`)}>Add Record</Button> </TableCell> </TableRow> ))} </TableBody> </Table> <Button variant="outline" size="sm" className="mt-4" onClick={() => alert(\'Pholder: Open Full Calendar View\')}>View Full Calendar</Button> </CardContent> </Card> ); case \'dashboard\': default: return ( <Card> <CardHeader><CardTitle>Doctor Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-blue-50" onClick={() => setActiveSubView(\'appointments\')}> <CalendarDays className="h-6 w-6 mb-1 text-blue-600"/> <span className="font-medium">Today\'s Appointments</span> <span className="text-sm text-gray-600">({mockAppointments.length} scheduled)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-green-50" onClick={() => setActiveSubView(\'prescriptions\')}> <FileText className="h-6 w-6 mb-1 text-green-600"/> <span className="font-medium">E-Prescriptions</span> <span className="text-sm text-gray-600">(Create & Manage)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-purple-50" onClick={() => setActiveSubView(\'patients\')}> <Users className="h-6 w-6 mb-1 text-purple-600"/> <span className="font-medium">Patient Records</span> <span className="text-sm text-gray-600">(View & Search)</span> </Button> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2 flex items-center"><Bell className="mr-2 h-4 w-4"/> Notifications & Tasks</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Lab result received for Alice B.</li> <li>Placeholder: Refill request from Tendai M.</li> <li>Placeholder: Message from Pharmacy re: Rx124</li> </ul> <Button variant="link" size="sm" className="mt-2">View All Notifications</Button> </div> </CardContent> </Card> ); } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl md:text-3xl font-bold">Doctor Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage patients, electronic prescriptions, and appointments efficiently.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={activeSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'dashboard\')} data-state={activeSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4"/>Dashboard</Button> <Button variant={activeSubView === \'appointments\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'appointments\')} data-state={activeSubView === \'appointments\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CalendarDays className="mr-2 h-4 w-4"/>Appointments</Button> <Button variant={activeSubView === \'patients\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'patients\')} data-state={activeSubView === \'patients\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Users className="mr-2 h-4 w-4"/>Patients</Button> <Button variant={activeSubView === \'prescriptions\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'prescriptions\')} data-state={activeSubView === \'prescriptions\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4"/>E-Rx</Button> </nav> <div className="pt-6"> {renderContent()} </div> </div> ); }\r\n\r\n        // --- Wholesaler Portal ---\r\n        function WholesalerPortal({ setActiveView }) { const [wholesalerSubView, setWholesalerSubView] = useState(\'dashboard\'); const mockWholesalerCatalog = MOCK_PHARMACY_INVENTORY.filter(i => i.wholesaleSource?.startsWith(\'MediSupply\') || i.wholesaleSource?.startsWith(\'PharmaDistro\')); const mockWholesalerOrders = [ { id: \'W-ORD-001\', pharmacyName: \'Bonvie Pharmacy\', date: \'2025-04-24\', total: 450.00, status: \'Shipped\' }, { id: \'W-ORD-002\', pharmacyName: \'City Pharmacy\', date: \'2025-04-25\', total: 1200.50, status: \'Processing\' }, { id: \'W-ORD-003\', pharmacyName: \'Pulse Pharmacy\', date: \'2025-04-25\', total: 320.00, status: \'Pending Confirmation\' }, ]; const renderWholesalerContent = () => { switch (wholesalerSubView) { case \'dashboard\': return ( <Card> <CardHeader><CardTitle>Wholesaler Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Pending Orders</p><p className="text-2xl font-bold text-blue-800">{mockWholesalerOrders.filter(o => o.status.includes(\'Pending\') || o.status === \'Processing\').length}</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Active Catalog Items</p><p className="text-2xl font-bold text-green-800">{mockWholesalerCatalog.filter(i => i.stock > 0).length}</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Items Nearing Low Stock</p><p className="text-2xl font-bold text-yellow-900">5</p></div> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2">Recent Activity</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Order W-ORD-001 shipped to Bonvie Pharmacy.</li> <li>Placeholder: New order W-ORD-003 received from Pulse Pharmacy.</li> <li>Placeholder: Stock updated for Paracetamol 500mg.</li> </ul> <Button variant="link" size="sm" className="mt-2" onClick={() => setWholesalerSubView(\'orders\')}>View All Orders</Button> </div> </CardContent> </Card> ); case \'catalog\': return ( <Card> <CardHeader className="flex flex-row justify-between items-center"> <div><CardTitle>Product Catalog Management</CardTitle></div> <Button onClick={() => alert(\'Pholder: Open Add New Product Modal\')} size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Add New Product</Button> </CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Catalog (Name, ID, Category)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Product ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Wholesale Price</TableHead><TableHead className="text-right">Available Stock</TableHead><TableHead>Stock Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerCatalog.map(item => ( <TableRow key={item.id}> <TableCell className="font-mono text-xs">{item.id}</TableCell><TableCell>{item.name}</TableCell><TableCell>{item.category}</TableCell> <TableCell className="text-right">${(item.price * 0.8).toFixed(2)}</TableCell> <TableCell className="text-right">{item.stock * 10}</TableCell> <TableCell><Badge variant={item.stock > 0 ? \'success\' : \'destructive\'}>{item.stock > 0 ? \'In Stock\' : \'Out Of Stock\'}</Badge></TableCell> <TableCell><Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Edit Product ${item.id}`)}>Edit</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'orders\': return ( <Card> <CardHeader><CardTitle>Incoming Pharmacy Orders</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Orders (ID, Pharmacy Name)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Pharmacy Customer</TableHead><TableHead>Order Date</TableHead><TableHead className="text-right">Order Total</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerOrders.map(order => ( <TableRow key={order.id} className={order.status.includes(\'Pending\') ? \'bg-yellow-50/70\' : \'\'}> <TableCell className="font-mono text-xs">{order.id}</TableCell><TableCell>{order.pharmacyName}</TableCell><TableCell className="text-xs">{order.date}</TableCell> <TableCell className="text-right font-medium">${order.total.toFixed(2)}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Order Details ${order.id}`)}>Details</Button> {order.status === \'Pending Confirmation\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Confirm Order ${order.id}`)}>Confirm</Button>} {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Mark as Shipped ${order.id}`)}>Mark Shipped</Button>} {order.status === \'Shipped\' && <Badge variant="info" className="ml-2">Shipped</Badge>} </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'marketWatch\': return <MarketWatchView />; default: return <div className="text-center p-8 text-gray-500">Select a section.</div>; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Wholesaler Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage your product catalog, process pharmacy orders, and view market insights.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={wholesalerSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'dashboard\')} data-state={wholesalerSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4" /> Dashboard</Button> <Button variant={wholesalerSubView === \'catalog\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'catalog\')} data-state={wholesalerSubView === \'catalog\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BookOpen className="mr-2 h-4 w-4" /> Catalog</Button> <Button variant={wholesalerSubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'orders\')} data-state={wholesalerSubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button> <Button variant={wholesalerSubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'marketWatch\')} data-state={wholesalerSubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button> </nav> <div className="pt-6"> {renderWholesalerContent()} </div> </div> ); }\r\n\r\n        // --- Community Wellness Hub ---\r\n        function CommunityWellnessHub({setActiveView}) { const [activeTab, setActiveTab] = useState(\'activities\'); const [activities, setActivities] = useState(MOCK_WELLNESS_ACTIVITIES); const [selectedDay, setSelectedDay] = useState(\'Monday\'); const [blogCategory, setBlogCategory] = useState(\'All\'); const handleBooking = (activityId) => { setActivities(prevActivities => prevActivities.map(act => { if (act.id === activityId && act.slots > 0 && !act.booked) { alert(`Successfully booked ${act.name}!`); return { ...act, slots: act.slots - 1, booked: true }; } else if (act.id === activityId && act.booked) { alert(`You have already booked ${act.name}.`); return act; } else if (act.id === activityId && act.slots === 0) { alert(`Sorry, ${act.name} is currently full.`); return act; } return act; }) ); }; const filteredActivities = activities.filter(act => act.day === selectedDay); const daysOfWeek = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'].filter(day => MOCK_WELLNESS_ACTIVITIES.some(a => a.day === day)); const blogCategories = [\'All\', ...new Set(MOCK_BLOG_POSTS.map(p => p.category))]; const filteredBlogPosts = blogCategory === \'All\' ? MOCK_BLOG_POSTS : MOCK_BLOG_POSTS.filter(p => p.category === blogCategory); const renderTabContent = () => { switch (activeTab) { case \'activities\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Community Activities & Event Schedule</h2> <p className="text-sm text-gray-600">Book sports sessions, fitness classes, support groups, and other wellness events.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">View Schedule For:</span> {daysOfWeek.map(day => ( <Button key={day} variant={selectedDay === day ? \'default\' : \'outline\'} size="sm" onClick={() => setSelectedDay(day)}> {day} </Button> ))} </div> <Card> <CardHeader> <CardTitle>Available Activities for {selectedDay}</CardTitle> </CardHeader> <CardContent className="pt-4 space-y-4"> {filteredActivities.length > 0 ? ( filteredActivities.map(act => ( <div key={act.id} className={`flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border rounded-lg gap-4 ${act.booked ? \'bg-green-50 border-green-200\' : act.slots === 0 ? \'bg-red-50 border-red-200 opacity-70\' : \'bg-white hover:bg-gray-50\'}`}> <div className="flex items-center gap-3 flex-grow"> <span className="text-3xl">{act.icon}</span> <div> <p className="font-semibold">{act.name}</p> <p className="text-sm text-gray-600">{act.time} @ {act.location}</p> <p className="text-xs mt-1"> {act.slots > 0 ? <span className="text-green-700">{`${act.slots} slots available`}</span> : <span className="font-medium text-red-600">Fully Booked</span>} </p> </div> </div> <Button size="sm" onClick={() => handleBooking(act.id)} disabled={act.slots === 0 || act.booked} className={`mt-2 sm:mt-0 flex-shrink-0 ${act.booked ? \'bg-green-600 hover:bg-green-700 cursor-default\' : act.slots === 0 ? \'bg-gray-400 cursor-not-allowed\' : \'bg-blue-600 hover:bg-blue-700\'}`}> {act.booked ? (<><CheckCircle className="mr-1 h-4 w-4"/> You\'re Booked</>) : (act.slots > 0 ? \'Book Your Slot\' : \'Full\')} </Button> </div> )) ) : ( <p className="text-center py-6 text-gray-500 italic">No activities scheduled for {selectedDay}.</p> )} </CardContent> </Card> </div> ); case \'blog\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Wellness Blog & Articles</h2> <p className="text-sm text-gray-600">Read the latest health tips, lifestyle advice, and expert insights.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">Filter by Category:</span> {blogCategories.map(cat => ( <Button key={cat} variant={blogCategory === cat ? \'default\' : \'outline\'} size="sm" onClick={() => setBlogCategory(cat)}> {cat} </Button> ))} </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredBlogPosts.map(post => ( <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-200"> <img src={post.imageUrl} alt={post.title} className="h-40 w-full object-cover"/> <CardHeader> <Badge variant="secondary" className="w-fit mb-2">{post.category}</Badge> <CardTitle className="text-lg">{post.title}</CardTitle> <CardDescription>By {post.author} - {post.date}</CardDescription> </CardHeader> <CardContent className="pt-2 flex-grow"> <p className="text-sm text-gray-700">{post.snippet}</p> </CardContent> <CardFooter className="pt-2 border-t"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Navigate to full blog post ${post.id}`)}>Read Full Article</Button> </CardFooter> </Card> ))} {filteredBlogPosts.length === 0 && ( <p className="md:col-span-2 lg:col-span-3 text-center py-10 text-gray-500 italic">No blog posts found in the "{blogCategory}" category.</p> )} </div> </div> ); case \'resources\': return ( <div className="space-y-8"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Health Resources & Interactive Tools</h2> <p className="text-sm text-gray-600">Access guides, calculators, and information on various health topics.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-gradient-to-br from-orange-50 to-amber-100 border border-orange-200"> <CardHeader> <CardTitle className="flex items-center text-orange-800"><Utensils className="mr-2 h-5 w-5"/> Diabetes Management</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-orange-700">Resources for managing diabetes effectively.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Downloadable Meal Plans</li> <li>Video Guide: Using Your Meter</li> <li>Article: Importance of Foot Care</li> <li>Find Local Support Groups</li> </ul> <Button size="sm" className="bg-orange-500 hover:bg-orange-600 text-white" onClick={() => alert(\'Pholder: Navigate to Diabetes Resource Page\')}>Explore Diabetes Section</Button> </CardContent> </Card> <Card className="bg-gradient-to-br from-red-50 to-rose-100 border border-red-200"> <CardHeader> <CardTitle className="flex items-center text-red-800"><Heart className="mr-2 h-5 w-5"/> Hypertension Control</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-red-700">Tips for managing high blood pressure.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Low Sodium Recipe Book (PDF)</li> <li>Audio Guide: Stress Reduction Techniques</li> <li>Interactive Blood Pressure Log Tool</li> <li>Understanding Your Readings</li> </ul> <Button size="sm" className="bg-red-500 hover:bg-red-600 text-white" onClick={() => alert(\'Pholder: Navigate to Hypertension Page\')}>View BP Management Tips</Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Scale className="mr-2 h-5 w-5"/> BMI Calculator</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Calculate your Body Mass Index.</p> <div className="flex gap-2 mt-2"> <div className="flex-1"><Label htmlFor="height-input">Height (cm)</Label><Input id="height-input" placeholder="e.g., 175" type="number"/></div> <div className="flex-1"><Label htmlFor="weight-input">Weight (kg)</Label><Input id="weight-input" placeholder="e.g., 70" type="number"/></div> </div> <Button size="sm" className="mt-3" onClick={() => alert(\'Pholder: Calculate BMI based on inputs\')}>Calculate BMI</Button> <p className="text-sm mt-3">Your BMI: <span className="font-semibold">[Result Placeholder]</span></p> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Brain className="mr-2 h-5 w-5"/> Mental Wellness Corner</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Resources for mental health and well-being.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Guided Mindfulness Exercises (Audio)</li> <li>Recognizing Signs of Burnout</li> <li>Directory of Local Mental Health Professionals</li> <li>Tips for Improving Sleep Quality</li> </ul> <Button size="sm" variant="link" onClick={() => alert(\'Pholder: Navigate to Mental Wellness Page\')}>Explore Mental Wellness</Button> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-3 text-gray-700">Quick Health Links</h4> <div className="grid grid-cols-1 sm:grid-cols-3 gap-3"> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Ministry of Health & Child Care (MoHCC)</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Common Colds & Flu Information</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Basic First Aid Guide</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">National Vaccination Schedules</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Find a Clinic Near You</a> </div> </div> </div> ); case \'antibiotic\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold flex items-center text-blue-800"><Pill className="mr-2 h-5 w-5"/> Antibiotic Stewardship: Be Antibiotic Wise</h2> <p className="text-sm text-gray-600">Learn about the responsible use of antibiotics to combat resistance.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-blue-50 border border-blue-200"> <CardHeader><CardTitle>Why is Responsible Use Important?</CardTitle></CardHeader> <CardContent className="pt-2 text-sm text-blue-800"><p>Antibiotic resistance is a major global health threat. When bacteria become resistant, antibiotics may not work when needed most. Using antibiotics only when necessary and as prescribed helps preserve their effectiveness for everyone.</p></CardContent> </Card> <Card> <CardHeader><CardTitle>Key Principles of Antibiotic Use</CardTitle></CardHeader> <CardContent className="pt-2"> <ul className="list-disc list-inside text-sm space-y-2 text-gray-700"> <li><strong>Viruses vs. Bacteria:</strong> Antibiotics ONLY treat bacterial infections, not viruses like colds or flu.</li> <li><strong>Complete the Full Course:</strong> Always finish your prescribed antibiotics, even if you start feeling better. Stopping early can allow resistant bacteria to survive.</li> <li><strong>Do Not Share:</strong> Never use antibiotics prescribed for someone else or share yours.</li> <li><strong>Trust Your Doctor:</strong> Don\'t pressure your doctor for antibiotics if they say you don\'t need them.</li> <li><strong>Prevent Infections:</strong> Practice good hygiene (like handwashing) and stay up-to-date on vaccinations to prevent infections in the first place.</li> </ul> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6 bg-yellow-50 p-4 rounded border border-yellow-200"> <h4 className="font-semibold mb-2 text-yellow-800 flex items-center"><AlertTriangle className="mr-2 h-4 w-4"/> Patient Advisory</h4> <p className="text-sm text-yellow-900">Always consult your doctor or pharmacist before taking any medication, including antibiotics. Ensure you understand the instructions and potential side effects. Report any adverse reactions immediately.</p> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-2">Further Information</h4> <div className="space-y-1"> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">World Health Organization (WHO) - Antimicrobial Resistance</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Africa CDC - Antimicrobial Resistance Programme</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Local Resources on Antibiotic Use (Placeholder Link)</a> </div> </div> </div> ); default: return null; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Community Wellness Hub</h1> <p className="text-sm mt-1 text-gray-600">Explore activities, health information, and resources for a healthier you.</p> </header> <div className="border-b border-gray-200"> <nav className="-mb-px flex space-x-4 overflow-x-auto"> <button onClick={() => setActiveTab(\'activities\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'activities\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'activities\' ? \'active\' : \'\'}> <CalendarDays className="inline mr-1 h-4 w-4" /> Activities & Events </button> <button onClick={() => setActiveTab(\'blog\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'blog\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'blog\' ? \'active\' : \'\'}> <BookOpen className="inline mr-1 h-4 w-4" /> Wellness Blog </button> <button onClick={() => setActiveTab(\'resources\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'resources\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'resources\' ? \'active\' : \'\'}> <Settings className="inline mr-1 h-4 w-4" /> Health Resources & Tools </button> <button onClick={() => setActiveTab(\'antibiotic\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'antibiotic\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'antibiotic\' ? \'active\' : \'\'}> <Pill className="inline mr-1 h-4 w-4" /> Be Antibiotic Wise </button> </nav> </div> <div className="mt-6"> {renderTabContent()} </div> </div> ); }\r\n\r\n        // --- Main App Component ---\r\n        function App() {\r\n            console.log("App Component: Initial Render");\r\n            const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n            const [userRole, setUserRole] = useState(null);\r\n            const [userName, setUserName] = useState(\'\');\r\n            const [userData, setUserData] = useState(null);\r\n            const [activeView, setActiveView] = useState(\'landing\');\r\n            const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n            const [verificationData, setVerificationData] = useState(null);\r\n\r\n            const openVerificationModal = (data) => { setVerificationData(data); setIsVerificationModalOpen(true); };\r\n            const closeVerificationModal = () => setIsVerificationModalOpen(false);\r\n\r\n            const handleLogin = (role) => {\r\n                console.log(`App Component: handleLogin called with role: ${role}`);\r\n                let defaultView = \'landing\'; let currentUserName = \'\'; let currentUserData = null; let authStatus = false;\r\n                switch (role) {\r\n                    case \'patient\': defaultView = \'patientPortal\'; currentUserName = MOCK_PATIENT_DATA.name; currentUserData = MOCK_PATIENT_DATA; authStatus = true; break;\r\n                    case \'pharmacy\': defaultView = \'pharmacyPortal\'; currentUserName = \'City Pharmacy Staff\'; currentUserData = { id: \'PHARM001\', name: \'City Pharmacy\'}; authStatus = true; break;\r\n                    case \'doctor\': defaultView = \'doctorPortal\'; currentUserName = \'Dr. Musasa\'; currentUserData = { id: \'DOC001\' }; authStatus = true; break;\r\n                    case \'wholesaler\': defaultView = \'wholesalerPortal\'; currentUserName = \'MediSupply Inc.\'; currentUserData = { id: \'WH001\' }; authStatus = true; break;\r\n                    default: console.warn(`App Component: Unknown role "${role}" passed to handleLogin. Staying on landing page.`); role = null; defaultView = \'landing\'; authStatus = false; break;\r\n                }\r\n                setIsAuthenticated(authStatus); setUserRole(role); setActiveView(defaultView); setUserName(currentUserName); setUserData(currentUserData); console.log(`App Component: Login state updated. Auth=${authStatus}, Role=${role}, View=${defaultView}`);\r\n            };\r\n\r\n            const handleLogout = () => { console.log("App Component: handleLogout called."); setIsAuthenticated(false); setUserRole(null); setUserName(\'\'); setUserData(null); setActiveView(\'landing\'); console.log("App Component: Logout state updated. Redirecting to landing."); };\r\n\r\n            const navigateTo = (view) => {\r\n                console.log(`App Component: navigateTo called for view: ${view}. Current auth: ${isAuthenticated}, role: ${userRole}`);\r\n                const publicViews = [\'landing\', \'wellness\']; const semiPublicViews = [\'medicineSearch\']; const allowedViews = { patient: [\'patientPortal\', \'wellness\', \'medicineSearch\', \'prescriptionUpload\', \'quotedRx\'], pharmacy: [\'pharmacyPortal\', \'wellness\'], doctor: [\'doctorPortal\', \'wellness\'], wholesaler: [\'wholesalerPortal\', \'wellness\'], };\r\n                if (publicViews.includes(view)) { console.log(` -> Navigating to public view: ${view}`); setActiveView(view); return; }\r\n                if (semiPublicViews.includes(view) && !isAuthenticated) { console.log(` -> Navigating to semi-public view (unauthenticated): ${view}`); setActiveView(view); return; }\r\n                if (!isAuthenticated) { console.log(` -> Navigation to "${view}" denied (not authenticated). Redirecting to landing.`); setActiveView(\'landing\'); return; }\r\n                if (allowedViews[userRole]?.includes(view)) { console.log(` -> Navigation allowed for role "${userRole}" to view "${view}".`); setActiveView(view); }\r\n                else if (view === \'wellness\') { console.log(` -> Navigation allowed for authenticated user ("${userRole}") to wellness.`); setActiveView(view); }\r\n                else { console.warn(` -> Access denied for role "${userRole}" attempting to navigate to view "${view}". Redirecting to user\'s default portal.`); const defaultPortal = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(allowedViews[userRole]?.includes(defaultPortal) ? defaultPortal : \'landing\'); alert(`Access Denied: You do not have permission to view \'${view}\'. Redirecting to your dashboard.`); }\r\n            };\r\n\r\n            const renderMainContent = () => {\r\n                console.log(`App Component: renderMainContent triggered. Active View: ${activeView}, Role: ${userRole}, Auth: ${isAuthenticated}`);\r\n                if (!isAuthenticated) { switch (activeView) { case \'wellness\': return <CommunityWellnessHub setActiveView={navigateTo}/>; case \'medicineSearch\': return <MedicineSearchListing navigateTo={navigateTo} />; case \'landing\': default: console.log(" -> Rendering LandingPage (unauthenticated)."); return <LandingPage setActiveView={navigateTo} login={handleLogin} navigateTo={navigateTo}/>; } }\r\n\r\n                console.log(` -> Rendering authenticated content for view: ${activeView}`);\r\n                try {\r\n                    const renderPortal = (PortalComponent, requiredRole, props = {}) => { if (userRole === requiredRole) { console.log(` -> Rendering ${requiredRole} portal.`); return <PortalComponent setActiveView={navigateTo} openVerificationModal={openVerificationModal} patientData={userData} {...props} />; } else { console.warn(`Role mismatch: Trying to render ${requiredRole} portal for user role ${userRole}. Rendering Access Denied.`); return renderAccessDenied(); } };\r\n\r\n                    switch (activeView) {\r\n                        case \'patientPortal\': return renderPortal(PatientPortal, \'patient\', { navigateTo });\r\n                        case \'pharmacyPortal\': return renderPortal(PharmacyPortal, \'pharmacy\');\r\n                        case \'doctorPortal\': return renderPortal(DoctorPortal, \'doctor\');\r\n                        case \'wholesalerPortal\': return renderPortal(WholesalerPortal, \'wholesaler\');\r\n                        case \'wellness\': console.log(" -> Rendering CommunityWellnessHub (authenticated)."); return <CommunityWellnessHub setActiveView={navigateTo}/>;\r\n                        case \'medicineSearch\': if (userRole === \'patient\') return <MedicineSearchListing navigateTo={navigateTo} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'prescriptionUpload\': if (userRole === \'patient\') return <PrescriptionUpload navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'quotedRx\': if (userRole === \'patient\') { const quote = userData?.prescriptions?.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quote?.quote} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; } else return renderAccessDenied();\r\n                        default: console.warn(` -> Unhandled authenticated view route: "${activeView}". Resetting to user\'s default portal.`); const defaultPortalView = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(defaultPortalView); return null;\r\n                    }\r\n                } catch (error) {\r\n                     console.error(`CRITICAL ERROR rendering authenticated view "${activeView}" for role "${userRole}":`, error);\r\n                     return ( <div className="text-center p-8 text-red-600 bg-red-50 border border-red-200 rounded-md"><h2 className="text-xl font-semibold mb-2">Oops! Something went wrong.</h2><p>We encountered an error while loading this part of the application.</p><p className="mt-2">Please try refreshing the page. If the problem persists, contact support.</p><p className="mt-4 text-xs text-red-500"><i>Error details (for support): {error.message}</i></p><p className="text-xs text-red-500"><i>(Check browser console (F12) for more info)</i></p><pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || \'No stack trace available.\'}</pre></div> );\r\n                }\r\n            };\r\n\r\n            const renderAccessDenied = () => ( <div className="text-center py-10 px-4"> <Card className="max-w-md mx-auto bg-red-50 border-red-200"> <CardHeader> <CardTitle className="text-red-700 flex items-center justify-center"><AlertTriangle className="h-6 w-6 mr-2"/> Access Denied</CardTitle> </CardHeader> <CardContent className="pt-4 text-red-800"> <p>You do not have permission to access this page (\'{activeView}\') with your current role (\'{userRole || \'None\'}\').</p> <Button onClick={() => navigateTo(userRole ? `${userRole}Portal` : \'landing\')} className="mt-6 bg-red-600 hover:bg-red-700 text-white">Go to My Dashboard / Home</Button> </CardContent> </Card> </div> );\r\n\r\n            const renderNavigation = () => {\r\n                console.log(`App Component: renderNavigation. Auth=${isAuthenticated}, Role=${userRole}, View=${activeView}`);\r\n                if (!isAuthenticated) { return ( <div className="flex items-center space-x-2 sm:space-x-4"> <Button variant="ghost" onClick={() => navigateTo(\'medicineSearch\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Search className="mr-1 h-4 w-4" /> Search Meds </Button> <Button variant="ghost" onClick={() => navigateTo(\'wellness\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Activity className="mr-1 h-4 w-4" /> Wellness </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Show Login Options/Modal\')} size="sm"> <LogIn className="mr-1 h-4 w-4" /> Login </Button> <Button onClick={() => alert(\'Pholder: Show Registration Options/Modal\')} size="sm"> Register </Button> </div> ); }\r\n                else {\r\n                     const portalButtons = { patient: <Button variant={activeView === \'patientPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'patientPortal\')} size="sm" data-state={activeView === \'patientPortal\' ? \'active\' : \'\'}><Home className="mr-1 h-4 w-4" /> Dashboard</Button>, pharmacy: <Button variant={activeView === \'pharmacyPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'pharmacyPortal\')} size="sm" data-state={activeView === \'pharmacyPortal\' ? \'active\' : \'\'}><Building className="mr-1 h-4 w-4" /> Pharmacy Portal</Button>, doctor: <Button variant={activeView === \'doctorPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'doctorPortal\')} size="sm" data-state={activeView === \'doctorPortal\' ? \'active\' : \'\'}><Stethoscope className="mr-1 h-4 w-4" /> Doctor Portal</Button>, wholesaler: <Button variant={activeView === \'wholesalerPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wholesalerPortal\')} size="sm" data-state={activeView === \'wholesalerPortal\' ? \'active\' : \'\'}><Truck className="mr-1 h-4 w-4" /> Wholesaler Portal</Button>, };\r\n                    return ( <div className="flex items-center space-x-2 sm:space-x-4 overflow-x-auto py-1 flex-grow justify-end">\r\n                            {portalButtons[userRole]}\r\n                            <Button variant={activeView === \'wellness\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wellness\')} size="sm" data-state={activeView === \'wellness\' ? \'active\' : \'\'}><Activity className="mr-1 h-4 w-4" /> Wellness</Button>\r\n                            <div className="flex items-center space-x-3 pl-3 border-l border-gray-200 ml-2 flex-shrink-0">\r\n                                <Button variant="ghost" size="icon" className="relative hover:bg-gray-100 rounded-full" onClick={() => alert(\'Placeholder: Show Notifications Panel\')}> <Bell className="h-5 w-5 text-gray-600" /> <span className="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full ring-1 ring-white bg-red-500"/> </Button>\r\n                                <span className="text-sm font-medium text-gray-700 hidden sm:inline" title={`Logged in as: ${userRole}`}>Welcome, {userName}</span>\r\n                                <Button variant="outline" onClick={handleLogout} size="sm"> <LogOut className="mr-1 h-4 w-4" /> Logout </Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            };\r\n\r\n\r\n            // Ensure NO HTML comments are inside this return block\r\n            return (\r\n                <div className="min-h-screen bg-gray-100 flex flex-col">\r\n                    {/* Sticky Navigation Bar */}\r\n                    <nav className="bg-white shadow-md sticky top-0 z-40">\r\n                        <div className="container mx-auto px-4 py-2 flex flex-wrap justify-between items-center gap-4">\r\n                             <span\r\n                                className="text-2xl font-bold text-blue-700 cursor-pointer shrink-0 mr-6"\r\n                                onClick={() => navigateTo(isAuthenticated ? `${userRole}Portal` : \'landing\')}\r\n                                title="Go to Home/Dashboard"\r\n                             >\r\n                                ehutano<span className="text-green-600">+</span>\r\n                             </span>\r\n                             {renderNavigation()}\r\n                         </div>\r\n                    </nav>\r\n\r\n                    {/* Main Content Area */}\r\n                    <main className="container mx-auto p-4 md:p-6 lg:p-8 flex-grow">\r\n                        {renderMainContent()}\r\n                    </main>\r\n\r\n                    {/* Footer */}\r\n                    <footer className="bg-gray-800 text-gray-400 text-sm py-10 mt-16">\r\n                        <div className="container mx-auto px-4">\r\n                             <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 mb-8">\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Company</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">About Us</a></li> <li><a href="#" className="hover:text-white hover:underline">Careers</a></li> <li><a href="#" className="hover:text-white hover:underline">Contact</a></li> <li><a href="#" className="hover:text-white hover:underline" onClick={(e) => { e.preventDefault(); navigateTo(\'wellness\'); }}>Blog</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Legal</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Privacy Policy</a></li> <li><a href="#" className="hover:text-white hover:underline">Terms of Service</a></li> <li><a href="#" className="hover:text-white hover:underline">Compliance</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Resources</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Help Center</a></li> <li><a href="#" className="hover:text-white hover:underline">API Documentation</a></li> <li><a href="#" className="hover:text-white hover:underline">System Status</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Connect</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Facebook</a></li> <li><a href="#" className="hover:text-white hover:underline">Twitter / X</a></li> <li><a href="#" className="hover:text-white hover:underline">LinkedIn</a></li> <li><a href="#" className="hover:text-white hover:underline">WhatsApp Support</a></li> </ul> </div>\r\n                                <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right mt-8 lg:mt-0"> <span className="text-3xl font-bold text-white"> ehutano<span className="text-green-400">+</span> </span> <p className="text-xs mt-2">Digital Health Solutions</p> </div>\r\n                             </div>\r\n                             <div className="border-t border-gray-700 pt-6 text-center text-xs"> &copy; {new Date().getFullYear()} ehutano+. A division of Health Futures Ltd. All rights reserved. </div>\r\n                        </div>\r\n                    </footer>\r\n\r\n                     {/* Centralized Modals */}\r\n                    <MedicineVerificationModal isOpen={isVerificationModalOpen} onClose={closeVerificationModal} verificationData={verificationData} />\r\n                    {/* OrderDetailsModal & DispensingModal are rendered within PharmacyPortal */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        // --- Render the App ---\r\n        try {\r\n            console.log("Attempting ReactDOM.render...");\r\n            ReactDOM.render(<App />, document.getElementById(\'root\'));\r\n            console.log("React app rendered successfully.");\r\n        } catch (error) {\r\n             console.error("CRITICAL ERROR DURING REACT RENDERING:", error);\r\n             const rootElement = document.getElementById(\'root\');\r\n             if (rootElement) {\r\n                rootElement.innerHTML = `<div style="padding: 2rem; border: 2px solid red; background-color: #fee; color: #a00; font-family: sans-serif; text-align: center;">\r\n                                            <h2>Application Initialization Error</h2>\r\n                                            <p>We\'re sorry, but the application failed to load correctly.</p>\r\n                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>\r\n                                            <p style="margin-top: 1em; font-size: 0.9em; color: #500;"><i>Technical Details (for support): ${error.message}</i></p>\r\n                                            <p style="font-size: 0.8em;">(Check the browser\'s developer console (F12) for more detailed error information)</p>\r\n                                            <pre style="margin-top: 1em; text-align: left; background: #fff; border: 1px solid #ccc; padding: 1em; overflow-x: auto; font-size: 0.8em;">${error.stack || \'No stack trace available.\'}</pre>\r\n                                         </div>`;\r\n             }\r\n        }\r\n\r\n    </script>\n', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 8094211dc0984c38e816cd39ab7d9a47450645f4cf44986990bb3b2b013e652347c4d58aa6e25b3b9af5721236e43adba2dfc0e8a64a08e16bb070c1b44549b1_0
2025-06-01 17:18:30,818 - semgrep.rule_match - DEBUG - match_key = ('\r\n        // ***********************************************************************\r\n        // ehutano+ React Frontend Components (Structured Portals & Auth) - v6 - CORRECTED v6\r\n        // ***********************************************************************\r\n        // Final check: Ensuring no stray HTML comments are within the React JSX.\r\n        // ***********************************************************************\r\n\r\n        const { useState, useMemo, useEffect } = React;\r\n\r\n        // --- Mock Data ---\r\n        const MOCK_PATIENT_DATA = { name: \'Tendai Moyo\', medicalAid: { provider: \'Cimas\', memberId: \'CIM123456789\', verified: true }, recentOrders: [ { id: \'ORD789\', date: \'2025-04-18\', status: \'Delivered\', total: \'$15.50\', items: [\'Paracetamol 500mg\', \'Vitamin C Tabs\'] }, { id: \'ORD788\', date: \'2025-04-15\', status: \'Delivered\', total: \'$22.00\', items: [\'Amoxicillin 250mg (Script)\'] }, { id: \'ORD785\', date: \'2025-04-10\', status: \'Cancelled\', total: \'$8.75\', items: [\'Cough Syrup\'] }, ], prescriptions: [ { id: \'RX123\', medicine: \'Amoxicillin 250mg\', doctor: \'Dr. Chipo Musasa\', dateIssued: \'2025-04-14\', status: \'Filled\', refillsLeft: 0, uploadId: \'UPL001\' }, { id: \'RX124\', medicine: \'Lisinopril 10mg\', doctor: \'Dr. David Chen\', dateIssued: \'2025-03-20\', status: \'Active\', refillsLeft: 2, uploadId: \'UPL002\' }, { id: \'UPL003\', status: \'Pending Review\', dateUploaded: \'2025-04-25\', notes: \'Need urgently please\', isQuoteReady: false }, { id: \'UPL004\', status: \'Quote Ready\', dateUploaded: \'2025-04-24\', isQuoteReady: true, quote: { total: 35.50, items: [{ name: \'Metformin 500mg\', price: 9.50, qty: 1 }, { name: \'Amlodipine 5mg\', price: 13.00, qty: 2 }] } } ], reminders: [ { id: \'REM01\', type: \'Refill\', medicine: \'Lisinopril 10mg\', dueDate: \'2025-05-15\' }, { id: \'REM02\', type: \'Appointment\', details: \'Check-up with Dr. Chen\', dueDate: \'2025-05-01\' }, ], healthMetrics: { bloodPressure: \'120/80 mmHg\', lastCheckup: \'2025-03-20\', } };\r\n        const MOCK_PHARMACY_INVENTORY = [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', category: \'Pain Relief\', stock: 150, price: 2.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot A\' }, { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', category: \'Antibiotics\', stock: 45, price: 8.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot B\' }, { id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', category: \'Vitamins\', stock: 80, price: 5.75, supplier: \'HealthWell\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot C\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', category: \'Allergy\', stock: 5, price: 4.20, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-18\', status: \'Low Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot D\' }, { id: \'MED005\', name: \'Cough Syrup XYZ\', category: \'Cold & Flu\', stock: 0, price: 6.50, supplier: \'MediSupply\', lastUpdated: \'2025-04-15\', status: \'Out of Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'LocalChem\', wholesaleSource: \'MediSupply Lot E\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', category: \'Digestive Health\', stock: 60, price: 7.10, supplier: \'HealthWell\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot F\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', category: \'Pain Relief\', stock: 200, price: 3.10, supplier: \'MediSupply\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot G\' }, { id: \'MED008\', name: \'Metformin 500mg\', category: \'Diabetes\', stock: 70, price: 9.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'PharmaDistro Lot H\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', category: \'Antibiotics\', stock: 30, price: 12.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-21\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot I\' }, ];\r\n        const MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES = MOCK_PHARMACY_INVENTORY.map(item => ({ id: item.id, name: item.name, category: item.category, requiresPrescription: item.requiresPrescription, isAntibiotic: item.isAntibiotic, imageUrl: `https://placehold.co/150x150/e2e8f0/334155?text=${item.name.split(\' \')[0]}`, pharmacies: [ { name: \'Bonvie Pharmacy\', price: item.price, stockStatus: item.stock > 10 ? \'In Stock\' : (item.stock > 0 ? \'Low Stock\' : \'Out of Stock\') }, { name: \'Pulse Pharmacy\', price: item.price * 1.05, stockStatus: Math.random() > 0.2 ? \'In Stock\' : \'Low Stock\' }, { name: \'City Pharmacy\', price: item.price * 0.98, stockStatus: Math.random() > 0.1 ? \'In Stock\' : \'Out of Stock\' }, ].filter(p => p.stockStatus !== \'Out of Stock\'), }));\r\n        const MOCK_SALES_DATA = [ { name: \'Jan\', sales: 4000 }, { name: \'Feb\', sales: 3000 }, { name: \'Mar\', sales: 5000 }, { name: \'Apr\', sales: 4500 }, { name: \'May\', sales: 6000 }, { name: \'Jun\', sales: 5500 }, ];\r\n        const MOCK_PARTNER_LOGOS = [ { name: \'Cimas MedAid\', url: \'https://placehold.co/150x60/a5f3fc/0e7490?text=Cimas+Logo\' }, { name: \'Bonvie Pharmacy\', url: \'https://placehold.co/150x60/d8b4fe/581c87?text=Bonvie+Pharmacy\' }, { name: \'MediSupply Wholesalers\', url: \'https://placehold.co/150x60/fecaca/991b1b?text=MediSupply\' }, { name: \'Wellness Hub ZW\', url: \'https://placehold.co/150x60/a7f3d0/14532d?text=Wellness+Hub\' }, { name: \'Dr. Moyo Clinic\', url: \'https://placehold.co/150x60/bfdbfe/1e40af?text=Dr.+Moyo\' }, { name: \'First Mutual Health\', url: \'https://placehold.co/150x60/fed7aa/9a3412?text=FMH+Logo\' }, { name: \'Pulse Pharmacy\', url: \'https://placehold.co/150x60/fbcfe8/9d174d?text=Pulse+Pharmacy\' }, { name: \'PharmaDistro Ltd\', url: \'https://placehold.co/150x60/e0e7ff/3730a3?text=PharmaDistro\' }, ];\r\n        const MOCK_PHARMACY_ORDERS = [ { id: \'ORD-PHARM-001\', patientName: \'Alice Banda\', date: \'2025-04-23\', status: \'Pending Payment\', total: 35.50, items: [{ id: \'MED002\', name: \'Amoxicillin 250mg Caps\', qty: 1 }, { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', qty: 2 }], medicalAidStatus: \'Pending Patient Auth\', amountCovered: 0.00, medicalAidProvider: \'Cimas\', requiresAction: true, paymentMethod: \'Medical Aid\', patientId: \'PAT001\' }, { id: \'ORD-PHARM-002\', patientName: \'Tendai Moyo\', date: \'2025-04-22\', status: \'Ready for Pickup\', total: 12.00, items: [{ id: \'MED009\', name: \'Ciprofloxacin 500mg\', qty: 1 }], medicalAidStatus: \'Received\', amountCovered: 10.00, medicalAidProvider: \'First Mutual Health\', requiresAction: true, paymentMethod: \'Medical Aid / Co-Pay\', patientId: \'PAT002\' }, { id: \'ORD-PHARM-003\', patientName: \'John Doe\', date: \'2025-04-21\', status: \'Completed\', total: 5.75, items: [{ id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: false, paymentMethod: \'EcoCash\', patientId: \'PAT003\' }, { id: \'ORD-PHARM-004\', patientName: \'Jane Smith\', date: \'2025-04-24\', status: \'Processing\', total: 9.50, items: [{ id: \'MED008\', name: \'Metformin 500mg\', qty: 1 }], medicalAidStatus: \'Claim Submitted\', amountCovered: 7.50, medicalAidProvider: \'Cimas\', requiresAction: false, paymentMethod: \'Medical Aid\', patientId: \'PAT004\' }, { id: \'ORD-PHARM-005\', patientName: \'Blessing R\', date: \'2025-04-25\', status: \'Pending Approval\', total: 25.00, items: [{ id: \'MED006\', name: \'Omeprazole 20mg Caps\', qty: 2 }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: true, paymentMethod: \'Cash on Delivery\', patientId: \'PAT005\' }, ];\r\n        const MOCK_VERIFICATION_DATA_VALID = { status: \'verified\', medicineName: \'Amoxicillin 250mg Caps\', batchNumber: \'BCH12345\', expiryDate: \'2026-12-31\', pharmacySource: \'Bonvie Pharmacy\', wholesaleSource: \'MediSupply Lot B\', manufacturer: \'GenericMed\', isAntibiotic: true, message: \'Medicine verified successfully. Genuine product.\' };\r\n        const MOCK_VERIFICATION_DATA_INVALID = { status: \'invalid\', message: \'Verification Failed! Product may be falsified. Report to pharmacy/MCAZ.\', isAntibiotic: false, };\r\n        const MOCK_VERIFICATION_DATA_EXPIRED = { status: \'expired\', medicineName: \'Paracetamol 500mg Tabs\', batchNumber: \'BCH67890\', expiryDate: \'2024-03-31\', pharmacySource: \'Pulse Pharmacy\', wholesaleSource: \'PharmaDistro Lot C\', manufacturer: \'PharmaCo\', isAntibiotic: false, message: \'Warning: This medicine has EXPIRED. Do not use.\' };\r\n        const MOCK_MARKET_WATCH_DATA = { fastMoving: [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', trend: \'+25% sales WoW\', source: \'Aggregated POS\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', trend: \'High seasonal demand\', source: \'AI Model\' }, { id: \'MED003\', name: \'Vitamin C 1000mg\', trend: \'+15% sales WoW\', source: \'Wholesaler Volume\' }, ], highDemand: [ { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', reason: \'Increased Rx volume\', source: \'E-Rx Trends\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', reason: \'UTI treatment spike\', source: \'Clinic Data\' }, { id: \'MEDXXX\', name: \'Salbutamol Inhalers\', reason: \'Allergy season onset\', source: \'AI Model\' }, ], stockOuts: [ { id: \'MED005\', name: \'Cough Syrup XYZ\', supplier: \'MediSupply\', note: \'ETA 3 days\', status: \'Out of Stock\', source: \'Wholesaler Feed\' }, { id: \'MEDXYZ\', name: \'Salbutamol Inhaler\', supplier: \'PharmaDistro\', note: \'Manufacturing delay\', status: \'Out of Stock\', source: \'Supplier Comms\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', supplier: \'PharmaDistro\', note: \'Multiple low levels\', status: \'Low Stock\', source: \'Aggregated Inventory\' }, ], priceAlerts: [ { id: \'MED008\', name: \'Metformin 500mg\', change: \'+5% supplier price\', note: \'Effective next cycle\', source: \'PharmaDistro Update\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', change: \'-3% promotion\', note: \'Limited time offer\', source: \'Supplier Bulletin\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', change: \'+8% import cost\', note: \'FX fluctuation\', source: \'Import Agent\' }, ], newlyRegistered: [ { id: \'MED101\', name: \'Generic Lisinopril 5mg\', supplier: \'NewGen Pharma\', date: \'2025-04-15\', source: \'MCAZ Registry\' }, { id: \'MED102\', name: \'Adv. Allergy Spray\', supplier: \'HealthWell\', date: \'2025-04-10\', source: \'MCAZ Registry\' }, ], recentlyImported: [ { id: \'MEDIMP01\', name: \'Vaccine Batch X\', source: \'WHO\', arrival: \'2025-04-20\', distributor: \'Govt Stores\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', source: \'EU Supplier\', arrival: \'2025-04-18\', distributor: \'PharmaDistro\' }, ], aiInsights: [ "AI Trend: Potential shortage of pediatric Paracetamol Syrup expected in 2 weeks based on consumption & low regional stock. Check inventory.", "Demand Forecast: 30%+ increase predicted for allergy meds next month (pollen). Consider early stocking.", "Opportunity: Promote Vitamin D based on seasonal patterns & low recent sales velocity.", "Pricing Anomaly: Ciprofloxacin wholesale price shows higher variance. Cross-check quotes.", ], };\r\n        const MOCK_ADVERTS = [ { id: \'AD001\', title: \'Bonvie Pharmacy: Flu Shots Available Now!\', imageUrl: \'https://placehold.co/300x100/d8b4fe/581c87?text=Bonvie+Flu+Shots\', link: \'#\', approvedBy: \'MCAZ Ref: AD/FLU/25/001\', type: \'Pharmacy Promotion\' }, { id: \'AD002\', title: \'MediSupply: Reliable Partner for Bulk Orders\', imageUrl: \'https://placehold.co/300x100/fecaca/991b1b?text=MediSupply+Wholesale\', link: \'#\', approvedBy: \'MCAZ Ref: AD/WS/25/003\', type: \'Wholesaler Service\' }, { id: \'AD003\', title: \'Stay Healthy with BrandX Vitamins\', imageUrl: \'https://placehold.co/300x100/a7f3d0/14532d?text=BrandX+Vitamins\', link: \'#\', approvedBy: \'MCAZ Ref: AD/PROD/25/015\', type: \'Product Promotion\' }, ];\r\n        const MOCK_WELLNESS_ACTIVITIES = [ { id: \'ACT001\', name: \'5-a-side Soccer\', day: \'Monday\', time: \'18:00\', location: \'Field A\', slots: 3, booked: false, icon: \'⚽\' }, { id: \'ACT002\', name: \'Yoga Class\', day: \'Tuesday\', time: \'07:00\', location: \'Studio 1\', slots: 5, booked: false, icon: \'🧘\' }, { id: \'ACT003\', name: \'Basketball Pickup\', day: \'Tuesday\', time: \'19:00\', location: \'Court 1\', slots: 8, booked: false, icon: \'🏀\' }, { id: \'ACT004\', name: \'Tennis Singles\', day: \'Wednesday\', time: \'10:00\', location: \'Court 2\', slots: 1, booked: true, icon: \'🎾\' }, { id: \'ACT005\', name: \'Health Walk\', day: \'Thursday\', time: \'06:30\', location: \'Park Entrance\', slots: 15, booked: false, icon: \'🚶\u200d♀️\' }, { id: \'ACT006\', name: \'Zumba Fitness\', day: \'Friday\', time: \'17:30\', location: \'Studio 2\', slots: 0, booked: false, icon: \'💃\' }, { id: \'ACT007\', name: \'Diabetes Support\', day: \'Wednesday\', time: \'14:00\', location: \'Room 1\', slots: 10, booked: false, icon: \'💬\' }, { id: \'ACT008\', name: \'Healthy Cooking\', day: \'Thursday\', time: \'12:00\', location: \'Demo Kitchen\', slots: 6, booked: false, icon: \'🧑\u200d🍳\' }, ];\r\n        const MOCK_BLOG_POSTS = [ { id: \'BLOG001\', title: \'Seasonal Allergies in Zim\', date: \'2025-04-20\', author: \'Dr. Musasa\', snippet: \'Manage symptoms with local tips...\', imageUrl: \'https://placehold.co/300x150/a7f3d0/14532d?text=Allergies\', category: \'General Health\' }, { id: \'BLOG002\', title: \'Importance of Hydration\', date: \'2025-04-15\', author: \'Wellness Team\', snippet: \'Crucial for health in warmer climates...\', imageUrl: \'https://placehold.co/300x150/bfdbfe/1e40af?text=Hydration\', category: \'Lifestyle\' }, { id: \'BLOG003\', title: \'Simple Home Exercises\', date: \'2025-04-10\', author: \'Coach Themba\', snippet: \'Stay active without leaving home...\', imageUrl: \'https://placehold.co/300x150/fecaca/991b1b?text=Home+Exercise\', category: \'Fitness\' }, { id: \'BLOG004\', title: \'Healthy Eating on Budget\', date: \'2025-04-05\', author: \'Nutritionist N.\', snippet: \'Affordable & nutritious local options...\', imageUrl: \'https://placehold.co/300x150/fed7aa/9a3412?text=Healthy+Eating\', category: \'Nutrition\' }, { id: \'BLOG005\', title: \'Managing Type 2 Diabetes\', date: \'2025-04-22\', author: \'Diabetes Educator\', snippet: \'Lifestyle changes are vital...\', imageUrl: \'https://placehold.co/300x150/fde68a/ca8a04?text=Diabetes+Mgmt\', category: \'Diabetes\' }, { id: \'BLOG006\', title: \'Managing High Blood Pressure\', date: \'2025-04-18\', author: \'Dr. Chen\', snippet: \'Learn risks & management steps...\', imageUrl: \'https://placehold.co/300x150/fda4af/be123c?text=Hypertension\', category: \'Heart Health\' }, ];\r\n\r\n        // --- UI Components ---\r\n        const Button = ({ children, variant = \'default\', size = \'default\', className = \'\', disabled, ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"; const variants = { default: "bg-blue-600 text-white hover:bg-blue-700/90", destructive: "bg-red-600 text-white hover:bg-red-700/90", outline: "border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-900", secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200/80", ghost: "hover:bg-gray-100 hover:text-gray-900", link: "text-blue-600 underline-offset-4 hover:underline", success: "bg-green-600 text-white hover:bg-green-700/90", warning: "bg-yellow-400 text-yellow-900 hover:bg-yellow-500/90", }; const sizes = { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }; const variantStyle = variants[variant] || variants.default; return <button disabled={disabled} className={`${baseStyle} ${variantStyle} ${sizes[size]} ${className}`} {...props}>{children}</button>; };\r\n        const Card = ({ children, className = \'\', ...props }) => ( <div className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`} {...props}>{children}</div> );\r\n        const CardHeader = ({ children, className = \'\', ...props }) => <div className={`flex flex-col space-y-1.5 p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardTitle = ({ children, className = \'\', ...props }) => <h3 className={`text-lg md:text-xl font-semibold leading-none tracking-tight ${className}`} {...props}>{children}</h3>;\r\n        const CardDescription = ({ children, className = \'\', ...props }) => <p className={`text-sm text-gray-500 ${className}`} {...props}>{children}</p>;\r\n        const CardContent = ({ children, className = \'\', ...props }) => <div className={`p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardFooter = ({ children, className = \'\', ...props }) => <div className={`flex items-center p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const Table = ({ children, className = \'\', ...props }) => <div className="w-full overflow-auto"><table className={`w-full caption-bottom text-sm ${className}`} {...props}>{children}</table></div>;\r\n        const TableHeader = ({ children, className = \'\', ...props }) => <thead className={`[&_tr]:border-b bg-gray-50 ${className}`} {...props}>{children}</thead>;\r\n        const TableBody = ({ children, className = \'\', ...props }) => <tbody className={`[&_tr:last-child]:border-0 divide-y divide-gray-200 ${className}`} {...props}>{children}</tbody>;\r\n        const TableFooter = ({ children, className = \'\', ...props }) => <tfoot className={`border-t bg-gray-100/50 font-medium ${className}`} {...props}>{children}</tfoot>;\r\n        const TableRow = ({ children, className = \'\', ...props }) => <tr className={`border-b border-gray-200 transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-blue-50 ${className}`} {...props}>{children}</tr>;\r\n        const TableHead = ({ children, className = \'\', ...props }) => <th className={`h-12 px-4 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>{children}</th>;\r\n        const TableCell = ({ children, className = \'\', ...props }) => <td className={`p-4 align-middle ${className}`} {...props}>{children}</td>;\r\n        const TableCaption = ({ children, className = \'\', ...props }) => <caption className={`mt-4 text-sm text-gray-500 ${className}`} {...props}>{children}</caption>;\r\n        const Input = ({ className = \'\', type = \'text\', ...props }) => ( <input type={type} className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Select = ({ children, className = \'\', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 appearance-none pr-8 bg-no-repeat bg-right bg-[url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="%236b7280" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/></svg>\')] ${className}`} {...props}> {children} </select> );\r\n        const SelectItem = ({ children, value, ...props }) => <option value={value} {...props}>{children}</option>;\r\n        const Badge = ({ children, variant = \'default\', className = \'\', ...props }) => { const baseStyle = "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"; const variants = { default: "border-transparent bg-blue-600 text-blue-50", secondary: "border-transparent bg-gray-200 text-gray-800", destructive: "border-transparent bg-red-600 text-red-50", outline: "text-gray-900 border-gray-300", success: "border-transparent bg-green-500 text-white", warning: "border-transparent bg-yellow-400 text-yellow-900", info: "border-transparent bg-sky-500 text-white", trendUp: "border-transparent bg-emerald-100 text-emerald-800", trendDown: "border-transparent bg-rose-100 text-rose-800", }; const variantStyle = variants[variant] || variants.default; return <span className={`${baseStyle} ${variantStyle} ${className}`} {...props}>{children}</span>; };\r\n        const Label = ({ children, className = \'\', ...props }) => ( <label className={`block text-sm font-medium text-gray-700 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}> {children} </label> );\r\n        const Textarea = ({ className = \'\', ...props }) => ( <textarea className={`flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Modal = ({ isOpen, onClose, title, children, maxWidth = \'lg\' }) => { if (!isOpen) return null; const widthClasses = { sm: \'max-w-sm\', md: \'max-w-md\', lg: \'max-w-lg\', xl: \'max-w-xl\', \'2xl\': \'max-w-2xl\', \'3xl\': \'max-w-3xl\', \'4xl\': \'max-w-4xl\' }; return ( <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 backdrop-blur-sm animate-fade-in" onClick={onClose}> <div className={`bg-white rounded-lg shadow-xl w-full ${widthClasses[maxWidth] || widthClasses.lg} max-h-[90vh] flex flex-col overflow-hidden transform transition-all animate-scale-in`} onClick={e => e.stopPropagation()} > <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10"> <h3 className="text-lg font-semibold text-gray-800">{title}</h3> <button onClick={onClose} className="text-gray-400 hover:text-gray-700 text-2xl leading-none p-1 rounded-full hover:bg-gray-100">&times;</button> </div> <div className="p-4 md:p-6 overflow-y-auto flex-grow"> {children} </div> </div> </div> ); };\r\n\r\n        // --- Icons ---\r\n        const ShoppingCart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="9" cy="21" r="1"/><circle cx="20" cy="21" r="1"/><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/></svg>;\r\n        const Pill = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"/><path d="m8.5 8.5 7 7"/></svg>;\r\n        const Bell = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/><path d="M13.73 21a2 2 0 0 1-3.46 0"/></svg>;\r\n        const FileText = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>;\r\n        const User = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;\r\n        const Search = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;\r\n        const PlusCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="16"/><line x1="8" x2="16" y1="12" y2="12"/></svg>;\r\n        const Filter = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;\r\n        const BarChart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="20" y2="10"/><line x1="18" x2="18" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="16"/></svg>;\r\n        const Settings = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0 2l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const UploadCloud = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M12 12v9"/><path d="m16 16-4-4-4 4"/></svg>;\r\n        const Stethoscope = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"/><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"/><circle cx="20" cy="10" r="2"/></svg>;\r\n        const Truck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>;\r\n        const Building = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><path d="M9 22v-4h6v4"/><path d="M8 6h.01"/><path d="M16 6h.01"/><path d="M12 6h.01"/><path d="M12 10h.01"/><path d="M12 14h.01"/><path d="M16 10h.01"/><path d="M16 14h.01"/><path d="M8 10h.01"/><path d="M8 14h.01"/></svg>;\r\n        const Activity = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>;\r\n        const Home = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;\r\n        const Users = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;\r\n        const MapPin = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>;\r\n        const LogIn = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/><polyline points="10 17 15 12 10 7"/><line x1="15" x2="3" y1="12" y2="12"/></svg>;\r\n        const LogOut = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>;\r\n        const HeartPulse = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.22 12H9.5l.7-1 2.1 2.1.8-1 1.9 1.9h5.27"/></svg>;\r\n        const FileSearch = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"/><path d="M14 2v6h6"/><circle cx="5" cy="14" r="3"/><path d="m9 18-1.5-1.5"/></svg>;\r\n        const FileCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="m9 15 2 2 4-4"/></svg>;\r\n        const CreditCard = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>;\r\n        const PackageCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16.19 11.26-4.19 4.19-1.53-1.53"/><path d="M22 11.16V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1.17"/><path d="m16 4 3 3H4"/><path d="M18 7.84V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12.17"/><path d="M21 10.84v.32a2 2 0 0 1-2 2H17"/><path d="M7 16h10"/></svg>;\r\n        const QrCode = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="5" height="5" x="3" y="3" rx="1"/><rect width="5" height="5" x="16" y="3" rx="1"/><rect width="5" height="5" x="3" y="16" rx="1"/><path d="M21 16h-3a2 2 0 0 0-2 2v3"/><path d="M21 21v.01"/><path d="M12 7v3a2 2 0 0 1-2 2H7"/><path d="M3 12h.01"/><path d="M12 3h.01"/><path d="M12 16v.01"/><path d="M16 12h1"/><path d="M21 12v.01"/><path d="M12 21v-1"/></svg>;\r\n        const AlertTriangle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>;\r\n        const CheckCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><path d="m9 11 3 3L22 4"/></svg>;\r\n        const XCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>;\r\n        const BookOpen = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;\r\n        const ClipboardList = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>;\r\n        const Info = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>;\r\n        const TrendingUp = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>;\r\n        const PackageX = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"/><path d="m7.5 4.27 9 5.15"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/><path d="m17 13 5 5"/><path d="m22 13-5 5"/></svg>;\r\n        const DollarSign = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;\r\n        const PackagePlus = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4a7 7 0 1 1-9 0"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><line x1="12" x2="12" y1="12" y2="22"/><polyline points="7 12 12 14.5 17 12"/><line x1="3.29" x2="12" y1="7" y2="12"/><line x1="20.71" x2="12" y1="7" y2="12"/><line x1="12" x2="12" y1="8" y2="10"/><line x1="10" x2="14" y1="9" y2="9"/></svg>;\r\n        const Cpu = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><rect width="6" height="6" x="9" y="9" rx="1"/><path d="M15 2v2"/><path d="M15 20v2"/><path d="M9 2v2"/><path d="M9 20v2"/><path d="M2 9h2"/><path d="M2 15h2"/><path d="M20 9h2"/><path d="M20 15h2"/><path d="M9 4V2"/><path d="M15 4V2"/><path d="M9 20v2"/><path d="M15 20v2"/></svg>;\r\n        const Megaphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 11 18-5v12L3 14v-3z"/><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"/></svg>;\r\n        const Eye = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const CalendarDays = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;\r\n        const Utensils = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>;\r\n        const Heart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/></svg>;\r\n        const Scale = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2"/><path d="M19 7h2"/></svg>;\r\n        const Brain = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3.06Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3.06Z"/></svg>;\r\n        const Package = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="16.5" x2="7.5" y1="9.4" y2="9.4"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27 6.96 12 12.01 20.73 6.96"/><line x1="12" x2="12" y1="22.08" y2="12"/></svg>;\r\n        const MonitorSmartphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"/><path d="M10 19v-3.96 3.15"/><path d="M7 19h5"/><rect width="6" height="10" x="16" y="12" rx="2"/></svg>;\r\n        const Receipt = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"/><path d="M8 8h8"/><path d="M8 12h8"/><path d="M10 16h4"/></svg>;\r\n        const HelpCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>;\r\n        const MessageSquare = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>;\r\n        const Fingerprint = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4"/><path d="M5 19.5A8.5 8.5 0 0 1 12 11a8.5 8.5 0 0 1 7 8.5"/><path d="M10 16.5c0 .8.7 1.5 1.5 1.5S13 17.3 13 16.5"/><path d="M16 14a1 1 0 0 1 1 1v1.5c0 .8-.7 1.5-1.5 1.5S14 17.3 14 16.5V15a1 1 0 0 1 1-1z"/><path d="M8 14a1 1 0 0 0-1 1v1.5c0 .8.7 1.5 1.5 1.5S10 17.3 10 16.5V15a1 1 0 0 0-1-1z"/><path d="M18 19.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/><path d="M6 19.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/><path d="M12 5.5c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5"/><path d="M15 8.5c0 .8-.7 1.5-1.5 1.5S12 9.3 12 8.5"/><path d="M12 11.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"/></svg>;\r\n        const TrendingDown = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>;\r\n\r\n        // --- Recharts Placeholder ---\r\n        const ResponsiveContainer = ({ children }) => <div className="w-full h-[300px] bg-gray-100 flex items-center justify-center text-gray-400 italic rounded border border-gray-200">{children}</div>;\r\n        const LineChart = ({ children, data }) => <div className="p-4">Line Chart Placeholder - Data: {data?.length} points</div>;\r\n        const BarChartComponent = ({ children, data }) => <div className="p-4">Bar Chart Placeholder - Data: {data?.length} points</div>;\r\n        const Line = (props) => null; const Bar = (props) => null; const XAxis = (props) => null; const YAxis = (props) => null; const CartesianGrid = (props) => null; const Tooltip = (props) => null; const Legend = (props) => null;\r\n\r\n        // Utility function\r\n        const getStatusBadgeVariant = (status) => { status = status?.toLowerCase() || \'\'; if (status.includes(\'complete\') || status.includes(\'paid\') || status.includes(\'in stock\') || status.includes(\'verified\') || status.includes(\'active\') || status.includes(\'claim submitted\') || status.includes(\'received\')) return \'success\'; if (status.includes(\'pending\') || status.includes(\'low stock\') || status.includes(\'expired\')) return \'warning\'; if (status.includes(\'processing\') || status.includes(\'ready\') || status.includes(\'shipped\')) return \'info\'; if (status.includes(\'reject\') || status.includes(\'cancel\') || status.includes(\'out of stock\') || status.includes(\'invalid\')) return \'destructive\'; return \'secondary\'; };\r\n        const getClaimStatusVariant = getStatusBadgeVariant;\r\n\r\n        // --- Landing Page ---\r\n        function LandingPage({ setActiveView, login, navigateTo }) { console.log("Rendering LandingPage"); return ( <div className="space-y-12"> <section className="text-center py-16 px-4 bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-lg shadow-sm"> <h1 className="text-4xl md:text-5xl font-bold text-blue-800 mb-4">Welcome to ehutano<span className="text-green-600">+</span></h1> <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">Your trusted digital partner for pharmacy services, health management, and community wellness in Zimbabwe.</p> <div className="flex flex-wrap justify-center gap-4"> <Button size="lg" onClick={() => navigateTo(\'medicineSearch\')}><Search className="mr-2 h-5 w-5" /> Find Medicines Now</Button> <Button size="lg" variant="outline" onClick={() => setActiveView(\'wellness\')}><Activity className="mr-2 h-5 w-5" /> Explore Wellness Hub</Button> </div> </section> <section className="grid md:grid-cols-3 gap-8 text-center"> <Card><CardHeader><Pill className="mx-auto h-10 w-10 text-blue-600 mb-2"/><CardTitle>Online Pharmacy</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Search, compare prices, order medicines, upload prescriptions.</p><Button variant="link" className="mt-4" onClick={() => login(\'patient\')}>Patient Login/Register</Button></CardContent></Card> <Card><CardHeader><Building className="mx-auto h-10 w-10 text-purple-600 mb-2"/><CardTitle>Pharmacy Portal</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Manage inventory, orders, market insights & analytics.</p><Button variant="link" className="mt-4" onClick={() => login(\'pharmacy\')}>Pharmacy Login/Register</Button></CardContent></Card> <Card><CardHeader><HeartPulse className="mx-auto h-10 w-10 text-green-600 mb-2"/><CardTitle>Wellness Hub</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Book events, access health resources, read wellness blog.</p><Button variant="link" className="mt-4" onClick={() => setActiveView(\'wellness\')}>Visit Wellness Hub</Button></CardContent></Card> </section> <section className="py-12 bg-gray-50 rounded-lg"> <div className="container mx-auto px-4 text-center"> <h2 className="text-3xl font-bold text-gray-800 mb-8">How ehutano+ Works</h2> <div className="grid md:grid-cols-4 gap-8"> <div className="flex flex-col items-center p-4"><div className="bg-blue-100 rounded-full p-4 mb-4"><FileSearch className="h-8 w-8 text-blue-600" /></div><h3 className="font-semibold mb-1">1. Search/Upload</h3><p className="text-sm text-gray-600">Find medicine or Rx.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-purple-100 rounded-full p-4 mb-4"><FileCheck className="h-8 w-8 text-purple-600" /></div><h3 className="font-semibold mb-1">2. Quote/Compare</h3><p className="text-sm text-gray-600">Get quote/prices.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-yellow-100 rounded-full p-4 mb-4"><CreditCard className="h-8 w-8 text-yellow-600" /></div><h3 className="font-semibold mb-1">3. Order & Pay</h3><p className="text-sm text-gray-600">Confirm & pay.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-green-100 rounded-full p-4 mb-4"><PackageCheck className="h-8 w-8 text-green-600" /></div><h3 className="font-semibold mb-1">4. Delivery/Pickup</h3><p className="text-sm text-gray-600">Receive/collect.</p></div> </div> </div> </section> <section className="py-12 bg-white border-t border-b border-gray-200"> <div className="container mx-auto px-4"> <h2 className="text-2xl font-semibold text-center text-gray-700 mb-10">Our Trusted Partners</h2> <div className="relative w-full overflow-hidden [mask-image:_linear-gradient(to_right,transparent_0,_black_128px,_black_calc(100%-128px),transparent_100%)]"> <div className="flex w-max animate-scroll hover:paused">{[...MOCK_PARTNER_LOGOS, ...MOCK_PARTNER_LOGOS].map((logo, index) => ( <div key={index} className="flex-shrink-0 mx-8 flex items-center justify-center h-16"><img src={logo.url} alt={`${logo.name} Logo`} className="max-h-full object-contain grayscale opacity-70 hover:grayscale-0 hover:opacity-100 transition-all duration-300" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/150x60/f0f0f0/c0c0c0?text=Err"; e.target.alt = `${logo.name} Err`; }}/></div> ))}</div> </div> </div> </section> <section className="text-center py-10 px-4 bg-gray-50 rounded-lg shadow-sm border"> <h2 className="text-2xl font-semibold text-gray-800 mb-4">Are you a Doctor or Wholesaler?</h2> <p className="text-gray-600 max-w-xl mx-auto mb-6">Join our network to streamline workflows and connect.</p> <div className="flex justify-center gap-4"> <Button variant="outline" onClick={() => login(\'doctor\')}><Stethoscope className="mr-2 h-4 w-4"/> Doctor Login/Register</Button> <Button variant="outline" onClick={() => login(\'wholesaler\')}><Truck className="mr-2 h-4 w-4"/> Wholesaler Login/Register</Button> </div> </section> </div> ); }\r\n\r\n        // --- Patient Portal Components ---\r\n        function PatientPortal({ setActiveView, openVerificationModal, patientData, navigateTo }) { console.log("Rendering PatientPortal"); const [currentSubView, setCurrentSubView] = useState(\'dashboard\'); const navigatePatientView = (view) => { setCurrentSubView(view); }; const renderPatientContent = () => { switch (currentSubView) { case \'search\': return <MedicineSearchListing navigatePatientView={navigatePatientView} navigateTo={navigateTo} />; case \'upload\': return <PrescriptionUpload navigatePatientView={navigatePatientView} />; case \'quotedRx\': const quoteReadyRx = patientData.prescriptions.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quoteReadyRx?.quote} navigatePatientView={navigatePatientView} />; case \'dashboard\': default: return <PatientDashboard setActiveView={setActiveView} openVerificationModal={openVerificationModal} patientData={patientData} navigatePatientView={navigatePatientView} />; } }; return ( <div className="space-y-6"> <nav className="flex space-x-1 border-b overflow-x-auto mb-6"> <Button variant={currentSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'dashboard\')} data-state={currentSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Home className="mr-1 h-4 w-4"/> Dashboard</Button> <Button variant={currentSubView === \'search\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'search\')} data-state={currentSubView === \'search\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Search className="mr-1 h-4 w-4"/> Find Medicine</Button> <Button variant={currentSubView === \'upload\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'upload\')} data-state={currentSubView === \'upload\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><UploadCloud className="mr-1 h-4 w-4"/> Upload Rx</Button> {patientData.prescriptions.some(rx => rx.isQuoteReady) && ( <Button variant={currentSubView === \'quotedRx\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'quotedRx\')} data-state={currentSubView === \'quotedRx\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent relative"> <FileCheck className="mr-1 h-4 w-4"/> View Quote <span className="absolute top-0 right-0 block h-2 w-2 rounded-full ring-1 ring-white bg-red-500"/> </Button> )} </nav> {renderPatientContent()} </div> ); }\r\n        function PatientDashboard({ setActiveView, openVerificationModal, patientData, navigatePatientView }) { const patient = patientData; const handleScan = (mockData) => { const inventoryItem = MOCK_PHARMACY_INVENTORY.find(item => item.name === mockData.medicineName); const fullVerificationData = { ...mockData, wholesaleSource: inventoryItem?.wholesaleSource || \'N/A\', manufacturer: inventoryItem?.manufacturer || \'N/A\', }; openVerificationModal(fullVerificationData); }; const handleScanValidAntibiotic = () => handleScan(MOCK_VERIFICATION_DATA_VALID); const handleScanValidNonAntibiotic = () => handleScan({ ...MOCK_VERIFICATION_DATA_VALID, isAntibiotic: false, medicineName: \'Paracetamol 500mg Tabs\' }); const handleScanInvalid = () => handleScan(MOCK_VERIFICATION_DATA_INVALID); const handleScanExpired = () => handleScan(MOCK_VERIFICATION_DATA_EXPIRED); const quoteReadyRx = patient.prescriptions.find(rx => rx.isQuoteReady); return ( <div className="space-y-6"> {quoteReadyRx && ( <Card className="bg-gradient-to-r from-green-100 to-emerald-100 border-green-300"> <CardContent className="pt-4 flex flex-col sm:flex-row items-center justify-between gap-4"> <div className="flex items-center gap-3"> <FileCheck className="h-8 w-8 text-green-700 flex-shrink-0" /> <div> <h4 className="font-semibold text-green-800">Prescription Quote Ready!</h4> <p className="text-sm text-green-700">Quote for {quoteReadyRx.id} is available.</p> </div> </div> <Button onClick={() => navigatePatientView(\'quotedRx\')} className="bg-green-600 hover:bg-green-700 mt-2 sm:mt-0 flex-shrink-0">View Quote</Button> </CardContent> </Card> )} <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'search\')}> <Search className="mr-2 h-5 w-5 text-blue-600"/> <span>Order Medicine</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'upload\')}> <UploadCloud className="mr-2 h-5 w-5 text-green-600"/> <span>Upload Rx</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={handleScanValidAntibiotic}> <QrCode className="mr-2 h-5 w-5 text-indigo-600"/> <span>Verify Meds</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => alert(\'Pholder: Appointments\')}> <Stethoscope className="mr-2 h-5 w-5 text-purple-600"/> <span>Appointments</span> </Button> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <Card> <CardHeader> <CardTitle>Recent Orders</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>ID</TableHead> <TableHead>Date</TableHead> <TableHead>Status</TableHead> <TableHead>Total</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {patient.recentOrders.map((order) => ( <TableRow key={order.id}> <TableCell className="font-medium">{order.id}</TableCell> <TableCell>{order.date}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell>{order.total}</TableCell> <TableCell><Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View order ${order.id}`)}>View</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Orders\')}>View All Orders</Button> </CardFooter> </Card> </div> <div className="space-y-6"> <Card> <CardHeader> <CardTitle>My Prescriptions</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-60 overflow-y-auto pt-4"> {patient.prescriptions.filter(rx => !rx.isQuoteReady).map((rx) => ( <div key={rx.id} className={`text-sm p-3 rounded-lg border bg-gray-50`}> {rx.medicine ? ( <> <p className="font-semibold">{rx.medicine}</p> <p className="text-xs text-gray-600">Dr. {rx.doctor} ({rx.dateIssued})</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge> ({rx.refillsLeft} refills)</p> {rx.status === \'Active\' && rx.refillsLeft > 0 && ( <Button variant="link" size="sm" className="p-0 h-auto mt-1 text-xs" onClick={() => alert(`Pholder: Refill ${rx.medicine}`)}>Request Refill</Button> )} </> ) : ( <> <p className="font-semibold">Uploaded Rx ({rx.id})</p> <p className="text-xs text-gray-600">Uploaded: {rx.dateUploaded}</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge></p> {rx.notes && <p className="text-xs italic">Notes: "{rx.notes}"</p>} </> )} </div> ))} {patient.prescriptions.filter(rx => !rx.isQuoteReady).length === 0 && <p className="text-sm text-gray-500">No active/pending Rxs.</p>} </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Rxs\')}>View All Prescriptions</Button> </CardFooter> </Card> <Card> <CardHeader> <CardTitle>Reminders</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-48 overflow-y-auto pt-4"> {patient.reminders.map((rem) => ( <div key={rem.id} className="text-sm p-3 bg-blue-50 rounded-lg border border-blue-200 flex justify-between items-center"> <div><p className="font-semibold">{rem.type === \'Refill\' ? `Refill: ${rem.medicine}` : rem.details}</p><p className="text-xs text-gray-600">Due: {rem.dueDate}</p></div> <Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Dismiss ${rem.id}`)}>X</Button> </div> ))} {patient.reminders.length === 0 && <p className="text-sm text-gray-500">No reminders.</p>} </CardContent> </Card> </div> </div> <Card> <CardHeader> <CardTitle>Need Help?</CardTitle> </CardHeader> <CardContent className="pt-4 flex flex-wrap gap-4 justify-center"> <Button variant="outline" onClick={() => alert(\'Pholder: AI Chat\')}> <HelpCircle className="mr-2 h-4 w-4"/> Ask AI </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Live Chat\')}> <MessageSquare className="mr-2 h-4 w-4"/> Chat Pharmacist </Button> </CardContent> </Card> <Card className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200"> <CardHeader> <CardTitle className="text-green-800">Wellness Hub</CardTitle> </CardHeader> <CardContent className="pt-4 flex items-center gap-4"> <img src="https://placehold.co/100x80/a7f3d0/14532d?text=Wellness" alt="Wellness" className="rounded-lg h-20"/> <div className="flex-grow"><p className="mb-3 text-gray-700 text-sm">Book events, read articles, use tools.</p><Button onClick={() => setActiveView(\'wellness\')} className="bg-green-600 hover:bg-green-700" size="sm"> <Activity className="mr-2 h-4 w-4"/> Go to Wellness </Button></div> </CardContent> </Card> <Card className="mt-6"> <CardHeader><CardTitle>QR Scan Simulation</CardTitle></CardHeader> <CardContent className="pt-4 flex flex-wrap gap-2"> <Button variant="secondary" size="sm" onClick={handleScanValidAntibiotic}>Scan Valid ABX</Button> <Button variant="secondary" size="sm" onClick={handleScanValidNonAntibiotic}>Scan Valid Non-ABX</Button> <Button variant="destructive" size="sm" onClick={handleScanInvalid}>Scan Invalid</Button> <Button variant="warning" size="sm" onClick={handleScanExpired}>Scan Expired</Button> </CardContent> </Card> </div> ); }\r\n        function MedicineSearchListing({ navigatePatientView, navigateTo }) { const [searchTerm, setSearchTerm] = useState(\'\'); const [searchResults, setSearchResults] = useState(MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES); const handleSearch = (e) => { const term = e.target.value.toLowerCase(); setSearchTerm(e.target.value); setSearchResults( MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES.filter(med => med.name.toLowerCase().includes(term) || med.category.toLowerCase().includes(term) ) ); }; const handleAddToCart = (medId, pharmacyName, price) => { alert(`Pholder: Add ${medId} from ${pharmacyName} ($${price.toFixed(2)}) to cart.`); }; const handleViewDetails = (medId) => { alert(`Pholder: View details ${medId}.`); }; return ( <div className="space-y-6"> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /> <Input placeholder="Search medicine or category..." className="pl-12 text-base h-12" value={searchTerm} onChange={handleSearch} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {searchResults.length > 0 ? ( searchResults.map(med => ( <Card key={med.id} className="overflow-hidden flex flex-col"> <CardHeader className="flex flex-row items-start gap-4 p-4"> <img src={med.imageUrl} alt={med.name} className="w-20 h-20 object-contain rounded-md border flex-shrink-0" /> <div className="flex-grow"> <h4 className="font-semibold text-base mb-1">{med.name}</h4> <p className="text-sm text-gray-500 mb-2">{med.category}</p> {med.requiresPrescription && <Badge variant="warning">Rx</Badge>} {med.isAntibiotic && <Badge variant="destructive" className="ml-1">ABX</Badge>} </div> </CardHeader> <CardContent className="pt-0 pb-4 flex-grow flex flex-col"> <h5 className="text-sm font-medium mb-2 text-gray-700">Compare Prices:</h5> {med.pharmacies.length > 0 ? ( <div className="space-y-3"> {med.pharmacies.slice(0, 3).map(pharm => ( <div key={pharm.name} className="flex justify-between items-center p-2 bg-gray-50 rounded-md border"> <div> <span className="text-sm font-medium">{pharm.name}</span> <Badge variant={getStatusBadgeVariant(pharm.stockStatus)} className="ml-2">{pharm.stockStatus}</Badge> </div> <div className="text-right flex-shrink-0"> <p className="text-base font-semibold text-blue-700">${pharm.price.toFixed(2)}</p> <Button size="sm" variant="link" className="text-xs h-auto p-0 mt-1" onClick={() => handleAddToCart(med.id, pharm.name, pharm.price)} disabled={med.requiresPrescription} > {med.requiresPrescription ? \'Requires Rx\' : \'Add to Cart\'} </Button> </div> </div> ))} {med.pharmacies.length > 3 && ( <Button variant="link" size="sm" className="w-full mt-2" onClick={() => handleViewDetails(med.id)}> View {med.pharmacies.length - 3} more... </Button> )} </div> ) : ( <p className="text-sm text-gray-500 italic">Unavailable.</p> )} </CardContent> <CardFooter className="border-t pt-3"> <Button variant="outline" onClick={() => handleViewDetails(med.id)} className="w-full" size="sm"> View Details </Button> </CardFooter> </Card> )) ) : ( <div className="col-span-full text-center py-10 text-gray-500"> <Pill className="mx-auto h-12 w-12 text-gray-400 mb-4"/> <p>No medicines found for "{searchTerm}".</p> <p className="text-sm mt-2">Try again or <button className="text-blue-600 underline" onClick={() => navigateTo ? navigateTo(\'patientPortal\') : (navigatePatientView ? navigatePatientView(\'upload\') : alert(\'Cannot navigate\')) }>upload Rx</button>.</p> </div> )} </div> </div> ); }\r\n        function PrescriptionUpload({ navigatePatientView }) { const [selectedFile, setSelectedFile] = useState(null); const [notes, setNotes] = useState(\'\'); const [isUploading, setIsUploading] = useState(false); const [uploadStatus, setUploadStatus] = useState(\'\'); const handleFileChange = (event) => { if (event.target.files && event.target.files[0]) { setSelectedFile(event.target.files[0]); setUploadStatus(\'\'); } }; const handleSubmit = async (event) => { event.preventDefault(); if (!selectedFile) { alert("Select file."); return; } setIsUploading(true); setUploadStatus(\'\'); await new Promise(resolve => setTimeout(resolve, 1500)); const isSuccess = Math.random() > 0.2; if (isSuccess) { setUploadStatus(\'success\'); setSelectedFile(null); setNotes(\'\'); } else { setUploadStatus(\'error\'); } setIsUploading(false); }; return ( <div className="space-y-6 max-w-2xl mx-auto"> <Card> <CardHeader> <CardTitle>Upload Prescription</CardTitle> <CardDescription>Submit image/PDF for review/quote.</CardDescription> </CardHeader> <form onSubmit={handleSubmit}> <CardContent className="pt-6 space-y-4"> <div> <Label htmlFor="rx-file">File (Image/PDF)</Label> <Input id="rx-file" type="file" accept="image/*,.pdf" onChange={handleFileChange} required className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/> {selectedFile && (<p className="text-sm mt-2">Selected: {selectedFile.name}</p>)} </div> <div> <Label htmlFor="notes">Notes (Optional)</Label> <Textarea id="notes" placeholder="e.g., Brand preference, urgency..." value={notes} onChange={(e) => setNotes(e.target.value)} className="mt-1"/> </div> </CardContent> <CardFooter className="flex justify-end border-t pt-4"> <Button type="submit" disabled={isUploading || !selectedFile}> {isUploading ? \'Uploading...\' : <><UploadCloud className="mr-2 h-4 w-4" /> Submit</>} </Button> </CardFooter> </form> </Card> {uploadStatus === \'success\' && ( <div className="p-4 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm mt-4"> Upload successful! Check <button className="font-bold underline" onClick={() => navigatePatientView(\'dashboard\')}>Dashboard</button> for status/quote. </div> )} {uploadStatus === \'error\' && ( <div className="p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm mt-4"> Upload failed. Try again or contact support. </div> )} </div> ); }\r\n        function QuotedPrescriptionView({ quote, navigatePatientView }) { if (!quote) { return ( <div className="space-y-6"> <Card> <CardHeader><CardTitle>Prescription Quote</CardTitle></CardHeader> <CardContent className="pt-6 text-center text-gray-500"> No quote available. Check <button className="text-blue-600 underline" onClick={() => navigatePatientView(\'dashboard\')}>dashboard</button>. </CardContent> </Card> </div> ); } const handleAddToCart = () => { alert(`Pholder: Add quote ($${quote.total.toFixed(2)}) to cart.`); }; const handlePayment = (method) => { if (method === \'medicalAid\') { const useBio = window.confirm("Simulate MA Payment:\\nUse Biometrics?"); if (useBio) { alert("Place finger... (Sim)"); setTimeout(() => { const ok = Math.random() > 0.1; alert(ok ? "Biometric OK! Processing..." : "Biometric Failed."); if(ok){ /* TODO: Update order */ } }, 1500); } else { const pin = prompt("Enter MA PIN (Sim):"); if (pin) { alert("PIN OK. Processing..."); /* TODO: Update order */ } else { alert("PIN cancelled."); } } } else { alert(`Pholder: Proceed to ${method} ($${quote.total.toFixed(2)})...`); } }; return ( <div className="space-y-6"> <Card> <CardHeader> <CardTitle>Your Prescription Quote</CardTitle> <CardDescription>Review items & checkout.</CardDescription> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="text-center">Qty</TableHead> <TableHead className="text-right">Price</TableHead> <TableHead className="text-right">Subtotal</TableHead> </TableRow> </TableHeader> <TableBody> {quote.items.map((item, index) => ( <TableRow key={index}> <TableCell className="font-medium">{item.name}</TableCell> <TableCell className="text-center">{item.qty}</TableCell> <TableCell className="text-right">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right">${(item.qty * item.price).toFixed(2)}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3} className="text-right font-semibold text-base">Total:</TableCell> <TableCell className="text-right font-bold text-lg">${quote.total.toFixed(2)}</TableCell> </TableRow> </TableFooter> </Table> </CardContent> <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4 border-t pt-6"> <Button variant="outline" onClick={handleAddToCart}> <ShoppingCart className="mr-2 h-4 w-4"/> Add to Cart </Button> <div className="flex flex-wrap gap-2"> <Button onClick={() => handlePayment(\'medicalAid\')} className="bg-green-600 hover:bg-green-700"> <Fingerprint className="mr-2 h-4 w-4" /> Pay with MA </Button> <Button onClick={() => handlePayment(\'EcoCash\')}> Pay EcoCash </Button> <Button onClick={() => handlePayment(\'Other\')} variant="secondary"> Other </Button> </div> </CardFooter> </Card> </div> ); }\r\n        function MedicineVerificationModal({ isOpen, onClose, verificationData }) { if (!verificationData) return null; const { status, message, medicineName, batchNumber, expiryDate, pharmacySource, wholesaleSource, manufacturer, isAntibiotic } = verificationData; let statusIcon, statusColorClass, title, bgColorClass = "bg-white"; switch (status) { case \'verified\': statusIcon = <CheckCircle className="h-12 w-12 text-green-500" />; statusColorClass = "text-green-700"; title = "Verified"; bgColorClass = "bg-green-50"; break; case \'invalid\': statusIcon = <XCircle className="h-12 w-12 text-red-500" />; statusColorClass = "text-red-700"; title = "FAILED"; bgColorClass = "bg-red-50"; break; case \'expired\': statusIcon = <AlertTriangle className="h-12 w-12 text-yellow-500" />; statusColorClass = "text-yellow-700"; title = "EXPIRED"; bgColorClass = "bg-yellow-50"; break; default: statusIcon = <Info className="h-12 w-12 text-gray-500" />; statusColorClass = "text-gray-700"; title = "Info"; } return ( <Modal isOpen={isOpen} onClose={onClose} title={title} maxWidth="md"> <div className={`flex flex-col items-center text-center space-y-4 p-6 rounded-lg ${bgColorClass}`}> {statusIcon} <p className={`font-semibold text-lg ${statusColorClass}`}>{message}</p> {(status === \'verified\' || status === \'expired\') && ( <Card className="w-full mt-4 text-left bg-white shadow-md"> <CardHeader><CardTitle className="text-base">Details</CardTitle></CardHeader> <CardContent className="space-y-1 text-sm pt-2"> <div className="grid grid-cols-3 gap-x-2 gap-y-1"> <span className="font-medium text-gray-500">Med:</span> <span className="col-span-2 font-medium">{medicineName || \'N/A\'}</span> <span className="font-medium text-gray-500">Batch:</span> <span className="col-span-2 font-mono">{batchNumber || \'N/A\'}</span> <span className="font-medium text-gray-500">Expiry:</span> <span className={`col-span-2 ${status === \'expired\' ? \'text-red-600 font-bold\' : \'\'}`}>{expiryDate || \'N/A\'}</span> <span className="font-medium text-gray-500">Manuf:</span> <span className="col-span-2">{manufacturer || \'N/A\'}</span> <span className="font-medium text-gray-500">Whsle:</span> <span className="col-span-2">{wholesaleSource || \'N/A\'}</span> <span className="font-medium text-gray-500">Pharm:</span> <span className="col-span-2">{pharmacySource || \'N/A\'}</span> </div> </CardContent> </Card> )} {status === \'verified\' && isAntibiotic && ( <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 text-yellow-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>ABX Alert:</strong> Use only as prescribed.</span> </div> )} {status === \'invalid\' && ( <div className="mt-4 p-3 bg-red-100 border border-red-300 text-red-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>Action:</strong> Do not use. Report!</span> </div> )} <Button onClick={onClose} className="mt-6" variant={status === \'invalid\' ? \'destructive\' : \'default\'}>Close</Button> </div> </Modal> ); }\r\n\r\n        // --- Pharmacy Portal & Sub-Components ---\r\n        function PharmacyPortal({ setActiveView, openVerificationModal, patientData }) {\r\n            console.log("Rendering PharmacyPortal Component");\r\n            const [pharmacySubView, setPharmacySubView] = useState(\'orders\');\r\n            const [isDispensingModalOpen, setDispensingModalOpen] = useState(false);\r\n            const [isOrderDetailsModalOpen, setOrderDetailsModalOpen] = useState(false);\r\n            const [selectedOrderForModal, setSelectedOrderForModal] = useState(null);\r\n            const [orders, setOrders] = useState(() => {\r\n                 console.log("Initializing PharmacyPortal \'orders\' state with MOCK_PHARMACY_ORDERS.");\r\n                 return JSON.parse(JSON.stringify(MOCK_PHARMACY_ORDERS));\r\n            });\r\n\r\n            const updateOrderStatus = (orderId, newStatus) => {\r\n                console.log(`(updateOrderStatus) called for ID: ${orderId}, New Status: ${newStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current status: ${order.status}. Updating to ${newStatus}.`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(order.medicalAidStatus)); return { ...order, status: newStatus, requiresAction }; } return order; })); };\r\n\r\n            const updateOrderAndMAStatus = (orderId, newOrderStatus, newMAStatus) => {\r\n                console.log(`(updateOrderAndMAStatus) called for ID: ${orderId}. New Order Status: ${newOrderStatus}, New MA Status: ${newMAStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current: Status=${order.status}, MA=${order.medicalAidStatus}.`); const updatedStatus = newOrderStatus ?? order.status; const updatedMAStatus = newMAStatus ?? order.medicalAidStatus; const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(updatedStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(updatedMAStatus)); console.log(` -> Updated state: Status=${updatedStatus}, MA=${updatedMAStatus}, RequiresAction=${requiresAction}`); return { ...order, status: updatedStatus, medicalAidStatus: updatedMAStatus, requiresAction }; } return order; })); };\r\n\r\n            const openDispensingModal = () => setDispensingModalOpen(true);\r\n            const closeDispensingModal = () => setDispensingModalOpen(false);\r\n            const openOrderDetailsModalHandler = (order) => { console.log("Opening Order Details Modal for order:", order); setSelectedOrderForModal(order); setOrderDetailsModalOpen(true); };\r\n            const closeOrderDetailsModalHandler = () => { console.log("Closing Order Details Modal"); setOrderDetailsModalOpen(false); setSelectedOrderForModal(null); };\r\n\r\n            const renderSubView = () => {\r\n                 console.log("Rendering Pharmacy SubView:", pharmacySubView);\r\n                 // Wrap sub-view rendering in try-catch for better error isolation\r\n                 try {\r\n                     switch(pharmacySubView) {\r\n                        case \'inventory\':\r\n                            console.log(" -> Attempting to render PharmacyInventory...");\r\n                            return <PharmacyInventory />; // The component we are debugging\r\n                        case \'orders\': return <OrderManagementView orders={orders} updateOrderStatus={updateOrderStatus} openOrderDetailsModal={openOrderDetailsModalHandler} />;\r\n                        case \'marketWatch\': return <MarketWatchView />;\r\n                        case \'analytics\': return <PharmacyAnalytics />;\r\n                        case \'claims\': return <MedicalAidClaimsView orders={orders} />;\r\n                        default: console.warn(`Unknown pharmacySubView: ${pharmacySubView}.`); return <div className="text-center p-8 text-gray-500">Select a view from the tabs above.</div>;\r\n                     }\r\n                 } catch (error) {\r\n                     console.error(`Error rendering pharmacy subview "${pharmacySubView}":`, error);\r\n                     // Display error prominently if sub-view fails\r\n                     return (\r\n                        <div className="text-center p-8 text-red-600 bg-red-50 border border-red-300 rounded-md">\r\n                             <h3 className="text-lg font-semibold mb-2">Error Loading \'{pharmacySubView}\' View</h3>\r\n                             <p>There was a problem rendering this section.</p>\r\n                             <p className="text-sm mt-2">Please check the browser console (F12) for technical details.</p>\r\n                             <pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || error.message}</pre>\r\n                         </div>\r\n                    );\r\n                 }\r\n            };\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <nav className="flex space-x-1 border-b overflow-x-auto">\r\n                        <Button variant={pharmacySubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'orders\')} data-state={pharmacySubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button>\r\n                        <Button variant=\'ghost\' onClick={openDispensingModal} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Pill className="mr-2 h-4 w-4" /> Dispense</Button>\r\n                        <Button variant={pharmacySubView === \'inventory\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'inventory\')} data-state={pharmacySubView === \'inventory\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Package className="mr-2 h-4 w-4" /> Inventory</Button>\r\n                        <Button variant={pharmacySubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'marketWatch\')} data-state={pharmacySubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button>\r\n                        <Button variant={pharmacySubView === \'analytics\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'analytics\')} data-state={pharmacySubView === \'analytics\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BarChart className="mr-2 h-4 w-4" /> Analytics</Button>\r\n                        <Button variant={pharmacySubView === \'claims\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'claims\')} data-state={pharmacySubView === \'claims\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CreditCard className="mr-2 h-4 w-4" /> Claims</Button>\r\n                        <Button variant=\'ghost\' onClick={() => alert(\'Pholder: Walk-in Quote\')} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4" /> Quote Walk-in</Button>\r\n                    </nav>\r\n                    <div className="pt-6">\r\n                       {renderSubView()}\r\n                    </div>\r\n                    <DispensingModal isOpen={isDispensingModalOpen} onClose={closeDispensingModal} />\r\n                    <OrderDetailsModal isOpen={isOrderDetailsModalOpen} onClose={closeOrderDetailsModalHandler} order={selectedOrderForModal} updateOrderAndMAStatusCallback={updateOrderAndMAStatus} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function PharmacyInventory() {\r\n            console.log("PharmacyInventory: Component rendering started.");\r\n            const [inventory, setInventory] = useState(MOCK_PHARMACY_INVENTORY);\r\n            const [searchTerm, setSearchTerm] = useState(\'\');\r\n            const [filterCategory, setFilterCategory] = useState(\'all\');\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            console.log("PharmacyInventory: State initialized.");\r\n\r\n            const filteredInventory = useMemo(() => {\r\n                console.log("PharmacyInventory: Calculating filteredInventory memo...");\r\n                try {\r\n                    return inventory.filter(item => {\r\n                        // Added robust checks for potential null/undefined values\r\n                        const term = searchTerm.toLowerCase();\r\n                        const nameMatch = item && item.name && typeof item.name.toLowerCase === \'function\' ? item.name.toLowerCase().includes(term) : false;\r\n                        const idMatch = item && item.id && typeof item.id.toLowerCase === \'function\' ? item.id.toLowerCase().includes(term) : false;\r\n                        const categoryMatch = item && item.category && typeof item.category.toLowerCase === \'function\' ? item.category.toLowerCase().includes(term) : false;\r\n                        const matchesSearch = nameMatch || idMatch || categoryMatch;\r\n\r\n                        const matchesCategory = filterCategory === \'all\' || (item && item.category === filterCategory);\r\n                        const matchesStatus = filterStatus === \'all\' || (item && item.status === filterStatus);\r\n                        return matchesSearch && matchesCategory && matchesStatus;\r\n                    });\r\n                } catch(error) {\r\n                    console.error("PharmacyInventory: Error during filtering:", error);\r\n                    return []; // Return empty array on error\r\n                }\r\n            }, [inventory, searchTerm, filterCategory, filterStatus]);\r\n\r\n            const categories = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating categories memo...");\r\n                 try {\r\n                    const uniqueCategories = new Set(inventory.map(item => item?.category).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueCategories)].sort();\r\n                 } catch (error) {\r\n                    console.error("PharmacyInventory: Error calculating categories:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            const statuses = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating statuses memo...");\r\n                 try {\r\n                    const uniqueStatuses = new Set(inventory.map(item => item?.status).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueStatuses)];\r\n                 } catch(error) {\r\n                    console.error("PharmacyInventory: Error calculating statuses:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            console.log("PharmacyInventory: Memos calculated. Filtered count:", filteredInventory.length);\r\n\r\n            const handleAddItem = () => alert(\'Pholder: Add Item Modal\');\r\n            const handleEditItem = (itemId) => alert(`Pholder: Edit Modal ${itemId}`);\r\n            const handleOrderFromWholesaler = () => alert(\'Pholder: Wholesaler Order UI\');\r\n\r\n            console.log("PharmacyInventory: Preparing to return JSX.");\r\n\r\n            // Wrap the entire JSX return in a try-catch as a last resort for rendering errors\r\n            try {\r\n                return (\r\n                    <div className="space-y-6">\r\n                        {/* Header */}\r\n                        <header className="flex flex-wrap justify-between items-center pb-4 gap-4 border-b">\r\n                            <div> <h2 className="text-xl font-semibold">Inventory Management</h2> <p className="text-gray-500 text-sm">Manage stock & details.</p> </div>\r\n                            <div className="flex items-center space-x-2 flex-wrap gap-2"> <Button variant="outline" size="sm" onClick={handleOrderFromWholesaler}><Truck className="mr-2 h-4 w-4" /> Order Stock</Button> <Button size="sm" onClick={handleAddItem}><PlusCircle className="mr-2 h-4 w-4" /> Add Item</Button> </div>\r\n                        </header>\r\n                        {/* Filters */}\r\n                        <Card>\r\n                            <CardContent className="pt-6 flex flex-wrap items-center gap-4">\r\n                                <div className="relative flex-grow min-w-[200px]"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" /><Input placeholder="Search Name, ID, Category..." className="pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="cat-filter" className="sr-only">Category</Label><Select id="cat-filter" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full">{categories.map(cat => (<SelectItem key={cat} value={cat}>{cat === \'all\' ? \'All Categories\' : cat}</SelectItem>))}</Select></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="stat-filter" className="sr-only">Status</Label><Select id="stat-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* Table */}\r\n                        <Card>\r\n                            <CardHeader><CardTitle>Medicine Stock List</CardTitle></CardHeader>\r\n                            <CardContent className="pt-4">\r\n                                <Table>\r\n                                    <TableHeader><TableRow><TableHead>ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Stock</TableHead><TableHead className="text-right">Price</TableHead><TableHead>Status</TableHead><TableHead>Supplier</TableHead><TableHead>Updated</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                    <TableBody>\r\n                                        {filteredInventory.length > 0 ? (\r\n                                            filteredInventory.map((item) => (\r\n                                                item && item.id ? (\r\n                                                    <TableRow key={item.id} className={item.stock === 0 ? \'opacity-60 bg-gray-50\' : item.stock < 10 ? \'bg-yellow-50/70\' : \'\'}>\r\n                                                        <TableCell className="font-mono text-xs">{item.id}</TableCell>\r\n                                                        <TableCell className="font-medium">{item.name || \'N/A\'}</TableCell>\r\n                                                        <TableCell>{item.category || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right font-semibold">{typeof item.stock === \'number\' ? item.stock : \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right">{(typeof item.price === \'number\' ? item.price : 0).toFixed(2)}</TableCell>\r\n                                                        <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status || \'N/A\'}</Badge></TableCell>\r\n                                                        <TableCell>{item.supplier || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-xs">{item.lastUpdated || \'N/A\'}</TableCell>\r\n                                                        <TableCell><Button variant="ghost" size="sm" onClick={() => handleEditItem(item.id)}>Edit</Button></TableCell>\r\n                                                    </TableRow>\r\n                                                ) : null\r\n                                            ))\r\n                                        ) : (\r\n                                            <TableRow><TableCell colSpan={9} className="h-24 text-center text-gray-500">No inventory items match the current filters.</TableCell></TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </CardContent>\r\n                            <CardFooter className="pt-4 justify-between items-center border-t">\r\n                                <p className="text-sm text-gray-500">Showing {filteredInventory.length} of {inventory.length} items.</p>\r\n                                <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                );\r\n            } catch (error) {\r\n                console.error("PharmacyInventory: Error during JSX rendering:", error);\r\n                return <div className="p-4 text-red-600 bg-red-50 border border-red-300 rounded">Error rendering inventory table. Check console. <pre>{error.stack}</pre></div>;\r\n            }\r\n        }\r\n\r\n        function OrderManagementView({ orders, updateOrderStatus, openOrderDetailsModal }) {\r\n            console.log("Rendering OrderManagementView. Received orders prop:", orders);\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            const validOrders = Array.isArray(orders) ? orders : [];\r\n            if (!Array.isArray(orders)) { console.error("OrderManagementView received non-array \'orders\' prop:", orders); }\r\n            const statuses = useMemo(() => { if (!validOrders.length) return [\'all\']; const validStatuses = validOrders.map(order => order?.status).filter(Boolean); return [\'all\', ...new Set(validStatuses)].sort(); }, [validOrders]);\r\n            const filteredOrders = useMemo(() => { if (!validOrders.length) return []; if (filterStatus === \'all\') return validOrders; return validOrders.filter(order => order?.status === filterStatus); }, [validOrders, filterStatus]);\r\n            console.log(`OrderManagementView: Filter Status=\'${filterStatus}\', Filtered Orders Count=${filteredOrders.length}`);\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <header className="pb-4 flex flex-wrap justify-between items-center gap-4 border-b">\r\n                        <div><h2 className="text-xl font-semibold">Order Management</h2><p className="text-gray-500 text-sm">View and manage incoming patient orders.</p></div>\r\n                        <div className="flex items-center gap-2"><Label htmlFor="order-status-filter" className="text-sm">Filter by Status:</Label><Select id="order-status-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-40">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                    </header>\r\n                    <Card>\r\n                        <CardHeader><CardTitle>Incoming & Recent Orders</CardTitle></CardHeader>\r\n                        <CardContent className="pt-4">\r\n                            <Table>\r\n                                <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Patient</TableHead><TableHead>Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Total</TableHead><TableHead>Medical Aid</TableHead><TableHead>Payment</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                <TableBody>\r\n                                    {filteredOrders.length > 0 ? (\r\n                                        filteredOrders.map((order) => ( order && order.id ? ( <TableRow key={order.id} className={order.requiresAction ? \'bg-blue-50/70 hover:bg-blue-100/50\' : \'\'}>\r\n                                                    <TableCell className="font-mono text-xs">{order.id}</TableCell>\r\n                                                    <TableCell>{order.patientName || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.date || \'N/A\'}</TableCell>\r\n                                                    <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status || \'N/A\'}</Badge></TableCell>\r\n                                                    <TableCell className="text-right font-medium">${(typeof order.total === \'number\' ? order.total : 0).toFixed(2)}</TableCell>\r\n                                                    <TableCell>{order.medicalAidProvider ? (<Badge variant={getClaimStatusVariant(order.medicalAidStatus)}>{order.medicalAidStatus || \'N/A\'}</Badge>) : (<Badge variant="outline">N/A</Badge>)}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.paymentMethod || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="space-x-1 whitespace-nowrap">\r\n                                                        <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => openOrderDetailsModal(order)}>Details</Button>\r\n                                                        {order.status === \'Pending Approval\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Approve</Button>}\r\n                                                        {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Ready for Pickup\')}>Ready</Button>}\r\n                                                        {order.status === \'Ready for Pickup\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Completed\')}>Complete</Button>}\r\n                                                        {order.status === \'Pending Payment\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Mark Paid</Button> }\r\n                                                    </TableCell>\r\n                                                </TableRow> ) : null\r\n                                        ))\r\n                                    ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No orders match the selected filter.</TableCell></TableRow> )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                        <CardFooter className="pt-4 border-t justify-between items-center">\r\n                             <p className="text-sm text-gray-500">Showing {filteredOrders.length} of {validOrders.length} orders.</p>\r\n                             <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        function OrderDetailsModal({ isOpen, onClose, order, updateOrderAndMAStatusCallback }) {\r\n            const [internalOrderData, setInternalOrderData] = useState(null);\r\n            useEffect(() => { console.log("OrderDetailsModal Effect: Received order prop:", order); if (order && (!internalOrderData || internalOrderData.id !== order.id)) { console.log(` -> Updating internal state for order ID: ${order.id}`); setInternalOrderData({ ...order }); } else if (!order && internalOrderData) { console.log(" -> Clearing internal state as order prop is null/undefined."); setInternalOrderData(null); } }, [order]);\r\n            if (!isOpen || !internalOrderData) { return null; }\r\n            const { id, patientName, date, status, total, items, medicalAidStatus, amountCovered, medicalAidProvider, paymentMethod } = internalOrderData;\r\n            console.log(`OrderDetailsModal Rendering content for Order ID: ${id}`);\r\n            const showClaimButton = medicalAidProvider && (medicalAidStatus === \'Received\' || medicalAidStatus === \'Pending Patient Auth\');\r\n            const showMarkPaidButton = status === \'Pending Payment\';\r\n            const showApproveButton = status === \'Pending Approval\';\r\n            const showReadyButton = status === \'Processing\';\r\n            const showCompleteButton = status === \'Ready for Pickup\' || status === \'Out for Delivery\';\r\n            const handleClaimSubmit = () => { const newMAStatus = \'Claim Submitted\'; console.log(`Modal action: Submitting claim for ${id}, setting MA status to ${newMAStatus}`); setInternalOrderData(prev => prev ? { ...prev, medicalAidStatus: newMAStatus, requiresAction: false } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, null, newMAStatus); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Claim Submitted for ${id}`); };\r\n            const handleStatusUpdate = (newStatus) => { console.log(`Modal action: Updating status for ${id} to ${newStatus}`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(medicalAidStatus)); setInternalOrderData(prev => prev ? { ...prev, status: newStatus, requiresAction } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, newStatus, null); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Order ${id} updated to ${newStatus}.`); };\r\n            const orderItems = Array.isArray(items) ? items : [];\r\n\r\n            return (\r\n                <Modal isOpen={isOpen} onClose={onClose} title={`Order Details: ${id}`} maxWidth="xl">\r\n                    <div className="space-y-4">\r\n                        <Card><CardHeader><CardTitle className="text-base">Order Information</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Patient:</span> <span className="font-medium">{patientName || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Date:</span> <span>{date || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Status:</span> <span><Badge variant={getStatusBadgeVariant(status)}>{status || \'N/A\'}</Badge></span></div><div><span className="text-gray-500 mr-2">Total:</span> <span className="font-semibold">${(typeof total === \'number\' ? total : 0).toFixed(2)}</span></div><div><span className="text-gray-500 mr-2">Payment Method:</span> <span>{paymentMethod || \'N/A\'}</span></div></CardContent></Card>\r\n                        <Card><CardHeader><CardTitle className="text-base">Items in Order</CardTitle></CardHeader><CardContent className="pt-4">{orderItems.length > 0 ? (<ul className="space-y-1 text-sm">{orderItems.map((item, index) => ( <li key={item.id || index} className="flex justify-between border-b py-1 last:border-0"><span>{item.qty || 0} x {item.name || \'Unknown Item\'}</span></li> ))}</ul>) : (<p className="text-sm text-gray-500 italic">No items listed for this order.</p>)}</CardContent></Card>\r\n                        {medicalAidProvider && ( <Card><CardHeader><CardTitle className="text-base">Medical Aid Details</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Provider:</span> <span>{medicalAidProvider}</span></div><div><span className="text-gray-500 mr-2">Claim Status:</span> <Badge variant={getClaimStatusVariant(medicalAidStatus)}>{medicalAidStatus || \'N/A\'}</Badge></div><div><span className="text-gray-500 mr-2">Amount Covered:</span> <span className="font-semibold">${(typeof amountCovered === \'number\' ? amountCovered : 0).toFixed(2)}</span></div>{showClaimButton && ( <div className="md:col-span-2 mt-2"><Button onClick={handleClaimSubmit} size="sm" variant="success"><FileCheck className="mr-2 h-4 w-4" /> Submit Claim Now</Button></div> )}</CardContent></Card> )}\r\n                        <div className="flex flex-wrap justify-between items-center gap-3 border-t pt-4 mt-4">\r\n                            <div className="flex flex-wrap gap-2">{showApproveButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm">Approve Order</Button>}{showReadyButton && <Button onClick={() => handleStatusUpdate(\'Ready for Pickup\')} size="sm">Mark Ready for Pickup</Button>}{showCompleteButton && <Button onClick={() => handleStatusUpdate(\'Completed\')} size="sm" variant="success">Mark as Completed</Button>}{showMarkPaidButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm" variant="success">Mark as Paid</Button> }</div>\r\n                            <Button variant="outline" onClick={onClose}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n        function DispensingModal({ isOpen, onClose }) { const [patientSearchTerm, setPatientSearchTerm] = useState(\'\'); const [selectedPatient, setSelectedPatient] = useState(null); const [medicineSearchTerm, setMedicineSearchTerm] = useState(\'\'); const [dispensingCart, setDispensingCart] = useState([]); const [inventory] = useState(MOCK_PHARMACY_INVENTORY); const handlePatientSearch = () => { const term = patientSearchTerm.toLowerCase(); const foundPatient = MOCK_PHARMACY_ORDERS.find(o => o.patientName.toLowerCase().includes(term) || o.patientId?.toLowerCase() === term); if (foundPatient) { setSelectedPatient({ id: foundPatient.patientId, name: foundPatient.patientName }); setPatientSearchTerm(\'\'); } else { setSelectedPatient(null); alert(\'Patient not found.\'); } }; const filteredInventory = useMemo(() => { if (!medicineSearchTerm) return []; return inventory.filter(item => item.name.toLowerCase().includes(medicineSearchTerm.toLowerCase()) && item.stock > 0); }, [medicineSearchTerm, inventory]); const addToCart = (medItem) => { const existingItemIndex = dispensingCart.findIndex(item => item.id === medItem.id); if (existingItemIndex > -1) { const currentQty = dispensingCart[existingItemIndex].qty; if (currentQty < medItem.stock) { setDispensingCart(prevCart => prevCart.map((item, index) => index === existingItemIndex ? { ...item, qty: item.qty + 1 } : item)); } else { alert(`Max stock (${medItem.stock}) reached for ${medItem.name}`); } } else { if (medItem.stock > 0) { setDispensingCart(prevCart => [...prevCart, { id: medItem.id, name: medItem.name, qty: 1, price: medItem.price, stock: medItem.stock }]); } else { alert(`${medItem.name} is out of stock.`); } } setMedicineSearchTerm(\'\'); }; const updateQty = (itemId, newQtyStr) => { const newQty = parseInt(newQtyStr, 10); if (isNaN(newQty)) return; const itemInCart = dispensingCart.find(item => item.id === itemId); if (!itemInCart) return; if (newQty <= 0) { setDispensingCart(prevCart => prevCart.filter(item => item.id !== itemId)); } else if (newQty <= itemInCart.stock) { setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: newQty } : item)); } else { alert(`Quantity (${newQty}) exceeds stock (${itemInCart.stock}). Maximum quantity set.`); setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: itemInCart.stock } : item)); } }; const calculateTotal = () => dispensingCart.reduce((total, item) => total + (item.qty * item.price), 0); const handleDispenseAndSendToPOS = () => { if (!selectedPatient && !window.confirm("No patient selected. Proceed as Walk-in Sale?")) return; if (dispensingCart.length === 0) { alert("Cart is empty."); return; } const patientInfo = selectedPatient || { id: \'WALK-IN\', name: \'Walk-in Customer\' }; const saleData = { patient: patientInfo, items: dispensingCart, total: calculateTotal(), timestamp: new Date().toISOString(), type: \'Dispensed\' }; console.log("-> Sending to POS:", saleData); alert(`Dispensed for ${patientInfo.name}. Total: $${saleData.total.toFixed(2)}. (Simulated POS send)`); handleReset(); onClose(); }; const handleReset = () => { setPatientSearchTerm(\'\'); setSelectedPatient(null); setMedicineSearchTerm(\'\'); setDispensingCart([]); }; return ( <Modal isOpen={isOpen} onClose={onClose} title="Dispense / Walk-in Sale" maxWidth="4xl"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[70vh]"> <div className="lg:col-span-1 space-y-4 flex flex-col"> <Card className="flex-shrink-0"> <CardHeader><CardTitle className="text-base">1. Select Patient</CardTitle></CardHeader> <CardContent className="pt-2 space-y-2"> <div className="flex gap-2 items-center"> <Input placeholder="Search Name/ID or leave blank..." value={patientSearchTerm} onChange={(e) => setPatientSearchTerm(e.target.value)}/> <Button onClick={handlePatientSearch} size="sm" variant="outline">Find</Button> </div> {selectedPatient ? ( <div className="p-2 bg-green-100 rounded text-sm font-medium text-green-800">Selected: {selectedPatient.name}</div> ) : ( <div className="p-2 bg-yellow-100 rounded text-sm text-yellow-800">Default: Walk-in Sale</div> )} </CardContent> </Card> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">2. Add Medicines</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow flex flex-col"> <Input placeholder="Search Medicine Name..." value={medicineSearchTerm} onChange={(e) => setMedicineSearchTerm(e.target.value)} className="mb-2"/> <div className="mt-1 border rounded-md overflow-y-auto flex-grow bg-gray-50 min-h-[150px]"> {medicineSearchTerm && filteredInventory.length > 0 ? ( filteredInventory.map(item => ( <div key={item.id} className="p-2 hover:bg-blue-100 cursor-pointer flex justify-between items-center border-b" onClick={() => addToCart(item)}> <span className="text-sm">{item.name} <span className="text-xs text-gray-500">(Stock: {item.stock})</span></span> <span className="text-sm font-semibold">${item.price.toFixed(2)}</span> </div> )) ) : medicineSearchTerm ? ( <p className="text-sm text-red-500 p-4 text-center italic">No matching medicine found in stock.</p> ) : ( <p className="text-sm text-gray-400 p-4 text-center italic">Type above to search medicines...</p> )} </div> </CardContent> </Card> </div> <div className="lg:col-span-2 space-y-4 flex flex-col"> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">3. Review Cart</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow overflow-y-auto"> {dispensingCart.length > 0 ? ( <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="w-24 text-center">Qty</TableHead> <TableHead className="w-20 text-right">Price</TableHead> <TableHead className="w-24 text-right">Subtotal</TableHead> <TableHead className="w-10 text-center">Rem</TableHead> </TableRow> </TableHeader> <TableBody> {dispensingCart.map(item => ( <TableRow key={item.id}> <TableCell className="text-sm">{item.name}</TableCell> <TableCell> <Input type="number" min="1" max={item.stock} value={item.qty} onChange={(e) => updateQty(item.id, e.target.value)} className="h-8 w-16 text-center p-1"/> </TableCell> <TableCell className="text-right text-sm">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right text-sm font-medium">${(item.qty * item.price).toFixed(2)}</TableCell> <TableCell className="text-center"> <button onClick={() => updateQty(item.id, 0)} className="text-red-500 hover:text-red-700 p-1 font-bold" title="Remove">&times;</button> </TableCell> </TableRow> ))} </TableBody> </Table> ) : ( <p className="text-center text-gray-500 py-10 italic">Cart is currently empty. Add medicines from the left.</p> )} </CardContent> {dispensingCart.length > 0 && ( <CardFooter className="border-t pt-3 flex justify-end items-center"> <span className="text-sm font-semibold mr-2">Total Amount:</span> <span className="font-bold text-xl text-blue-700">${calculateTotal().toFixed(2)}</span> </CardFooter> )} </Card> <div className="flex justify-between gap-3 pt-4 border-t flex-shrink-0"> <Button variant="outline" onClick={handleReset}>Clear Cart</Button> <div className="flex gap-3"> <Button variant="secondary" onClick={onClose}>Cancel</Button> <Button onClick={handleDispenseAndSendToPOS} disabled={dispensingCart.length === 0}> <MonitorSmartphone className="mr-2 h-4 w-4" /> Dispense & Send to POS </Button> </div> </div> </div> </div> </Modal> ); }\r\n        function PharmacyAnalytics() { return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Analytics & Reports</h2> <p className="text-gray-500 text-sm">Performance insights.</p> </header> <Card> <CardHeader><CardTitle>Key Performance Indicators (KPIs)</CardTitle></CardHeader> <CardContent className="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Sales (Today)</p><p className="text-2xl font-bold text-blue-800">$1,234</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Orders (Today)</p><p className="text-2xl font-bold text-green-800">42</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Low Stock Items</p><p className="text-2xl font-bold text-yellow-900">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Low Stock\').length}</p></div> <div className="p-4 bg-red-50 rounded border border-red-200"><p className="text-xs uppercase text-red-600 font-medium">Out of Stock</p><p className="text-2xl font-bold text-red-800">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Out of Stock\').length}</p></div> </CardContent> </Card> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader><CardTitle>Monthly Sales Trend</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><BarChartComponent data={MOCK_SALES_DATA} /></ResponsiveContainer></CardContent> </Card> <Card> <CardHeader><CardTitle>Top Selling Categories</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><LineChart data={[{name:\'Pain\', v:40}, {name:\'ABX\', v:30}, {name:\'Vit\', v:25}]} /></ResponsiveContainer></CardContent> </Card> </div> <Card> <CardHeader><CardTitle>Generate Custom Reports</CardTitle></CardHeader> <CardContent className="pt-4 space-y-3"> <p className="text-sm text-gray-600">Select report type and date range to generate.</p> <div className="flex flex-wrap gap-4 items-end"> <div className="flex-grow min-w-[150px]"> <Label htmlFor="report-type">Report Type</Label> <Select id="report-type" className="mt-1"> <SelectItem value="daily_sales">Daily Sales Summary</SelectItem> <SelectItem value="monthly_sales">Monthly Sales Report</SelectItem> <SelectItem value="sales_tender">Sales by Tender Type</SelectItem> <SelectItem value="sales_user">Sales by User</SelectItem> <SelectItem value="stock_level">Current Stock Levels</SelectItem> <SelectItem value="stock_usage">Stock Usage Report</SelectItem> <SelectItem value="stock_expiry">Stock Expiry Report</SelectItem> <SelectItem value="debtors">Debtors List</SelectItem> <SelectItem value="inv_valuation">Inventory Valuation</SelectItem> </Select> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="start-date">Start Date</Label> <Input id="start-date" type="date" className="mt-1"/> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="end-date">End Date</Label> <Input id="end-date" type="date" className="mt-1"/> </div> <Button onClick={() => alert(\'Pholder: Generate selected report\')}><FileCheck className="mr-2 h-4 w-4"/> Generate Report</Button> </div> </CardContent> </Card> </div> ); }\r\n        function MedicalAidClaimsView({ orders }) { const validOrders = Array.isArray(orders) ? orders : []; const claimsData = validOrders.filter(o => o && o.medicalAidProvider).map(o => ({ id: `CLAIM-${o.id}`, orderId: o.id, patientName: o.patientName || \'N/A\', provider: o.medicalAidProvider, date: o.date || \'N/A\', amountClaimed: (typeof o.amountCovered === \'number\' ? o.amountCovered : 0), status: o.medicalAidStatus || \'N/A\', })); return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Medical Aid Claims Management</h2> <p className="text-gray-500 text-sm">Track and manage medical aid claims.</p> </header> <Card> <CardHeader><CardTitle>Claim Status Overview</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Claim ID</TableHead><TableHead>Order ID</TableHead><TableHead>Patient</TableHead> <TableHead>Provider</TableHead><TableHead>Date</TableHead> <TableHead className="text-right">Claimed Amt</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {claimsData.length > 0 ? ( claimsData.map(claim => ( <TableRow key={claim.id}> <TableCell className="font-mono text-xs">{claim.id}</TableCell><TableCell className="font-mono text-xs">{claim.orderId}</TableCell> <TableCell>{claim.patientName}</TableCell><TableCell>{claim.provider}</TableCell> <TableCell className="text-xs">{claim.date}</TableCell><TableCell className="text-right font-medium">${claim.amountClaimed.toFixed(2)}</TableCell> <TableCell><Badge variant={getClaimStatusVariant(claim.status)}>{claim.status}</Badge></TableCell> <TableCell className="space-x-1 whitespace-nowrap"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Claim Details ${claim.id}`)}>Details</Button> {claim.status === \'Received\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Submit Claim ${claim.id}`)}>Submit</Button>} {claim.status === \'Pending Patient Auth\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Request Auth ${claim.id}`)} disabled>Req. Auth</Button>} {claim.status === \'Claim Rejected\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Resubmit Claim ${claim.id}`)}>Resubmit</Button>} {claim.status === \'Claim Submitted\' && <Badge variant="info" className="ml-2">Submitted</Badge>} {claim.status === \'Paid\' && <Badge variant="success" className="ml-2">Paid</Badge>} </TableCell> </TableRow> )) ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No medical aid claims found.</TableCell></TableRow> )} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <p className="text-sm text-gray-500">Showing {claimsData.length} claims.</p> </CardFooter> </Card> <Card> <CardHeader><CardTitle>Claims Summary & Analytics</CardTitle></CardHeader> <CardContent className="pt-4 text-center italic text-gray-400"> Placeholder: Charts visualizing claims status (Pending, Submitted, Paid, Rejected), claim amounts by provider, aging analysis, etc. </CardContent> </Card> </div> ); }\r\n        function MarketWatchView() { const data = MOCK_MARKET_WATCH_DATA; const adverts = MOCK_ADVERTS; const getTrendIcon = (trendString) => { if (!trendString) return null; if (trendString.includes(\'+\') || trendString.toLowerCase().includes(\'high\') || trendString.toLowerCase().includes(\'increase\')) return <TrendingUp className="h-4 w-4 text-green-600 inline ml-1" />; if (trendString.includes(\'-\') || trendString.toLowerCase().includes(\'low\') || trendString.toLowerCase().includes(\'decrease\')) return <TrendingDown className="h-4 w-4 text-red-600 inline ml-1" />; return null; }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <div> <h2 className="text-xl font-semibold">Market Watch Insights</h2> <p className="text-gray-500 text-sm">AI-powered intelligence on market trends, demand, and stock levels.</p> </div> </header> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <Card className="lg:col-span-3 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-blue-200"> <CardHeader> <CardTitle className="flex items-center text-blue-800"><Cpu className="mr-2 h-5 w-5" /> AI-Driven Insights</CardTitle> <CardDescription>Real-time analysis and actionable recommendations.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-3"> {data.aiInsights.map((insight, index) => ( <div key={index} className="text-sm p-3 bg-white/70 rounded border border-blue-100 shadow-sm flex items-start gap-2"> <Info className="h-4 w-4 text-blue-600 mt-0.5 shrink-0"/> <div> <p className=" text-gray-800">{insight}</p> <p className="text-xs text-blue-600 mt-1 italic">Source: ehutano+ AI Engine</p> </div> </div> ))} </CardContent> </Card> <Card className="lg:col-span-2"> <CardHeader> <CardTitle className="flex items-center"><Activity className="mr-2 h-5 w-5 text-orange-600" /> Product Trends & Demand Signals</CardTitle> <CardDescription>Monitor fast-moving items, high demand, and pricing changes.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-4"> <div> <h4 className="font-semibold mb-2 flex items-center"><TrendingUp className="mr-2 h-4 w-4 text-green-600"/> Fast Moving Items</h4> {data.fastMoving.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="trendUp">{item.trend} {getTrendIcon(item.trend)}</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><Users className="mr-2 h-4 w-4 text-red-600"/> High Demand Indicators</h4> {data.highDemand.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.reason}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="warning">High Demand</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><DollarSign className="mr-2 h-4 w-4 text-indigo-600" /> Price Change Alerts</h4> {data.priceAlerts.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.note}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant={item.change.startsWith(\'+\') ? \'trendDown\' : \'trendUp\'}>{item.change} {getTrendIcon(item.change)}</Badge> </div> ))} </div> </CardContent> </Card> <Card className="lg:col-span-1 flex flex-col space-y-4"> <div> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackageX className="mr-2 h-5 w-5 text-red-600" /> Stock Alerts</CardTitle> <CardDescription>Out-of-stock & low stock items.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 max-h-48 overflow-y-auto"> {data.stockOuts.map(item => ( <div key={item.id} className={`text-sm p-2 rounded border ${getStatusBadgeVariant(item.status)===\'destructive\' ? \'bg-red-50 border-red-200\' : \'bg-yellow-50 border-yellow-200\'}`}> <p className="font-medium">{item.name} <Badge variant={getStatusBadgeVariant(item.status)}>{item.status}</Badge></p> <p className="text-xs">Supplier: {item.supplier} | {item.note}</p> <p className="text-xs italic text-gray-500">Source: {item.source}</p> </div> ))} </CardContent> </div> <div className="border-t flex-grow flex flex-col"> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackagePlus className="mr-2 h-5 w-5 text-cyan-600" /> New Market Arrivals</CardTitle> <CardDescription>Newly registered or imported.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 flex-grow overflow-y-auto"> <h5 className="text-xs font-semibold uppercase text-gray-500">Newly Registered (via MCAZ)</h5> {data.newlyRegistered.map(item => ( <div key={item.id} className="text-sm p-2 border-b"><p>{item.name}</p><p className="text-xs">Supplier: {item.supplier} (Registered: {item.date})</p></div> ))} <h5 className="text-xs font-semibold uppercase text-gray-500 pt-2 mt-2">Recently Imported</h5> {data.recentlyImported.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0"><p>{item.name}</p><p className="text-xs">Source: {item.source} | Arrived: {item.arrival}</p><p className="text-xs">Distributor: {item.distributor}</p></div> ))} </CardContent> </div> </Card> <Card className="lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center"><Megaphone className="mr-2 h-5 w-5 text-purple-600" /> Industry Adverts (MCAZ Approved)</CardTitle> <CardDescription>Approved promotions & announcements.</CardDescription> </CardHeader> <CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {adverts.map(ad => ( <a key={ad.id} href={ad.link} target="_blank" rel="noopener noreferrer" className="block group border rounded overflow-hidden hover:shadow-md bg-white transition-shadow"> <img src={ad.imageUrl} alt={ad.title} className="w-full h-24 object-cover"/> <div className="p-3"> <p className="text-sm font-medium mb-1 group-hover:text-blue-600">{ad.title}</p> <p className="text-xs text-gray-500">{ad.type}</p> <p className="text-xs text-gray-400 mt-2">Ref: {ad.approvedBy}</p> </div> </a> ))} </CardContent> </Card> </div> </div> ); }\r\n\r\n        // --- Doctor Portal ---\r\n        function DoctorPortal({ setActiveView }) { const [activeSubView, setActiveSubView] = useState(\'dashboard\'); const mockPatients = [ { id: \'PAT101\', name: \'Tendai Moyo\', lastVisit: \'2025-03-20\', condition: \'Hypertension\' }, { id: \'PAT102\', name: \'Alice Banda\', lastVisit: \'2025-04-10\', condition: \'Diabetes Type 2\' }, { id: \'PAT103\', name: \'John Doe\', lastVisit: \'2025-04-22\', condition: \'Check-up\' }, ]; const mockAppointments = [ { id: \'APP001\', time: \'09:00\', patientName: \'Jane Smith\', reason: \'Follow-up\' }, { id: \'APP002\', time: \'09:30\', patientName: \'Peter Jones\', reason: \'New Consult\' }, { id: \'APP003\', time: \'10:00\', patientName: \'Tendai Moyo\', reason: \'BP Check\' }, ]; const renderContent = () => { switch (activeSubView) { case \'patients\': return ( <Card> <CardHeader><CardTitle>Patient Records</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Patients..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Patient ID</TableHead><TableHead>Name</TableHead><TableHead>Last Visit</TableHead><TableHead>Primary Condition</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockPatients.map(p => ( <TableRow key={p.id}> <TableCell className="font-mono text-xs">{p.id}</TableCell><TableCell>{p.name}</TableCell><TableCell>{p.lastVisit}</TableCell><TableCell>{p.condition}</TableCell> <TableCell><Button variant="link" size="sm" onClick={() => alert(`Pholder: View Patient Record ${p.name}`)}>View Record</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'prescriptions\': return ( <Card> <CardHeader><CardTitle>Electronic Prescriptions (E-Rx)</CardTitle></CardHeader> <CardContent className="pt-4 space-y-4"> <Button onClick={() => alert(\'Pholder: Open New E-Rx Form Modal\')}> <PlusCircle className="mr-2 h-4 w-4"/> Create New Prescription </Button> <div><h4 className="font-medium mb-2">Recently Issued Prescriptions</h4><p className="text-sm text-gray-500">Placeholder: List of recent Rxs with status (Sent, Filled, Pending).</p></div> <img src="https://placehold.co/600x150/e0f2f7/0891b2?text=E-Rx+List+Mockup" alt="E-Rx List Placeholder" className="mt-4 rounded border"/> </CardContent> </Card> ); case \'appointments\': return ( <Card> <CardHeader><CardTitle>Today\'s Schedule</CardTitle></CardHeader> <CardContent className="pt-4"> <Table> <TableHeader><TableRow><TableHead>Time</TableHead><TableHead>Patient</TableHead><TableHead>Reason for Visit</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockAppointments.map(a => ( <TableRow key={a.id}> <TableCell>{a.time}</TableCell><TableCell>{a.patientName}</TableCell><TableCell>{a.reason}</TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Start Consultation ${a.patientName}`)}>Start Consult</Button> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Add Notes/Record ${a.patientName}`)}>Add Record</Button> </TableCell> </TableRow> ))} </TableBody> </Table> <Button variant="outline" size="sm" className="mt-4" onClick={() => alert(\'Pholder: Open Full Calendar View\')}>View Full Calendar</Button> </CardContent> </Card> ); case \'dashboard\': default: return ( <Card> <CardHeader><CardTitle>Doctor Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-blue-50" onClick={() => setActiveSubView(\'appointments\')}> <CalendarDays className="h-6 w-6 mb-1 text-blue-600"/> <span className="font-medium">Today\'s Appointments</span> <span className="text-sm text-gray-600">({mockAppointments.length} scheduled)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-green-50" onClick={() => setActiveSubView(\'prescriptions\')}> <FileText className="h-6 w-6 mb-1 text-green-600"/> <span className="font-medium">E-Prescriptions</span> <span className="text-sm text-gray-600">(Create & Manage)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-purple-50" onClick={() => setActiveSubView(\'patients\')}> <Users className="h-6 w-6 mb-1 text-purple-600"/> <span className="font-medium">Patient Records</span> <span className="text-sm text-gray-600">(View & Search)</span> </Button> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2 flex items-center"><Bell className="mr-2 h-4 w-4"/> Notifications & Tasks</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Lab result received for Alice B.</li> <li>Placeholder: Refill request from Tendai M.</li> <li>Placeholder: Message from Pharmacy re: Rx124</li> </ul> <Button variant="link" size="sm" className="mt-2">View All Notifications</Button> </div> </CardContent> </Card> ); } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl md:text-3xl font-bold">Doctor Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage patients, electronic prescriptions, and appointments efficiently.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={activeSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'dashboard\')} data-state={activeSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4"/>Dashboard</Button> <Button variant={activeSubView === \'appointments\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'appointments\')} data-state={activeSubView === \'appointments\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CalendarDays className="mr-2 h-4 w-4"/>Appointments</Button> <Button variant={activeSubView === \'patients\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'patients\')} data-state={activeSubView === \'patients\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Users className="mr-2 h-4 w-4"/>Patients</Button> <Button variant={activeSubView === \'prescriptions\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'prescriptions\')} data-state={activeSubView === \'prescriptions\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4"/>E-Rx</Button> </nav> <div className="pt-6"> {renderContent()} </div> </div> ); }\r\n\r\n        // --- Wholesaler Portal ---\r\n        function WholesalerPortal({ setActiveView }) { const [wholesalerSubView, setWholesalerSubView] = useState(\'dashboard\'); const mockWholesalerCatalog = MOCK_PHARMACY_INVENTORY.filter(i => i.wholesaleSource?.startsWith(\'MediSupply\') || i.wholesaleSource?.startsWith(\'PharmaDistro\')); const mockWholesalerOrders = [ { id: \'W-ORD-001\', pharmacyName: \'Bonvie Pharmacy\', date: \'2025-04-24\', total: 450.00, status: \'Shipped\' }, { id: \'W-ORD-002\', pharmacyName: \'City Pharmacy\', date: \'2025-04-25\', total: 1200.50, status: \'Processing\' }, { id: \'W-ORD-003\', pharmacyName: \'Pulse Pharmacy\', date: \'2025-04-25\', total: 320.00, status: \'Pending Confirmation\' }, ]; const renderWholesalerContent = () => { switch (wholesalerSubView) { case \'dashboard\': return ( <Card> <CardHeader><CardTitle>Wholesaler Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Pending Orders</p><p className="text-2xl font-bold text-blue-800">{mockWholesalerOrders.filter(o => o.status.includes(\'Pending\') || o.status === \'Processing\').length}</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Active Catalog Items</p><p className="text-2xl font-bold text-green-800">{mockWholesalerCatalog.filter(i => i.stock > 0).length}</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Items Nearing Low Stock</p><p className="text-2xl font-bold text-yellow-900">5</p></div> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2">Recent Activity</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Order W-ORD-001 shipped to Bonvie Pharmacy.</li> <li>Placeholder: New order W-ORD-003 received from Pulse Pharmacy.</li> <li>Placeholder: Stock updated for Paracetamol 500mg.</li> </ul> <Button variant="link" size="sm" className="mt-2" onClick={() => setWholesalerSubView(\'orders\')}>View All Orders</Button> </div> </CardContent> </Card> ); case \'catalog\': return ( <Card> <CardHeader className="flex flex-row justify-between items-center"> <div><CardTitle>Product Catalog Management</CardTitle></div> <Button onClick={() => alert(\'Pholder: Open Add New Product Modal\')} size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Add New Product</Button> </CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Catalog (Name, ID, Category)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Product ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Wholesale Price</TableHead><TableHead className="text-right">Available Stock</TableHead><TableHead>Stock Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerCatalog.map(item => ( <TableRow key={item.id}> <TableCell className="font-mono text-xs">{item.id}</TableCell><TableCell>{item.name}</TableCell><TableCell>{item.category}</TableCell> <TableCell className="text-right">${(item.price * 0.8).toFixed(2)}</TableCell> <TableCell className="text-right">{item.stock * 10}</TableCell> <TableCell><Badge variant={item.stock > 0 ? \'success\' : \'destructive\'}>{item.stock > 0 ? \'In Stock\' : \'Out Of Stock\'}</Badge></TableCell> <TableCell><Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Edit Product ${item.id}`)}>Edit</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'orders\': return ( <Card> <CardHeader><CardTitle>Incoming Pharmacy Orders</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Orders (ID, Pharmacy Name)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Pharmacy Customer</TableHead><TableHead>Order Date</TableHead><TableHead className="text-right">Order Total</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerOrders.map(order => ( <TableRow key={order.id} className={order.status.includes(\'Pending\') ? \'bg-yellow-50/70\' : \'\'}> <TableCell className="font-mono text-xs">{order.id}</TableCell><TableCell>{order.pharmacyName}</TableCell><TableCell className="text-xs">{order.date}</TableCell> <TableCell className="text-right font-medium">${order.total.toFixed(2)}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Order Details ${order.id}`)}>Details</Button> {order.status === \'Pending Confirmation\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Confirm Order ${order.id}`)}>Confirm</Button>} {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Mark as Shipped ${order.id}`)}>Mark Shipped</Button>} {order.status === \'Shipped\' && <Badge variant="info" className="ml-2">Shipped</Badge>} </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'marketWatch\': return <MarketWatchView />; default: return <div className="text-center p-8 text-gray-500">Select a section.</div>; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Wholesaler Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage your product catalog, process pharmacy orders, and view market insights.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={wholesalerSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'dashboard\')} data-state={wholesalerSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4" /> Dashboard</Button> <Button variant={wholesalerSubView === \'catalog\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'catalog\')} data-state={wholesalerSubView === \'catalog\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BookOpen className="mr-2 h-4 w-4" /> Catalog</Button> <Button variant={wholesalerSubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'orders\')} data-state={wholesalerSubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button> <Button variant={wholesalerSubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'marketWatch\')} data-state={wholesalerSubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button> </nav> <div className="pt-6"> {renderWholesalerContent()} </div> </div> ); }\r\n\r\n        // --- Community Wellness Hub ---\r\n        function CommunityWellnessHub({setActiveView}) { const [activeTab, setActiveTab] = useState(\'activities\'); const [activities, setActivities] = useState(MOCK_WELLNESS_ACTIVITIES); const [selectedDay, setSelectedDay] = useState(\'Monday\'); const [blogCategory, setBlogCategory] = useState(\'All\'); const handleBooking = (activityId) => { setActivities(prevActivities => prevActivities.map(act => { if (act.id === activityId && act.slots > 0 && !act.booked) { alert(`Successfully booked ${act.name}!`); return { ...act, slots: act.slots - 1, booked: true }; } else if (act.id === activityId && act.booked) { alert(`You have already booked ${act.name}.`); return act; } else if (act.id === activityId && act.slots === 0) { alert(`Sorry, ${act.name} is currently full.`); return act; } return act; }) ); }; const filteredActivities = activities.filter(act => act.day === selectedDay); const daysOfWeek = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'].filter(day => MOCK_WELLNESS_ACTIVITIES.some(a => a.day === day)); const blogCategories = [\'All\', ...new Set(MOCK_BLOG_POSTS.map(p => p.category))]; const filteredBlogPosts = blogCategory === \'All\' ? MOCK_BLOG_POSTS : MOCK_BLOG_POSTS.filter(p => p.category === blogCategory); const renderTabContent = () => { switch (activeTab) { case \'activities\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Community Activities & Event Schedule</h2> <p className="text-sm text-gray-600">Book sports sessions, fitness classes, support groups, and other wellness events.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">View Schedule For:</span> {daysOfWeek.map(day => ( <Button key={day} variant={selectedDay === day ? \'default\' : \'outline\'} size="sm" onClick={() => setSelectedDay(day)}> {day} </Button> ))} </div> <Card> <CardHeader> <CardTitle>Available Activities for {selectedDay}</CardTitle> </CardHeader> <CardContent className="pt-4 space-y-4"> {filteredActivities.length > 0 ? ( filteredActivities.map(act => ( <div key={act.id} className={`flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border rounded-lg gap-4 ${act.booked ? \'bg-green-50 border-green-200\' : act.slots === 0 ? \'bg-red-50 border-red-200 opacity-70\' : \'bg-white hover:bg-gray-50\'}`}> <div className="flex items-center gap-3 flex-grow"> <span className="text-3xl">{act.icon}</span> <div> <p className="font-semibold">{act.name}</p> <p className="text-sm text-gray-600">{act.time} @ {act.location}</p> <p className="text-xs mt-1"> {act.slots > 0 ? <span className="text-green-700">{`${act.slots} slots available`}</span> : <span className="font-medium text-red-600">Fully Booked</span>} </p> </div> </div> <Button size="sm" onClick={() => handleBooking(act.id)} disabled={act.slots === 0 || act.booked} className={`mt-2 sm:mt-0 flex-shrink-0 ${act.booked ? \'bg-green-600 hover:bg-green-700 cursor-default\' : act.slots === 0 ? \'bg-gray-400 cursor-not-allowed\' : \'bg-blue-600 hover:bg-blue-700\'}`}> {act.booked ? (<><CheckCircle className="mr-1 h-4 w-4"/> You\'re Booked</>) : (act.slots > 0 ? \'Book Your Slot\' : \'Full\')} </Button> </div> )) ) : ( <p className="text-center py-6 text-gray-500 italic">No activities scheduled for {selectedDay}.</p> )} </CardContent> </Card> </div> ); case \'blog\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Wellness Blog & Articles</h2> <p className="text-sm text-gray-600">Read the latest health tips, lifestyle advice, and expert insights.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">Filter by Category:</span> {blogCategories.map(cat => ( <Button key={cat} variant={blogCategory === cat ? \'default\' : \'outline\'} size="sm" onClick={() => setBlogCategory(cat)}> {cat} </Button> ))} </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredBlogPosts.map(post => ( <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-200"> <img src={post.imageUrl} alt={post.title} className="h-40 w-full object-cover"/> <CardHeader> <Badge variant="secondary" className="w-fit mb-2">{post.category}</Badge> <CardTitle className="text-lg">{post.title}</CardTitle> <CardDescription>By {post.author} - {post.date}</CardDescription> </CardHeader> <CardContent className="pt-2 flex-grow"> <p className="text-sm text-gray-700">{post.snippet}</p> </CardContent> <CardFooter className="pt-2 border-t"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Navigate to full blog post ${post.id}`)}>Read Full Article</Button> </CardFooter> </Card> ))} {filteredBlogPosts.length === 0 && ( <p className="md:col-span-2 lg:col-span-3 text-center py-10 text-gray-500 italic">No blog posts found in the "{blogCategory}" category.</p> )} </div> </div> ); case \'resources\': return ( <div className="space-y-8"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Health Resources & Interactive Tools</h2> <p className="text-sm text-gray-600">Access guides, calculators, and information on various health topics.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-gradient-to-br from-orange-50 to-amber-100 border border-orange-200"> <CardHeader> <CardTitle className="flex items-center text-orange-800"><Utensils className="mr-2 h-5 w-5"/> Diabetes Management</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-orange-700">Resources for managing diabetes effectively.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Downloadable Meal Plans</li> <li>Video Guide: Using Your Meter</li> <li>Article: Importance of Foot Care</li> <li>Find Local Support Groups</li> </ul> <Button size="sm" className="bg-orange-500 hover:bg-orange-600 text-white" onClick={() => alert(\'Pholder: Navigate to Diabetes Resource Page\')}>Explore Diabetes Section</Button> </CardContent> </Card> <Card className="bg-gradient-to-br from-red-50 to-rose-100 border border-red-200"> <CardHeader> <CardTitle className="flex items-center text-red-800"><Heart className="mr-2 h-5 w-5"/> Hypertension Control</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-red-700">Tips for managing high blood pressure.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Low Sodium Recipe Book (PDF)</li> <li>Audio Guide: Stress Reduction Techniques</li> <li>Interactive Blood Pressure Log Tool</li> <li>Understanding Your Readings</li> </ul> <Button size="sm" className="bg-red-500 hover:bg-red-600 text-white" onClick={() => alert(\'Pholder: Navigate to Hypertension Page\')}>View BP Management Tips</Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Scale className="mr-2 h-5 w-5"/> BMI Calculator</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Calculate your Body Mass Index.</p> <div className="flex gap-2 mt-2"> <div className="flex-1"><Label htmlFor="height-input">Height (cm)</Label><Input id="height-input" placeholder="e.g., 175" type="number"/></div> <div className="flex-1"><Label htmlFor="weight-input">Weight (kg)</Label><Input id="weight-input" placeholder="e.g., 70" type="number"/></div> </div> <Button size="sm" className="mt-3" onClick={() => alert(\'Pholder: Calculate BMI based on inputs\')}>Calculate BMI</Button> <p className="text-sm mt-3">Your BMI: <span className="font-semibold">[Result Placeholder]</span></p> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Brain className="mr-2 h-5 w-5"/> Mental Wellness Corner</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Resources for mental health and well-being.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Guided Mindfulness Exercises (Audio)</li> <li>Recognizing Signs of Burnout</li> <li>Directory of Local Mental Health Professionals</li> <li>Tips for Improving Sleep Quality</li> </ul> <Button size="sm" variant="link" onClick={() => alert(\'Pholder: Navigate to Mental Wellness Page\')}>Explore Mental Wellness</Button> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-3 text-gray-700">Quick Health Links</h4> <div className="grid grid-cols-1 sm:grid-cols-3 gap-3"> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Ministry of Health & Child Care (MoHCC)</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Common Colds & Flu Information</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Basic First Aid Guide</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">National Vaccination Schedules</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Find a Clinic Near You</a> </div> </div> </div> ); case \'antibiotic\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold flex items-center text-blue-800"><Pill className="mr-2 h-5 w-5"/> Antibiotic Stewardship: Be Antibiotic Wise</h2> <p className="text-sm text-gray-600">Learn about the responsible use of antibiotics to combat resistance.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-blue-50 border border-blue-200"> <CardHeader><CardTitle>Why is Responsible Use Important?</CardTitle></CardHeader> <CardContent className="pt-2 text-sm text-blue-800"><p>Antibiotic resistance is a major global health threat. When bacteria become resistant, antibiotics may not work when needed most. Using antibiotics only when necessary and as prescribed helps preserve their effectiveness for everyone.</p></CardContent> </Card> <Card> <CardHeader><CardTitle>Key Principles of Antibiotic Use</CardTitle></CardHeader> <CardContent className="pt-2"> <ul className="list-disc list-inside text-sm space-y-2 text-gray-700"> <li><strong>Viruses vs. Bacteria:</strong> Antibiotics ONLY treat bacterial infections, not viruses like colds or flu.</li> <li><strong>Complete the Full Course:</strong> Always finish your prescribed antibiotics, even if you start feeling better. Stopping early can allow resistant bacteria to survive.</li> <li><strong>Do Not Share:</strong> Never use antibiotics prescribed for someone else or share yours.</li> <li><strong>Trust Your Doctor:</strong> Don\'t pressure your doctor for antibiotics if they say you don\'t need them.</li> <li><strong>Prevent Infections:</strong> Practice good hygiene (like handwashing) and stay up-to-date on vaccinations to prevent infections in the first place.</li> </ul> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6 bg-yellow-50 p-4 rounded border border-yellow-200"> <h4 className="font-semibold mb-2 text-yellow-800 flex items-center"><AlertTriangle className="mr-2 h-4 w-4"/> Patient Advisory</h4> <p className="text-sm text-yellow-900">Always consult your doctor or pharmacist before taking any medication, including antibiotics. Ensure you understand the instructions and potential side effects. Report any adverse reactions immediately.</p> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-2">Further Information</h4> <div className="space-y-1"> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">World Health Organization (WHO) - Antimicrobial Resistance</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Africa CDC - Antimicrobial Resistance Programme</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Local Resources on Antibiotic Use (Placeholder Link)</a> </div> </div> </div> ); default: return null; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Community Wellness Hub</h1> <p className="text-sm mt-1 text-gray-600">Explore activities, health information, and resources for a healthier you.</p> </header> <div className="border-b border-gray-200"> <nav className="-mb-px flex space-x-4 overflow-x-auto"> <button onClick={() => setActiveTab(\'activities\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'activities\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'activities\' ? \'active\' : \'\'}> <CalendarDays className="inline mr-1 h-4 w-4" /> Activities & Events </button> <button onClick={() => setActiveTab(\'blog\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'blog\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'blog\' ? \'active\' : \'\'}> <BookOpen className="inline mr-1 h-4 w-4" /> Wellness Blog </button> <button onClick={() => setActiveTab(\'resources\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'resources\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'resources\' ? \'active\' : \'\'}> <Settings className="inline mr-1 h-4 w-4" /> Health Resources & Tools </button> <button onClick={() => setActiveTab(\'antibiotic\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'antibiotic\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'antibiotic\' ? \'active\' : \'\'}> <Pill className="inline mr-1 h-4 w-4" /> Be Antibiotic Wise </button> </nav> </div> <div className="mt-6"> {renderTabContent()} </div> </div> ); }\r\n\r\n        // --- Main App Component ---\r\n        function App() {\r\n            console.log("App Component: Initial Render");\r\n            const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n            const [userRole, setUserRole] = useState(null);\r\n            const [userName, setUserName] = useState(\'\');\r\n            const [userData, setUserData] = useState(null);\r\n            const [activeView, setActiveView] = useState(\'landing\');\r\n            const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n            const [verificationData, setVerificationData] = useState(null);\r\n\r\n            const openVerificationModal = (data) => { setVerificationData(data); setIsVerificationModalOpen(true); };\r\n            const closeVerificationModal = () => setIsVerificationModalOpen(false);\r\n\r\n            const handleLogin = (role) => {\r\n                console.log(`App Component: handleLogin called with role: ${role}`);\r\n                let defaultView = \'landing\'; let currentUserName = \'\'; let currentUserData = null; let authStatus = false;\r\n                switch (role) {\r\n                    case \'patient\': defaultView = \'patientPortal\'; currentUserName = MOCK_PATIENT_DATA.name; currentUserData = MOCK_PATIENT_DATA; authStatus = true; break;\r\n                    case \'pharmacy\': defaultView = \'pharmacyPortal\'; currentUserName = \'City Pharmacy Staff\'; currentUserData = { id: \'PHARM001\', name: \'City Pharmacy\'}; authStatus = true; break;\r\n                    case \'doctor\': defaultView = \'doctorPortal\'; currentUserName = \'Dr. Musasa\'; currentUserData = { id: \'DOC001\' }; authStatus = true; break;\r\n                    case \'wholesaler\': defaultView = \'wholesalerPortal\'; currentUserName = \'MediSupply Inc.\'; currentUserData = { id: \'WH001\' }; authStatus = true; break;\r\n                    default: console.warn(`App Component: Unknown role "${role}" passed to handleLogin. Staying on landing page.`); role = null; defaultView = \'landing\'; authStatus = false; break;\r\n                }\r\n                setIsAuthenticated(authStatus); setUserRole(role); setActiveView(defaultView); setUserName(currentUserName); setUserData(currentUserData); console.log(`App Component: Login state updated. Auth=${authStatus}, Role=${role}, View=${defaultView}`);\r\n            };\r\n\r\n            const handleLogout = () => { console.log("App Component: handleLogout called."); setIsAuthenticated(false); setUserRole(null); setUserName(\'\'); setUserData(null); setActiveView(\'landing\'); console.log("App Component: Logout state updated. Redirecting to landing."); };\r\n\r\n            const navigateTo = (view) => {\r\n                console.log(`App Component: navigateTo called for view: ${view}. Current auth: ${isAuthenticated}, role: ${userRole}`);\r\n                const publicViews = [\'landing\', \'wellness\']; const semiPublicViews = [\'medicineSearch\']; const allowedViews = { patient: [\'patientPortal\', \'wellness\', \'medicineSearch\', \'prescriptionUpload\', \'quotedRx\'], pharmacy: [\'pharmacyPortal\', \'wellness\'], doctor: [\'doctorPortal\', \'wellness\'], wholesaler: [\'wholesalerPortal\', \'wellness\'], };\r\n                if (publicViews.includes(view)) { console.log(` -> Navigating to public view: ${view}`); setActiveView(view); return; }\r\n                if (semiPublicViews.includes(view) && !isAuthenticated) { console.log(` -> Navigating to semi-public view (unauthenticated): ${view}`); setActiveView(view); return; }\r\n                if (!isAuthenticated) { console.log(` -> Navigation to "${view}" denied (not authenticated). Redirecting to landing.`); setActiveView(\'landing\'); return; }\r\n                if (allowedViews[userRole]?.includes(view)) { console.log(` -> Navigation allowed for role "${userRole}" to view "${view}".`); setActiveView(view); }\r\n                else if (view === \'wellness\') { console.log(` -> Navigation allowed for authenticated user ("${userRole}") to wellness.`); setActiveView(view); }\r\n                else { console.warn(` -> Access denied for role "${userRole}" attempting to navigate to view "${view}". Redirecting to user\'s default portal.`); const defaultPortal = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(allowedViews[userRole]?.includes(defaultPortal) ? defaultPortal : \'landing\'); alert(`Access Denied: You do not have permission to view \'${view}\'. Redirecting to your dashboard.`); }\r\n            };\r\n\r\n            const renderMainContent = () => {\r\n                console.log(`App Component: renderMainContent triggered. Active View: ${activeView}, Role: ${userRole}, Auth: ${isAuthenticated}`);\r\n                if (!isAuthenticated) { switch (activeView) { case \'wellness\': return <CommunityWellnessHub setActiveView={navigateTo}/>; case \'medicineSearch\': return <MedicineSearchListing navigateTo={navigateTo} />; case \'landing\': default: console.log(" -> Rendering LandingPage (unauthenticated)."); return <LandingPage setActiveView={navigateTo} login={handleLogin} navigateTo={navigateTo}/>; } }\r\n\r\n                console.log(` -> Rendering authenticated content for view: ${activeView}`);\r\n                try {\r\n                    const renderPortal = (PortalComponent, requiredRole, props = {}) => { if (userRole === requiredRole) { console.log(` -> Rendering ${requiredRole} portal.`); return <PortalComponent setActiveView={navigateTo} openVerificationModal={openVerificationModal} patientData={userData} {...props} />; } else { console.warn(`Role mismatch: Trying to render ${requiredRole} portal for user role ${userRole}. Rendering Access Denied.`); return renderAccessDenied(); } };\r\n\r\n                    switch (activeView) {\r\n                        case \'patientPortal\': return renderPortal(PatientPortal, \'patient\', { navigateTo });\r\n                        case \'pharmacyPortal\': return renderPortal(PharmacyPortal, \'pharmacy\');\r\n                        case \'doctorPortal\': return renderPortal(DoctorPortal, \'doctor\');\r\n                        case \'wholesalerPortal\': return renderPortal(WholesalerPortal, \'wholesaler\');\r\n                        case \'wellness\': console.log(" -> Rendering CommunityWellnessHub (authenticated)."); return <CommunityWellnessHub setActiveView={navigateTo}/>;\r\n                        case \'medicineSearch\': if (userRole === \'patient\') return <MedicineSearchListing navigateTo={navigateTo} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'prescriptionUpload\': if (userRole === \'patient\') return <PrescriptionUpload navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'quotedRx\': if (userRole === \'patient\') { const quote = userData?.prescriptions?.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quote?.quote} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; } else return renderAccessDenied();\r\n                        default: console.warn(` -> Unhandled authenticated view route: "${activeView}". Resetting to user\'s default portal.`); const defaultPortalView = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(defaultPortalView); return null;\r\n                    }\r\n                } catch (error) {\r\n                     console.error(`CRITICAL ERROR rendering authenticated view "${activeView}" for role "${userRole}":`, error);\r\n                     return ( <div className="text-center p-8 text-red-600 bg-red-50 border border-red-200 rounded-md"><h2 className="text-xl font-semibold mb-2">Oops! Something went wrong.</h2><p>We encountered an error while loading this part of the application.</p><p className="mt-2">Please try refreshing the page. If the problem persists, contact support.</p><p className="mt-4 text-xs text-red-500"><i>Error details (for support): {error.message}</i></p><p className="text-xs text-red-500"><i>(Check browser console (F12) for more info)</i></p><pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || \'No stack trace available.\'}</pre></div> );\r\n                }\r\n            };\r\n\r\n            const renderAccessDenied = () => ( <div className="text-center py-10 px-4"> <Card className="max-w-md mx-auto bg-red-50 border-red-200"> <CardHeader> <CardTitle className="text-red-700 flex items-center justify-center"><AlertTriangle className="h-6 w-6 mr-2"/> Access Denied</CardTitle> </CardHeader> <CardContent className="pt-4 text-red-800"> <p>You do not have permission to access this page (\'{activeView}\') with your current role (\'{userRole || \'None\'}\').</p> <Button onClick={() => navigateTo(userRole ? `${userRole}Portal` : \'landing\')} className="mt-6 bg-red-600 hover:bg-red-700 text-white">Go to My Dashboard / Home</Button> </CardContent> </Card> </div> );\r\n\r\n            const renderNavigation = () => {\r\n                console.log(`App Component: renderNavigation. Auth=${isAuthenticated}, Role=${userRole}, View=${activeView}`);\r\n                if (!isAuthenticated) { return ( <div className="flex items-center space-x-2 sm:space-x-4"> <Button variant="ghost" onClick={() => navigateTo(\'medicineSearch\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Search className="mr-1 h-4 w-4" /> Search Meds </Button> <Button variant="ghost" onClick={() => navigateTo(\'wellness\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Activity className="mr-1 h-4 w-4" /> Wellness </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Show Login Options/Modal\')} size="sm"> <LogIn className="mr-1 h-4 w-4" /> Login </Button> <Button onClick={() => alert(\'Pholder: Show Registration Options/Modal\')} size="sm"> Register </Button> </div> ); }\r\n                else {\r\n                     const portalButtons = { patient: <Button variant={activeView === \'patientPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'patientPortal\')} size="sm" data-state={activeView === \'patientPortal\' ? \'active\' : \'\'}><Home className="mr-1 h-4 w-4" /> Dashboard</Button>, pharmacy: <Button variant={activeView === \'pharmacyPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'pharmacyPortal\')} size="sm" data-state={activeView === \'pharmacyPortal\' ? \'active\' : \'\'}><Building className="mr-1 h-4 w-4" /> Pharmacy Portal</Button>, doctor: <Button variant={activeView === \'doctorPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'doctorPortal\')} size="sm" data-state={activeView === \'doctorPortal\' ? \'active\' : \'\'}><Stethoscope className="mr-1 h-4 w-4" /> Doctor Portal</Button>, wholesaler: <Button variant={activeView === \'wholesalerPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wholesalerPortal\')} size="sm" data-state={activeView === \'wholesalerPortal\' ? \'active\' : \'\'}><Truck className="mr-1 h-4 w-4" /> Wholesaler Portal</Button>, };\r\n                    return ( <div className="flex items-center space-x-2 sm:space-x-4 overflow-x-auto py-1 flex-grow justify-end">\r\n                            {portalButtons[userRole]}\r\n                            <Button variant={activeView === \'wellness\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wellness\')} size="sm" data-state={activeView === \'wellness\' ? \'active\' : \'\'}><Activity className="mr-1 h-4 w-4" /> Wellness</Button>\r\n                            <div className="flex items-center space-x-3 pl-3 border-l border-gray-200 ml-2 flex-shrink-0">\r\n                                <Button variant="ghost" size="icon" className="relative hover:bg-gray-100 rounded-full" onClick={() => alert(\'Placeholder: Show Notifications Panel\')}> <Bell className="h-5 w-5 text-gray-600" /> <span className="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full ring-1 ring-white bg-red-500"/> </Button>\r\n                                <span className="text-sm font-medium text-gray-700 hidden sm:inline" title={`Logged in as: ${userRole}`}>Welcome, {userName}</span>\r\n                                <Button variant="outline" onClick={handleLogout} size="sm"> <LogOut className="mr-1 h-4 w-4" /> Logout </Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            };\r\n\r\n\r\n            // Ensure NO HTML comments are inside this return block\r\n            return (\r\n                <div className="min-h-screen bg-gray-100 flex flex-col">\r\n                    {/* Sticky Navigation Bar */}\r\n                    <nav className="bg-white shadow-md sticky top-0 z-40">\r\n                        <div className="container mx-auto px-4 py-2 flex flex-wrap justify-between items-center gap-4">\r\n                             <span\r\n                                className="text-2xl font-bold text-blue-700 cursor-pointer shrink-0 mr-6"\r\n                                onClick={() => navigateTo(isAuthenticated ? `${userRole}Portal` : \'landing\')}\r\n                                title="Go to Home/Dashboard"\r\n                             >\r\n                                ehutano<span className="text-green-600">+</span>\r\n                             </span>\r\n                             {renderNavigation()}\r\n                         </div>\r\n                    </nav>\r\n\r\n                    {/* Main Content Area */}\r\n                    <main className="container mx-auto p-4 md:p-6 lg:p-8 flex-grow">\r\n                        {renderMainContent()}\r\n                    </main>\r\n\r\n                    {/* Footer */}\r\n                    <footer className="bg-gray-800 text-gray-400 text-sm py-10 mt-16">\r\n                        <div className="container mx-auto px-4">\r\n                             <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 mb-8">\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Company</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">About Us</a></li> <li><a href="#" className="hover:text-white hover:underline">Careers</a></li> <li><a href="#" className="hover:text-white hover:underline">Contact</a></li> <li><a href="#" className="hover:text-white hover:underline" onClick={(e) => { e.preventDefault(); navigateTo(\'wellness\'); }}>Blog</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Legal</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Privacy Policy</a></li> <li><a href="#" className="hover:text-white hover:underline">Terms of Service</a></li> <li><a href="#" className="hover:text-white hover:underline">Compliance</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Resources</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Help Center</a></li> <li><a href="#" className="hover:text-white hover:underline">API Documentation</a></li> <li><a href="#" className="hover:text-white hover:underline">System Status</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Connect</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Facebook</a></li> <li><a href="#" className="hover:text-white hover:underline">Twitter / X</a></li> <li><a href="#" className="hover:text-white hover:underline">LinkedIn</a></li> <li><a href="#" className="hover:text-white hover:underline">WhatsApp Support</a></li> </ul> </div>\r\n                                <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right mt-8 lg:mt-0"> <span className="text-3xl font-bold text-white"> ehutano<span className="text-green-400">+</span> </span> <p className="text-xs mt-2">Digital Health Solutions</p> </div>\r\n                             </div>\r\n                             <div className="border-t border-gray-700 pt-6 text-center text-xs"> &copy; {new Date().getFullYear()} ehutano+. A division of Health Futures Ltd. All rights reserved. </div>\r\n                        </div>\r\n                    </footer>\r\n\r\n                     {/* Centralized Modals */}\r\n                    <MedicineVerificationModal isOpen={isVerificationModalOpen} onClose={closeVerificationModal} verificationData={verificationData} />\r\n                    {/* OrderDetailsModal & DispensingModal are rendered within PharmacyPortal */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        // --- Render the App ---\r\n        try {\r\n            console.log("Attempting ReactDOM.render...");\r\n            ReactDOM.render(<App />, document.getElementById(\'root\'));\r\n            console.log("React app rendered successfully.");\r\n        } catch (error) {\r\n             console.error("CRITICAL ERROR DURING REACT RENDERING:", error);\r\n             const rootElement = document.getElementById(\'root\');\r\n             if (rootElement) {\r\n                rootElement.innerHTML = `<div style="padding: 2rem; border: 2px solid red; background-color: #fee; color: #a00; font-family: sans-serif; text-align: center;">\r\n                                            <h2>Application Initialization Error</h2>\r\n                                            <p>We\'re sorry, but the application failed to load correctly.</p>\r\n                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>\r\n                                            <p style="margin-top: 1em; font-size: 0.9em; color: #500;"><i>Technical Details (for support): ${error.message}</i></p>\r\n                                            <p style="font-size: 0.8em;">(Check the browser\'s developer console (F12) for more detailed error information)</p>\r\n                                            <pre style="margin-top: 1em; text-align: left; background: #fff; border: 1px solid #ccc; padding: 1em; overflow-x: auto; font-size: 0.8em;">${error.stack || \'No stack trace available.\'}</pre>\r\n                                         </div>`;\r\n             }\r\n        }\r\n\r\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\r\n        // ***********************************************************************\r\n        // ehutano+ React Frontend Components (Structured Portals & Auth) - v6 - CORRECTED v6\r\n        // ***********************************************************************\r\n        // Final check: Ensuring no stray HTML comments are within the React JSX.\r\n        // ***********************************************************************\r\n\r\n        const { useState, useMemo, useEffect } = React;\r\n\r\n        // --- Mock Data ---\r\n        const MOCK_PATIENT_DATA = { name: \'Tendai Moyo\', medicalAid: { provider: \'Cimas\', memberId: \'CIM123456789\', verified: true }, recentOrders: [ { id: \'ORD789\', date: \'2025-04-18\', status: \'Delivered\', total: \'$15.50\', items: [\'Paracetamol 500mg\', \'Vitamin C Tabs\'] }, { id: \'ORD788\', date: \'2025-04-15\', status: \'Delivered\', total: \'$22.00\', items: [\'Amoxicillin 250mg (Script)\'] }, { id: \'ORD785\', date: \'2025-04-10\', status: \'Cancelled\', total: \'$8.75\', items: [\'Cough Syrup\'] }, ], prescriptions: [ { id: \'RX123\', medicine: \'Amoxicillin 250mg\', doctor: \'Dr. Chipo Musasa\', dateIssued: \'2025-04-14\', status: \'Filled\', refillsLeft: 0, uploadId: \'UPL001\' }, { id: \'RX124\', medicine: \'Lisinopril 10mg\', doctor: \'Dr. David Chen\', dateIssued: \'2025-03-20\', status: \'Active\', refillsLeft: 2, uploadId: \'UPL002\' }, { id: \'UPL003\', status: \'Pending Review\', dateUploaded: \'2025-04-25\', notes: \'Need urgently please\', isQuoteReady: false }, { id: \'UPL004\', status: \'Quote Ready\', dateUploaded: \'2025-04-24\', isQuoteReady: true, quote: { total: 35.50, items: [{ name: \'Metformin 500mg\', price: 9.50, qty: 1 }, { name: \'Amlodipine 5mg\', price: 13.00, qty: 2 }] } } ], reminders: [ { id: \'REM01\', type: \'Refill\', medicine: \'Lisinopril 10mg\', dueDate: \'2025-05-15\' }, { id: \'REM02\', type: \'Appointment\', details: \'Check-up with Dr. Chen\', dueDate: \'2025-05-01\' }, ], healthMetrics: { bloodPressure: \'120/80 mmHg\', lastCheckup: \'2025-03-20\', } };\r\n        const MOCK_PHARMACY_INVENTORY = [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', category: \'Pain Relief\', stock: 150, price: 2.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot A\' }, { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', category: \'Antibiotics\', stock: 45, price: 8.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot B\' }, { id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', category: \'Vitamins\', stock: 80, price: 5.75, supplier: \'HealthWell\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot C\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', category: \'Allergy\', stock: 5, price: 4.20, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-18\', status: \'Low Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot D\' }, { id: \'MED005\', name: \'Cough Syrup XYZ\', category: \'Cold & Flu\', stock: 0, price: 6.50, supplier: \'MediSupply\', lastUpdated: \'2025-04-15\', status: \'Out of Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'LocalChem\', wholesaleSource: \'MediSupply Lot E\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', category: \'Digestive Health\', stock: 60, price: 7.10, supplier: \'HealthWell\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot F\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', category: \'Pain Relief\', stock: 200, price: 3.10, supplier: \'MediSupply\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot G\' }, { id: \'MED008\', name: \'Metformin 500mg\', category: \'Diabetes\', stock: 70, price: 9.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'PharmaDistro Lot H\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', category: \'Antibiotics\', stock: 30, price: 12.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-21\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot I\' }, ];\r\n        const MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES = MOCK_PHARMACY_INVENTORY.map(item => ({ id: item.id, name: item.name, category: item.category, requiresPrescription: item.requiresPrescription, isAntibiotic: item.isAntibiotic, imageUrl: `https://placehold.co/150x150/e2e8f0/334155?text=${item.name.split(\' \')[0]}`, pharmacies: [ { name: \'Bonvie Pharmacy\', price: item.price, stockStatus: item.stock > 10 ? \'In Stock\' : (item.stock > 0 ? \'Low Stock\' : \'Out of Stock\') }, { name: \'Pulse Pharmacy\', price: item.price * 1.05, stockStatus: Math.random() > 0.2 ? \'In Stock\' : \'Low Stock\' }, { name: \'City Pharmacy\', price: item.price * 0.98, stockStatus: Math.random() > 0.1 ? \'In Stock\' : \'Out of Stock\' }, ].filter(p => p.stockStatus !== \'Out of Stock\'), }));\r\n        const MOCK_SALES_DATA = [ { name: \'Jan\', sales: 4000 }, { name: \'Feb\', sales: 3000 }, { name: \'Mar\', sales: 5000 }, { name: \'Apr\', sales: 4500 }, { name: \'May\', sales: 6000 }, { name: \'Jun\', sales: 5500 }, ];\r\n        const MOCK_PARTNER_LOGOS = [ { name: \'Cimas MedAid\', url: \'https://placehold.co/150x60/a5f3fc/0e7490?text=Cimas+Logo\' }, { name: \'Bonvie Pharmacy\', url: \'https://placehold.co/150x60/d8b4fe/581c87?text=Bonvie+Pharmacy\' }, { name: \'MediSupply Wholesalers\', url: \'https://placehold.co/150x60/fecaca/991b1b?text=MediSupply\' }, { name: \'Wellness Hub ZW\', url: \'https://placehold.co/150x60/a7f3d0/14532d?text=Wellness+Hub\' }, { name: \'Dr. Moyo Clinic\', url: \'https://placehold.co/150x60/bfdbfe/1e40af?text=Dr.+Moyo\' }, { name: \'First Mutual Health\', url: \'https://placehold.co/150x60/fed7aa/9a3412?text=FMH+Logo\' }, { name: \'Pulse Pharmacy\', url: \'https://placehold.co/150x60/fbcfe8/9d174d?text=Pulse+Pharmacy\' }, { name: \'PharmaDistro Ltd\', url: \'https://placehold.co/150x60/e0e7ff/3730a3?text=PharmaDistro\' }, ];\r\n        const MOCK_PHARMACY_ORDERS = [ { id: \'ORD-PHARM-001\', patientName: \'Alice Banda\', date: \'2025-04-23\', status: \'Pending Payment\', total: 35.50, items: [{ id: \'MED002\', name: \'Amoxicillin 250mg Caps\', qty: 1 }, { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', qty: 2 }], medicalAidStatus: \'Pending Patient Auth\', amountCovered: 0.00, medicalAidProvider: \'Cimas\', requiresAction: true, paymentMethod: \'Medical Aid\', patientId: \'PAT001\' }, { id: \'ORD-PHARM-002\', patientName: \'Tendai Moyo\', date: \'2025-04-22\', status: \'Ready for Pickup\', total: 12.00, items: [{ id: \'MED009\', name: \'Ciprofloxacin 500mg\', qty: 1 }], medicalAidStatus: \'Received\', amountCovered: 10.00, medicalAidProvider: \'First Mutual Health\', requiresAction: true, paymentMethod: \'Medical Aid / Co-Pay\', patientId: \'PAT002\' }, { id: \'ORD-PHARM-003\', patientName: \'John Doe\', date: \'2025-04-21\', status: \'Completed\', total: 5.75, items: [{ id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: false, paymentMethod: \'EcoCash\', patientId: \'PAT003\' }, { id: \'ORD-PHARM-004\', patientName: \'Jane Smith\', date: \'2025-04-24\', status: \'Processing\', total: 9.50, items: [{ id: \'MED008\', name: \'Metformin 500mg\', qty: 1 }], medicalAidStatus: \'Claim Submitted\', amountCovered: 7.50, medicalAidProvider: \'Cimas\', requiresAction: false, paymentMethod: \'Medical Aid\', patientId: \'PAT004\' }, { id: \'ORD-PHARM-005\', patientName: \'Blessing R\', date: \'2025-04-25\', status: \'Pending Approval\', total: 25.00, items: [{ id: \'MED006\', name: \'Omeprazole 20mg Caps\', qty: 2 }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: true, paymentMethod: \'Cash on Delivery\', patientId: \'PAT005\' }, ];\r\n        const MOCK_VERIFICATION_DATA_VALID = { status: \'verified\', medicineName: \'Amoxicillin 250mg Caps\', batchNumber: \'BCH12345\', expiryDate: \'2026-12-31\', pharmacySource: \'Bonvie Pharmacy\', wholesaleSource: \'MediSupply Lot B\', manufacturer: \'GenericMed\', isAntibiotic: true, message: \'Medicine verified successfully. Genuine product.\' };\r\n        const MOCK_VERIFICATION_DATA_INVALID = { status: \'invalid\', message: \'Verification Failed! Product may be falsified. Report to pharmacy/MCAZ.\', isAntibiotic: false, };\r\n        const MOCK_VERIFICATION_DATA_EXPIRED = { status: \'expired\', medicineName: \'Paracetamol 500mg Tabs\', batchNumber: \'BCH67890\', expiryDate: \'2024-03-31\', pharmacySource: \'Pulse Pharmacy\', wholesaleSource: \'PharmaDistro Lot C\', manufacturer: \'PharmaCo\', isAntibiotic: false, message: \'Warning: This medicine has EXPIRED. Do not use.\' };\r\n        const MOCK_MARKET_WATCH_DATA = { fastMoving: [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', trend: \'+25% sales WoW\', source: \'Aggregated POS\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', trend: \'High seasonal demand\', source: \'AI Model\' }, { id: \'MED003\', name: \'Vitamin C 1000mg\', trend: \'+15% sales WoW\', source: \'Wholesaler Volume\' }, ], highDemand: [ { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', reason: \'Increased Rx volume\', source: \'E-Rx Trends\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', reason: \'UTI treatment spike\', source: \'Clinic Data\' }, { id: \'MEDXXX\', name: \'Salbutamol Inhalers\', reason: \'Allergy season onset\', source: \'AI Model\' }, ], stockOuts: [ { id: \'MED005\', name: \'Cough Syrup XYZ\', supplier: \'MediSupply\', note: \'ETA 3 days\', status: \'Out of Stock\', source: \'Wholesaler Feed\' }, { id: \'MEDXYZ\', name: \'Salbutamol Inhaler\', supplier: \'PharmaDistro\', note: \'Manufacturing delay\', status: \'Out of Stock\', source: \'Supplier Comms\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', supplier: \'PharmaDistro\', note: \'Multiple low levels\', status: \'Low Stock\', source: \'Aggregated Inventory\' }, ], priceAlerts: [ { id: \'MED008\', name: \'Metformin 500mg\', change: \'+5% supplier price\', note: \'Effective next cycle\', source: \'PharmaDistro Update\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', change: \'-3% promotion\', note: \'Limited time offer\', source: \'Supplier Bulletin\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', change: \'+8% import cost\', note: \'FX fluctuation\', source: \'Import Agent\' }, ], newlyRegistered: [ { id: \'MED101\', name: \'Generic Lisinopril 5mg\', supplier: \'NewGen Pharma\', date: \'2025-04-15\', source: \'MCAZ Registry\' }, { id: \'MED102\', name: \'Adv. Allergy Spray\', supplier: \'HealthWell\', date: \'2025-04-10\', source: \'MCAZ Registry\' }, ], recentlyImported: [ { id: \'MEDIMP01\', name: \'Vaccine Batch X\', source: \'WHO\', arrival: \'2025-04-20\', distributor: \'Govt Stores\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', source: \'EU Supplier\', arrival: \'2025-04-18\', distributor: \'PharmaDistro\' }, ], aiInsights: [ "AI Trend: Potential shortage of pediatric Paracetamol Syrup expected in 2 weeks based on consumption & low regional stock. Check inventory.", "Demand Forecast: 30%+ increase predicted for allergy meds next month (pollen). Consider early stocking.", "Opportunity: Promote Vitamin D based on seasonal patterns & low recent sales velocity.", "Pricing Anomaly: Ciprofloxacin wholesale price shows higher variance. Cross-check quotes.", ], };\r\n        const MOCK_ADVERTS = [ { id: \'AD001\', title: \'Bonvie Pharmacy: Flu Shots Available Now!\', imageUrl: \'https://placehold.co/300x100/d8b4fe/581c87?text=Bonvie+Flu+Shots\', link: \'#\', approvedBy: \'MCAZ Ref: AD/FLU/25/001\', type: \'Pharmacy Promotion\' }, { id: \'AD002\', title: \'MediSupply: Reliable Partner for Bulk Orders\', imageUrl: \'https://placehold.co/300x100/fecaca/991b1b?text=MediSupply+Wholesale\', link: \'#\', approvedBy: \'MCAZ Ref: AD/WS/25/003\', type: \'Wholesaler Service\' }, { id: \'AD003\', title: \'Stay Healthy with BrandX Vitamins\', imageUrl: \'https://placehold.co/300x100/a7f3d0/14532d?text=BrandX+Vitamins\', link: \'#\', approvedBy: \'MCAZ Ref: AD/PROD/25/015\', type: \'Product Promotion\' }, ];\r\n        const MOCK_WELLNESS_ACTIVITIES = [ { id: \'ACT001\', name: \'5-a-side Soccer\', day: \'Monday\', time: \'18:00\', location: \'Field A\', slots: 3, booked: false, icon: \'⚽\' }, { id: \'ACT002\', name: \'Yoga Class\', day: \'Tuesday\', time: \'07:00\', location: \'Studio 1\', slots: 5, booked: false, icon: \'🧘\' }, { id: \'ACT003\', name: \'Basketball Pickup\', day: \'Tuesday\', time: \'19:00\', location: \'Court 1\', slots: 8, booked: false, icon: \'🏀\' }, { id: \'ACT004\', name: \'Tennis Singles\', day: \'Wednesday\', time: \'10:00\', location: \'Court 2\', slots: 1, booked: true, icon: \'🎾\' }, { id: \'ACT005\', name: \'Health Walk\', day: \'Thursday\', time: \'06:30\', location: \'Park Entrance\', slots: 15, booked: false, icon: \'🚶\u200d♀️\' }, { id: \'ACT006\', name: \'Zumba Fitness\', day: \'Friday\', time: \'17:30\', location: \'Studio 2\', slots: 0, booked: false, icon: \'💃\' }, { id: \'ACT007\', name: \'Diabetes Support\', day: \'Wednesday\', time: \'14:00\', location: \'Room 1\', slots: 10, booked: false, icon: \'💬\' }, { id: \'ACT008\', name: \'Healthy Cooking\', day: \'Thursday\', time: \'12:00\', location: \'Demo Kitchen\', slots: 6, booked: false, icon: \'🧑\u200d🍳\' }, ];\r\n        const MOCK_BLOG_POSTS = [ { id: \'BLOG001\', title: \'Seasonal Allergies in Zim\', date: \'2025-04-20\', author: \'Dr. Musasa\', snippet: \'Manage symptoms with local tips...\', imageUrl: \'https://placehold.co/300x150/a7f3d0/14532d?text=Allergies\', category: \'General Health\' }, { id: \'BLOG002\', title: \'Importance of Hydration\', date: \'2025-04-15\', author: \'Wellness Team\', snippet: \'Crucial for health in warmer climates...\', imageUrl: \'https://placehold.co/300x150/bfdbfe/1e40af?text=Hydration\', category: \'Lifestyle\' }, { id: \'BLOG003\', title: \'Simple Home Exercises\', date: \'2025-04-10\', author: \'Coach Themba\', snippet: \'Stay active without leaving home...\', imageUrl: \'https://placehold.co/300x150/fecaca/991b1b?text=Home+Exercise\', category: \'Fitness\' }, { id: \'BLOG004\', title: \'Healthy Eating on Budget\', date: \'2025-04-05\', author: \'Nutritionist N.\', snippet: \'Affordable & nutritious local options...\', imageUrl: \'https://placehold.co/300x150/fed7aa/9a3412?text=Healthy+Eating\', category: \'Nutrition\' }, { id: \'BLOG005\', title: \'Managing Type 2 Diabetes\', date: \'2025-04-22\', author: \'Diabetes Educator\', snippet: \'Lifestyle changes are vital...\', imageUrl: \'https://placehold.co/300x150/fde68a/ca8a04?text=Diabetes+Mgmt\', category: \'Diabetes\' }, { id: \'BLOG006\', title: \'Managing High Blood Pressure\', date: \'2025-04-18\', author: \'Dr. Chen\', snippet: \'Learn risks & management steps...\', imageUrl: \'https://placehold.co/300x150/fda4af/be123c?text=Hypertension\', category: \'Heart Health\' }, ];\r\n\r\n        // --- UI Components ---\r\n        const Button = ({ children, variant = \'default\', size = \'default\', className = \'\', disabled, ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"; const variants = { default: "bg-blue-600 text-white hover:bg-blue-700/90", destructive: "bg-red-600 text-white hover:bg-red-700/90", outline: "border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-900", secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200/80", ghost: "hover:bg-gray-100 hover:text-gray-900", link: "text-blue-600 underline-offset-4 hover:underline", success: "bg-green-600 text-white hover:bg-green-700/90", warning: "bg-yellow-400 text-yellow-900 hover:bg-yellow-500/90", }; const sizes = { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }; const variantStyle = variants[variant] || variants.default; return <button disabled={disabled} className={`${baseStyle} ${variantStyle} ${sizes[size]} ${className}`} {...props}>{children}</button>; };\r\n        const Card = ({ children, className = \'\', ...props }) => ( <div className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`} {...props}>{children}</div> );\r\n        const CardHeader = ({ children, className = \'\', ...props }) => <div className={`flex flex-col space-y-1.5 p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardTitle = ({ children, className = \'\', ...props }) => <h3 className={`text-lg md:text-xl font-semibold leading-none tracking-tight ${className}`} {...props}>{children}</h3>;\r\n        const CardDescription = ({ children, className = \'\', ...props }) => <p className={`text-sm text-gray-500 ${className}`} {...props}>{children}</p>;\r\n        const CardContent = ({ children, className = \'\', ...props }) => <div className={`p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardFooter = ({ children, className = \'\', ...props }) => <div className={`flex items-center p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const Table = ({ children, className = \'\', ...props }) => <div className="w-full overflow-auto"><table className={`w-full caption-bottom text-sm ${className}`} {...props}>{children}</table></div>;\r\n        const TableHeader = ({ children, className = \'\', ...props }) => <thead className={`[&_tr]:border-b bg-gray-50 ${className}`} {...props}>{children}</thead>;\r\n        const TableBody = ({ children, className = \'\', ...props }) => <tbody className={`[&_tr:last-child]:border-0 divide-y divide-gray-200 ${className}`} {...props}>{children}</tbody>;\r\n        const TableFooter = ({ children, className = \'\', ...props }) => <tfoot className={`border-t bg-gray-100/50 font-medium ${className}`} {...props}>{children}</tfoot>;\r\n        const TableRow = ({ children, className = \'\', ...props }) => <tr className={`border-b border-gray-200 transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-blue-50 ${className}`} {...props}>{children}</tr>;\r\n        const TableHead = ({ children, className = \'\', ...props }) => <th className={`h-12 px-4 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>{children}</th>;\r\n        const TableCell = ({ children, className = \'\', ...props }) => <td className={`p-4 align-middle ${className}`} {...props}>{children}</td>;\r\n        const TableCaption = ({ children, className = \'\', ...props }) => <caption className={`mt-4 text-sm text-gray-500 ${className}`} {...props}>{children}</caption>;\r\n        const Input = ({ className = \'\', type = \'text\', ...props }) => ( <input type={type} className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Select = ({ children, className = \'\', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 appearance-none pr-8 bg-no-repeat bg-right bg-[url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="%236b7280" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/></svg>\')] ${className}`} {...props}> {children} </select> );\r\n        const SelectItem = ({ children, value, ...props }) => <option value={value} {...props}>{children}</option>;\r\n        const Badge = ({ children, variant = \'default\', className = \'\', ...props }) => { const baseStyle = "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"; const variants = { default: "border-transparent bg-blue-600 text-blue-50", secondary: "border-transparent bg-gray-200 text-gray-800", destructive: "border-transparent bg-red-600 text-red-50", outline: "text-gray-900 border-gray-300", success: "border-transparent bg-green-500 text-white", warning: "border-transparent bg-yellow-400 text-yellow-900", info: "border-transparent bg-sky-500 text-white", trendUp: "border-transparent bg-emerald-100 text-emerald-800", trendDown: "border-transparent bg-rose-100 text-rose-800", }; const variantStyle = variants[variant] || variants.default; return <span className={`${baseStyle} ${variantStyle} ${className}`} {...props}>{children}</span>; };\r\n        const Label = ({ children, className = \'\', ...props }) => ( <label className={`block text-sm font-medium text-gray-700 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}> {children} </label> );\r\n        const Textarea = ({ className = \'\', ...props }) => ( <textarea className={`flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Modal = ({ isOpen, onClose, title, children, maxWidth = \'lg\' }) => { if (!isOpen) return null; const widthClasses = { sm: \'max-w-sm\', md: \'max-w-md\', lg: \'max-w-lg\', xl: \'max-w-xl\', \'2xl\': \'max-w-2xl\', \'3xl\': \'max-w-3xl\', \'4xl\': \'max-w-4xl\' }; return ( <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 backdrop-blur-sm animate-fade-in" onClick={onClose}> <div className={`bg-white rounded-lg shadow-xl w-full ${widthClasses[maxWidth] || widthClasses.lg} max-h-[90vh] flex flex-col overflow-hidden transform transition-all animate-scale-in`} onClick={e => e.stopPropagation()} > <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10"> <h3 className="text-lg font-semibold text-gray-800">{title}</h3> <button onClick={onClose} className="text-gray-400 hover:text-gray-700 text-2xl leading-none p-1 rounded-full hover:bg-gray-100">&times;</button> </div> <div className="p-4 md:p-6 overflow-y-auto flex-grow"> {children} </div> </div> </div> ); };\r\n\r\n        // --- Icons ---\r\n        const ShoppingCart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="9" cy="21" r="1"/><circle cx="20" cy="21" r="1"/><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/></svg>;\r\n        const Pill = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"/><path d="m8.5 8.5 7 7"/></svg>;\r\n        const Bell = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/><path d="M13.73 21a2 2 0 0 1-3.46 0"/></svg>;\r\n        const FileText = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>;\r\n        const User = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;\r\n        const Search = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;\r\n        const PlusCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="16"/><line x1="8" x2="16" y1="12" y2="12"/></svg>;\r\n        const Filter = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;\r\n        const BarChart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="20" y2="10"/><line x1="18" x2="18" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="16"/></svg>;\r\n        const Settings = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0 2l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const UploadCloud = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M12 12v9"/><path d="m16 16-4-4-4 4"/></svg>;\r\n        const Stethoscope = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"/><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"/><circle cx="20" cy="10" r="2"/></svg>;\r\n        const Truck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>;\r\n        const Building = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><path d="M9 22v-4h6v4"/><path d="M8 6h.01"/><path d="M16 6h.01"/><path d="M12 6h.01"/><path d="M12 10h.01"/><path d="M12 14h.01"/><path d="M16 10h.01"/><path d="M16 14h.01"/><path d="M8 10h.01"/><path d="M8 14h.01"/></svg>;\r\n        const Activity = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>;\r\n        const Home = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;\r\n        const Users = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;\r\n        const MapPin = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>;\r\n        const LogIn = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/><polyline points="10 17 15 12 10 7"/><line x1="15" x2="3" y1="12" y2="12"/></svg>;\r\n        const LogOut = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>;\r\n        const HeartPulse = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.22 12H9.5l.7-1 2.1 2.1.8-1 1.9 1.9h5.27"/></svg>;\r\n        const FileSearch = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"/><path d="M14 2v6h6"/><circle cx="5" cy="14" r="3"/><path d="m9 18-1.5-1.5"/></svg>;\r\n        const FileCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="m9 15 2 2 4-4"/></svg>;\r\n        const CreditCard = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>;\r\n        const PackageCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16.19 11.26-4.19 4.19-1.53-1.53"/><path d="M22 11.16V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1.17"/><path d="m16 4 3 3H4"/><path d="M18 7.84V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12.17"/><path d="M21 10.84v.32a2 2 0 0 1-2 2H17"/><path d="M7 16h10"/></svg>;\r\n        const QrCode = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="5" height="5" x="3" y="3" rx="1"/><rect width="5" height="5" x="16" y="3" rx="1"/><rect width="5" height="5" x="3" y="16" rx="1"/><path d="M21 16h-3a2 2 0 0 0-2 2v3"/><path d="M21 21v.01"/><path d="M12 7v3a2 2 0 0 1-2 2H7"/><path d="M3 12h.01"/><path d="M12 3h.01"/><path d="M12 16v.01"/><path d="M16 12h1"/><path d="M21 12v.01"/><path d="M12 21v-1"/></svg>;\r\n        const AlertTriangle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>;\r\n        const CheckCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><path d="m9 11 3 3L22 4"/></svg>;\r\n        const XCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>;\r\n        const BookOpen = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;\r\n        const ClipboardList = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>;\r\n        const Info = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>;\r\n        const TrendingUp = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>;\r\n        const PackageX = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"/><path d="m7.5 4.27 9 5.15"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/><path d="m17 13 5 5"/><path d="m22 13-5 5"/></svg>;\r\n        const DollarSign = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;\r\n        const PackagePlus = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4a7 7 0 1 1-9 0"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><line x1="12" x2="12" y1="12" y2="22"/><polyline points="7 12 12 14.5 17 12"/><line x1="3.29" x2="12" y1="7" y2="12"/><line x1="20.71" x2="12" y1="7" y2="12"/><line x1="12" x2="12" y1="8" y2="10"/><line x1="10" x2="14" y1="9" y2="9"/></svg>;\r\n        const Cpu = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><rect width="6" height="6" x="9" y="9" rx="1"/><path d="M15 2v2"/><path d="M15 20v2"/><path d="M9 2v2"/><path d="M9 20v2"/><path d="M2 9h2"/><path d="M2 15h2"/><path d="M20 9h2"/><path d="M20 15h2"/><path d="M9 4V2"/><path d="M15 4V2"/><path d="M9 20v2"/><path d="M15 20v2"/></svg>;\r\n        const Megaphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 11 18-5v12L3 14v-3z"/><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"/></svg>;\r\n        const Eye = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const CalendarDays = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;\r\n        const Utensils = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>;\r\n        const Heart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/></svg>;\r\n        const Scale = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2"/><path d="M19 7h2"/></svg>;\r\n        const Brain = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3.06Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3.06Z"/></svg>;\r\n        const Package = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="16.5" x2="7.5" y1="9.4" y2="9.4"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27 6.96 12 12.01 20.73 6.96"/><line x1="12" x2="12" y1="22.08" y2="12"/></svg>;\r\n        const MonitorSmartphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"/><path d="M10 19v-3.96 3.15"/><path d="M7 19h5"/><rect width="6" height="10" x="16" y="12" rx="2"/></svg>;\r\n        const Receipt = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"/><path d="M8 8h8"/><path d="M8 12h8"/><path d="M10 16h4"/></svg>;\r\n        const HelpCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>;\r\n        const MessageSquare = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>;\r\n        const Fingerprint = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4"/><path d="M5 19.5A8.5 8.5 0 0 1 12 11a8.5 8.5 0 0 1 7 8.5"/><path d="M10 16.5c0 .8.7 1.5 1.5 1.5S13 17.3 13 16.5"/><path d="M16 14a1 1 0 0 1 1 1v1.5c0 .8-.7 1.5-1.5 1.5S14 17.3 14 16.5V15a1 1 0 0 1 1-1z"/><path d="M8 14a1 1 0 0 0-1 1v1.5c0 .8.7 1.5 1.5 1.5S10 17.3 10 16.5V15a1 1 0 0 0-1-1z"/><path d="M18 19.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/><path d="M6 19.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/><path d="M12 5.5c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5"/><path d="M15 8.5c0 .8-.7 1.5-1.5 1.5S12 9.3 12 8.5"/><path d="M12 11.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"/></svg>;\r\n        const TrendingDown = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>;\r\n\r\n        // --- Recharts Placeholder ---\r\n        const ResponsiveContainer = ({ children }) => <div className="w-full h-[300px] bg-gray-100 flex items-center justify-center text-gray-400 italic rounded border border-gray-200">{children}</div>;\r\n        const LineChart = ({ children, data }) => <div className="p-4">Line Chart Placeholder - Data: {data?.length} points</div>;\r\n        const BarChartComponent = ({ children, data }) => <div className="p-4">Bar Chart Placeholder - Data: {data?.length} points</div>;\r\n        const Line = (props) => null; const Bar = (props) => null; const XAxis = (props) => null; const YAxis = (props) => null; const CartesianGrid = (props) => null; const Tooltip = (props) => null; const Legend = (props) => null;\r\n\r\n        // Utility function\r\n        const getStatusBadgeVariant = (status) => { status = status?.toLowerCase() || \'\'; if (status.includes(\'complete\') || status.includes(\'paid\') || status.includes(\'in stock\') || status.includes(\'verified\') || status.includes(\'active\') || status.includes(\'claim submitted\') || status.includes(\'received\')) return \'success\'; if (status.includes(\'pending\') || status.includes(\'low stock\') || status.includes(\'expired\')) return \'warning\'; if (status.includes(\'processing\') || status.includes(\'ready\') || status.includes(\'shipped\')) return \'info\'; if (status.includes(\'reject\') || status.includes(\'cancel\') || status.includes(\'out of stock\') || status.includes(\'invalid\')) return \'destructive\'; return \'secondary\'; };\r\n        const getClaimStatusVariant = getStatusBadgeVariant;\r\n\r\n        // --- Landing Page ---\r\n        function LandingPage({ setActiveView, login, navigateTo }) { console.log("Rendering LandingPage"); return ( <div className="space-y-12"> <section className="text-center py-16 px-4 bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-lg shadow-sm"> <h1 className="text-4xl md:text-5xl font-bold text-blue-800 mb-4">Welcome to ehutano<span className="text-green-600">+</span></h1> <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">Your trusted digital partner for pharmacy services, health management, and community wellness in Zimbabwe.</p> <div className="flex flex-wrap justify-center gap-4"> <Button size="lg" onClick={() => navigateTo(\'medicineSearch\')}><Search className="mr-2 h-5 w-5" /> Find Medicines Now</Button> <Button size="lg" variant="outline" onClick={() => setActiveView(\'wellness\')}><Activity className="mr-2 h-5 w-5" /> Explore Wellness Hub</Button> </div> </section> <section className="grid md:grid-cols-3 gap-8 text-center"> <Card><CardHeader><Pill className="mx-auto h-10 w-10 text-blue-600 mb-2"/><CardTitle>Online Pharmacy</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Search, compare prices, order medicines, upload prescriptions.</p><Button variant="link" className="mt-4" onClick={() => login(\'patient\')}>Patient Login/Register</Button></CardContent></Card> <Card><CardHeader><Building className="mx-auto h-10 w-10 text-purple-600 mb-2"/><CardTitle>Pharmacy Portal</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Manage inventory, orders, market insights & analytics.</p><Button variant="link" className="mt-4" onClick={() => login(\'pharmacy\')}>Pharmacy Login/Register</Button></CardContent></Card> <Card><CardHeader><HeartPulse className="mx-auto h-10 w-10 text-green-600 mb-2"/><CardTitle>Wellness Hub</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Book events, access health resources, read wellness blog.</p><Button variant="link" className="mt-4" onClick={() => setActiveView(\'wellness\')}>Visit Wellness Hub</Button></CardContent></Card> </section> <section className="py-12 bg-gray-50 rounded-lg"> <div className="container mx-auto px-4 text-center"> <h2 className="text-3xl font-bold text-gray-800 mb-8">How ehutano+ Works</h2> <div className="grid md:grid-cols-4 gap-8"> <div className="flex flex-col items-center p-4"><div className="bg-blue-100 rounded-full p-4 mb-4"><FileSearch className="h-8 w-8 text-blue-600" /></div><h3 className="font-semibold mb-1">1. Search/Upload</h3><p className="text-sm text-gray-600">Find medicine or Rx.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-purple-100 rounded-full p-4 mb-4"><FileCheck className="h-8 w-8 text-purple-600" /></div><h3 className="font-semibold mb-1">2. Quote/Compare</h3><p className="text-sm text-gray-600">Get quote/prices.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-yellow-100 rounded-full p-4 mb-4"><CreditCard className="h-8 w-8 text-yellow-600" /></div><h3 className="font-semibold mb-1">3. Order & Pay</h3><p className="text-sm text-gray-600">Confirm & pay.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-green-100 rounded-full p-4 mb-4"><PackageCheck className="h-8 w-8 text-green-600" /></div><h3 className="font-semibold mb-1">4. Delivery/Pickup</h3><p className="text-sm text-gray-600">Receive/collect.</p></div> </div> </div> </section> <section className="py-12 bg-white border-t border-b border-gray-200"> <div className="container mx-auto px-4"> <h2 className="text-2xl font-semibold text-center text-gray-700 mb-10">Our Trusted Partners</h2> <div className="relative w-full overflow-hidden [mask-image:_linear-gradient(to_right,transparent_0,_black_128px,_black_calc(100%-128px),transparent_100%)]"> <div className="flex w-max animate-scroll hover:paused">{[...MOCK_PARTNER_LOGOS, ...MOCK_PARTNER_LOGOS].map((logo, index) => ( <div key={index} className="flex-shrink-0 mx-8 flex items-center justify-center h-16"><img src={logo.url} alt={`${logo.name} Logo`} className="max-h-full object-contain grayscale opacity-70 hover:grayscale-0 hover:opacity-100 transition-all duration-300" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/150x60/f0f0f0/c0c0c0?text=Err"; e.target.alt = `${logo.name} Err`; }}/></div> ))}</div> </div> </div> </section> <section className="text-center py-10 px-4 bg-gray-50 rounded-lg shadow-sm border"> <h2 className="text-2xl font-semibold text-gray-800 mb-4">Are you a Doctor or Wholesaler?</h2> <p className="text-gray-600 max-w-xl mx-auto mb-6">Join our network to streamline workflows and connect.</p> <div className="flex justify-center gap-4"> <Button variant="outline" onClick={() => login(\'doctor\')}><Stethoscope className="mr-2 h-4 w-4"/> Doctor Login/Register</Button> <Button variant="outline" onClick={() => login(\'wholesaler\')}><Truck className="mr-2 h-4 w-4"/> Wholesaler Login/Register</Button> </div> </section> </div> ); }\r\n\r\n        // --- Patient Portal Components ---\r\n        function PatientPortal({ setActiveView, openVerificationModal, patientData, navigateTo }) { console.log("Rendering PatientPortal"); const [currentSubView, setCurrentSubView] = useState(\'dashboard\'); const navigatePatientView = (view) => { setCurrentSubView(view); }; const renderPatientContent = () => { switch (currentSubView) { case \'search\': return <MedicineSearchListing navigatePatientView={navigatePatientView} navigateTo={navigateTo} />; case \'upload\': return <PrescriptionUpload navigatePatientView={navigatePatientView} />; case \'quotedRx\': const quoteReadyRx = patientData.prescriptions.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quoteReadyRx?.quote} navigatePatientView={navigatePatientView} />; case \'dashboard\': default: return <PatientDashboard setActiveView={setActiveView} openVerificationModal={openVerificationModal} patientData={patientData} navigatePatientView={navigatePatientView} />; } }; return ( <div className="space-y-6"> <nav className="flex space-x-1 border-b overflow-x-auto mb-6"> <Button variant={currentSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'dashboard\')} data-state={currentSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Home className="mr-1 h-4 w-4"/> Dashboard</Button> <Button variant={currentSubView === \'search\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'search\')} data-state={currentSubView === \'search\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Search className="mr-1 h-4 w-4"/> Find Medicine</Button> <Button variant={currentSubView === \'upload\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'upload\')} data-state={currentSubView === \'upload\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><UploadCloud className="mr-1 h-4 w-4"/> Upload Rx</Button> {patientData.prescriptions.some(rx => rx.isQuoteReady) && ( <Button variant={currentSubView === \'quotedRx\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'quotedRx\')} data-state={currentSubView === \'quotedRx\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent relative"> <FileCheck className="mr-1 h-4 w-4"/> View Quote <span className="absolute top-0 right-0 block h-2 w-2 rounded-full ring-1 ring-white bg-red-500"/> </Button> )} </nav> {renderPatientContent()} </div> ); }\r\n        function PatientDashboard({ setActiveView, openVerificationModal, patientData, navigatePatientView }) { const patient = patientData; const handleScan = (mockData) => { const inventoryItem = MOCK_PHARMACY_INVENTORY.find(item => item.name === mockData.medicineName); const fullVerificationData = { ...mockData, wholesaleSource: inventoryItem?.wholesaleSource || \'N/A\', manufacturer: inventoryItem?.manufacturer || \'N/A\', }; openVerificationModal(fullVerificationData); }; const handleScanValidAntibiotic = () => handleScan(MOCK_VERIFICATION_DATA_VALID); const handleScanValidNonAntibiotic = () => handleScan({ ...MOCK_VERIFICATION_DATA_VALID, isAntibiotic: false, medicineName: \'Paracetamol 500mg Tabs\' }); const handleScanInvalid = () => handleScan(MOCK_VERIFICATION_DATA_INVALID); const handleScanExpired = () => handleScan(MOCK_VERIFICATION_DATA_EXPIRED); const quoteReadyRx = patient.prescriptions.find(rx => rx.isQuoteReady); return ( <div className="space-y-6"> {quoteReadyRx && ( <Card className="bg-gradient-to-r from-green-100 to-emerald-100 border-green-300"> <CardContent className="pt-4 flex flex-col sm:flex-row items-center justify-between gap-4"> <div className="flex items-center gap-3"> <FileCheck className="h-8 w-8 text-green-700 flex-shrink-0" /> <div> <h4 className="font-semibold text-green-800">Prescription Quote Ready!</h4> <p className="text-sm text-green-700">Quote for {quoteReadyRx.id} is available.</p> </div> </div> <Button onClick={() => navigatePatientView(\'quotedRx\')} className="bg-green-600 hover:bg-green-700 mt-2 sm:mt-0 flex-shrink-0">View Quote</Button> </CardContent> </Card> )} <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'search\')}> <Search className="mr-2 h-5 w-5 text-blue-600"/> <span>Order Medicine</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'upload\')}> <UploadCloud className="mr-2 h-5 w-5 text-green-600"/> <span>Upload Rx</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={handleScanValidAntibiotic}> <QrCode className="mr-2 h-5 w-5 text-indigo-600"/> <span>Verify Meds</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => alert(\'Pholder: Appointments\')}> <Stethoscope className="mr-2 h-5 w-5 text-purple-600"/> <span>Appointments</span> </Button> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <Card> <CardHeader> <CardTitle>Recent Orders</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>ID</TableHead> <TableHead>Date</TableHead> <TableHead>Status</TableHead> <TableHead>Total</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {patient.recentOrders.map((order) => ( <TableRow key={order.id}> <TableCell className="font-medium">{order.id}</TableCell> <TableCell>{order.date}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell>{order.total}</TableCell> <TableCell><Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View order ${order.id}`)}>View</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Orders\')}>View All Orders</Button> </CardFooter> </Card> </div> <div className="space-y-6"> <Card> <CardHeader> <CardTitle>My Prescriptions</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-60 overflow-y-auto pt-4"> {patient.prescriptions.filter(rx => !rx.isQuoteReady).map((rx) => ( <div key={rx.id} className={`text-sm p-3 rounded-lg border bg-gray-50`}> {rx.medicine ? ( <> <p className="font-semibold">{rx.medicine}</p> <p className="text-xs text-gray-600">Dr. {rx.doctor} ({rx.dateIssued})</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge> ({rx.refillsLeft} refills)</p> {rx.status === \'Active\' && rx.refillsLeft > 0 && ( <Button variant="link" size="sm" className="p-0 h-auto mt-1 text-xs" onClick={() => alert(`Pholder: Refill ${rx.medicine}`)}>Request Refill</Button> )} </> ) : ( <> <p className="font-semibold">Uploaded Rx ({rx.id})</p> <p className="text-xs text-gray-600">Uploaded: {rx.dateUploaded}</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge></p> {rx.notes && <p className="text-xs italic">Notes: "{rx.notes}"</p>} </> )} </div> ))} {patient.prescriptions.filter(rx => !rx.isQuoteReady).length === 0 && <p className="text-sm text-gray-500">No active/pending Rxs.</p>} </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Rxs\')}>View All Prescriptions</Button> </CardFooter> </Card> <Card> <CardHeader> <CardTitle>Reminders</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-48 overflow-y-auto pt-4"> {patient.reminders.map((rem) => ( <div key={rem.id} className="text-sm p-3 bg-blue-50 rounded-lg border border-blue-200 flex justify-between items-center"> <div><p className="font-semibold">{rem.type === \'Refill\' ? `Refill: ${rem.medicine}` : rem.details}</p><p className="text-xs text-gray-600">Due: {rem.dueDate}</p></div> <Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Dismiss ${rem.id}`)}>X</Button> </div> ))} {patient.reminders.length === 0 && <p className="text-sm text-gray-500">No reminders.</p>} </CardContent> </Card> </div> </div> <Card> <CardHeader> <CardTitle>Need Help?</CardTitle> </CardHeader> <CardContent className="pt-4 flex flex-wrap gap-4 justify-center"> <Button variant="outline" onClick={() => alert(\'Pholder: AI Chat\')}> <HelpCircle className="mr-2 h-4 w-4"/> Ask AI </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Live Chat\')}> <MessageSquare className="mr-2 h-4 w-4"/> Chat Pharmacist </Button> </CardContent> </Card> <Card className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200"> <CardHeader> <CardTitle className="text-green-800">Wellness Hub</CardTitle> </CardHeader> <CardContent className="pt-4 flex items-center gap-4"> <img src="https://placehold.co/100x80/a7f3d0/14532d?text=Wellness" alt="Wellness" className="rounded-lg h-20"/> <div className="flex-grow"><p className="mb-3 text-gray-700 text-sm">Book events, read articles, use tools.</p><Button onClick={() => setActiveView(\'wellness\')} className="bg-green-600 hover:bg-green-700" size="sm"> <Activity className="mr-2 h-4 w-4"/> Go to Wellness </Button></div> </CardContent> </Card> <Card className="mt-6"> <CardHeader><CardTitle>QR Scan Simulation</CardTitle></CardHeader> <CardContent className="pt-4 flex flex-wrap gap-2"> <Button variant="secondary" size="sm" onClick={handleScanValidAntibiotic}>Scan Valid ABX</Button> <Button variant="secondary" size="sm" onClick={handleScanValidNonAntibiotic}>Scan Valid Non-ABX</Button> <Button variant="destructive" size="sm" onClick={handleScanInvalid}>Scan Invalid</Button> <Button variant="warning" size="sm" onClick={handleScanExpired}>Scan Expired</Button> </CardContent> </Card> </div> ); }\r\n        function MedicineSearchListing({ navigatePatientView, navigateTo }) { const [searchTerm, setSearchTerm] = useState(\'\'); const [searchResults, setSearchResults] = useState(MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES); const handleSearch = (e) => { const term = e.target.value.toLowerCase(); setSearchTerm(e.target.value); setSearchResults( MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES.filter(med => med.name.toLowerCase().includes(term) || med.category.toLowerCase().includes(term) ) ); }; const handleAddToCart = (medId, pharmacyName, price) => { alert(`Pholder: Add ${medId} from ${pharmacyName} ($${price.toFixed(2)}) to cart.`); }; const handleViewDetails = (medId) => { alert(`Pholder: View details ${medId}.`); }; return ( <div className="space-y-6"> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /> <Input placeholder="Search medicine or category..." className="pl-12 text-base h-12" value={searchTerm} onChange={handleSearch} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {searchResults.length > 0 ? ( searchResults.map(med => ( <Card key={med.id} className="overflow-hidden flex flex-col"> <CardHeader className="flex flex-row items-start gap-4 p-4"> <img src={med.imageUrl} alt={med.name} className="w-20 h-20 object-contain rounded-md border flex-shrink-0" /> <div className="flex-grow"> <h4 className="font-semibold text-base mb-1">{med.name}</h4> <p className="text-sm text-gray-500 mb-2">{med.category}</p> {med.requiresPrescription && <Badge variant="warning">Rx</Badge>} {med.isAntibiotic && <Badge variant="destructive" className="ml-1">ABX</Badge>} </div> </CardHeader> <CardContent className="pt-0 pb-4 flex-grow flex flex-col"> <h5 className="text-sm font-medium mb-2 text-gray-700">Compare Prices:</h5> {med.pharmacies.length > 0 ? ( <div className="space-y-3"> {med.pharmacies.slice(0, 3).map(pharm => ( <div key={pharm.name} className="flex justify-between items-center p-2 bg-gray-50 rounded-md border"> <div> <span className="text-sm font-medium">{pharm.name}</span> <Badge variant={getStatusBadgeVariant(pharm.stockStatus)} className="ml-2">{pharm.stockStatus}</Badge> </div> <div className="text-right flex-shrink-0"> <p className="text-base font-semibold text-blue-700">${pharm.price.toFixed(2)}</p> <Button size="sm" variant="link" className="text-xs h-auto p-0 mt-1" onClick={() => handleAddToCart(med.id, pharm.name, pharm.price)} disabled={med.requiresPrescription} > {med.requiresPrescription ? \'Requires Rx\' : \'Add to Cart\'} </Button> </div> </div> ))} {med.pharmacies.length > 3 && ( <Button variant="link" size="sm" className="w-full mt-2" onClick={() => handleViewDetails(med.id)}> View {med.pharmacies.length - 3} more... </Button> )} </div> ) : ( <p className="text-sm text-gray-500 italic">Unavailable.</p> )} </CardContent> <CardFooter className="border-t pt-3"> <Button variant="outline" onClick={() => handleViewDetails(med.id)} className="w-full" size="sm"> View Details </Button> </CardFooter> </Card> )) ) : ( <div className="col-span-full text-center py-10 text-gray-500"> <Pill className="mx-auto h-12 w-12 text-gray-400 mb-4"/> <p>No medicines found for "{searchTerm}".</p> <p className="text-sm mt-2">Try again or <button className="text-blue-600 underline" onClick={() => navigateTo ? navigateTo(\'patientPortal\') : (navigatePatientView ? navigatePatientView(\'upload\') : alert(\'Cannot navigate\')) }>upload Rx</button>.</p> </div> )} </div> </div> ); }\r\n        function PrescriptionUpload({ navigatePatientView }) { const [selectedFile, setSelectedFile] = useState(null); const [notes, setNotes] = useState(\'\'); const [isUploading, setIsUploading] = useState(false); const [uploadStatus, setUploadStatus] = useState(\'\'); const handleFileChange = (event) => { if (event.target.files && event.target.files[0]) { setSelectedFile(event.target.files[0]); setUploadStatus(\'\'); } }; const handleSubmit = async (event) => { event.preventDefault(); if (!selectedFile) { alert("Select file."); return; } setIsUploading(true); setUploadStatus(\'\'); await new Promise(resolve => setTimeout(resolve, 1500)); const isSuccess = Math.random() > 0.2; if (isSuccess) { setUploadStatus(\'success\'); setSelectedFile(null); setNotes(\'\'); } else { setUploadStatus(\'error\'); } setIsUploading(false); }; return ( <div className="space-y-6 max-w-2xl mx-auto"> <Card> <CardHeader> <CardTitle>Upload Prescription</CardTitle> <CardDescription>Submit image/PDF for review/quote.</CardDescription> </CardHeader> <form onSubmit={handleSubmit}> <CardContent className="pt-6 space-y-4"> <div> <Label htmlFor="rx-file">File (Image/PDF)</Label> <Input id="rx-file" type="file" accept="image/*,.pdf" onChange={handleFileChange} required className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/> {selectedFile && (<p className="text-sm mt-2">Selected: {selectedFile.name}</p>)} </div> <div> <Label htmlFor="notes">Notes (Optional)</Label> <Textarea id="notes" placeholder="e.g., Brand preference, urgency..." value={notes} onChange={(e) => setNotes(e.target.value)} className="mt-1"/> </div> </CardContent> <CardFooter className="flex justify-end border-t pt-4"> <Button type="submit" disabled={isUploading || !selectedFile}> {isUploading ? \'Uploading...\' : <><UploadCloud className="mr-2 h-4 w-4" /> Submit</>} </Button> </CardFooter> </form> </Card> {uploadStatus === \'success\' && ( <div className="p-4 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm mt-4"> Upload successful! Check <button className="font-bold underline" onClick={() => navigatePatientView(\'dashboard\')}>Dashboard</button> for status/quote. </div> )} {uploadStatus === \'error\' && ( <div className="p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm mt-4"> Upload failed. Try again or contact support. </div> )} </div> ); }\r\n        function QuotedPrescriptionView({ quote, navigatePatientView }) { if (!quote) { return ( <div className="space-y-6"> <Card> <CardHeader><CardTitle>Prescription Quote</CardTitle></CardHeader> <CardContent className="pt-6 text-center text-gray-500"> No quote available. Check <button className="text-blue-600 underline" onClick={() => navigatePatientView(\'dashboard\')}>dashboard</button>. </CardContent> </Card> </div> ); } const handleAddToCart = () => { alert(`Pholder: Add quote ($${quote.total.toFixed(2)}) to cart.`); }; const handlePayment = (method) => { if (method === \'medicalAid\') { const useBio = window.confirm("Simulate MA Payment:\\nUse Biometrics?"); if (useBio) { alert("Place finger... (Sim)"); setTimeout(() => { const ok = Math.random() > 0.1; alert(ok ? "Biometric OK! Processing..." : "Biometric Failed."); if(ok){ /* TODO: Update order */ } }, 1500); } else { const pin = prompt("Enter MA PIN (Sim):"); if (pin) { alert("PIN OK. Processing..."); /* TODO: Update order */ } else { alert("PIN cancelled."); } } } else { alert(`Pholder: Proceed to ${method} ($${quote.total.toFixed(2)})...`); } }; return ( <div className="space-y-6"> <Card> <CardHeader> <CardTitle>Your Prescription Quote</CardTitle> <CardDescription>Review items & checkout.</CardDescription> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="text-center">Qty</TableHead> <TableHead className="text-right">Price</TableHead> <TableHead className="text-right">Subtotal</TableHead> </TableRow> </TableHeader> <TableBody> {quote.items.map((item, index) => ( <TableRow key={index}> <TableCell className="font-medium">{item.name}</TableCell> <TableCell className="text-center">{item.qty}</TableCell> <TableCell className="text-right">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right">${(item.qty * item.price).toFixed(2)}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3} className="text-right font-semibold text-base">Total:</TableCell> <TableCell className="text-right font-bold text-lg">${quote.total.toFixed(2)}</TableCell> </TableRow> </TableFooter> </Table> </CardContent> <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4 border-t pt-6"> <Button variant="outline" onClick={handleAddToCart}> <ShoppingCart className="mr-2 h-4 w-4"/> Add to Cart </Button> <div className="flex flex-wrap gap-2"> <Button onClick={() => handlePayment(\'medicalAid\')} className="bg-green-600 hover:bg-green-700"> <Fingerprint className="mr-2 h-4 w-4" /> Pay with MA </Button> <Button onClick={() => handlePayment(\'EcoCash\')}> Pay EcoCash </Button> <Button onClick={() => handlePayment(\'Other\')} variant="secondary"> Other </Button> </div> </CardFooter> </Card> </div> ); }\r\n        function MedicineVerificationModal({ isOpen, onClose, verificationData }) { if (!verificationData) return null; const { status, message, medicineName, batchNumber, expiryDate, pharmacySource, wholesaleSource, manufacturer, isAntibiotic } = verificationData; let statusIcon, statusColorClass, title, bgColorClass = "bg-white"; switch (status) { case \'verified\': statusIcon = <CheckCircle className="h-12 w-12 text-green-500" />; statusColorClass = "text-green-700"; title = "Verified"; bgColorClass = "bg-green-50"; break; case \'invalid\': statusIcon = <XCircle className="h-12 w-12 text-red-500" />; statusColorClass = "text-red-700"; title = "FAILED"; bgColorClass = "bg-red-50"; break; case \'expired\': statusIcon = <AlertTriangle className="h-12 w-12 text-yellow-500" />; statusColorClass = "text-yellow-700"; title = "EXPIRED"; bgColorClass = "bg-yellow-50"; break; default: statusIcon = <Info className="h-12 w-12 text-gray-500" />; statusColorClass = "text-gray-700"; title = "Info"; } return ( <Modal isOpen={isOpen} onClose={onClose} title={title} maxWidth="md"> <div className={`flex flex-col items-center text-center space-y-4 p-6 rounded-lg ${bgColorClass}`}> {statusIcon} <p className={`font-semibold text-lg ${statusColorClass}`}>{message}</p> {(status === \'verified\' || status === \'expired\') && ( <Card className="w-full mt-4 text-left bg-white shadow-md"> <CardHeader><CardTitle className="text-base">Details</CardTitle></CardHeader> <CardContent className="space-y-1 text-sm pt-2"> <div className="grid grid-cols-3 gap-x-2 gap-y-1"> <span className="font-medium text-gray-500">Med:</span> <span className="col-span-2 font-medium">{medicineName || \'N/A\'}</span> <span className="font-medium text-gray-500">Batch:</span> <span className="col-span-2 font-mono">{batchNumber || \'N/A\'}</span> <span className="font-medium text-gray-500">Expiry:</span> <span className={`col-span-2 ${status === \'expired\' ? \'text-red-600 font-bold\' : \'\'}`}>{expiryDate || \'N/A\'}</span> <span className="font-medium text-gray-500">Manuf:</span> <span className="col-span-2">{manufacturer || \'N/A\'}</span> <span className="font-medium text-gray-500">Whsle:</span> <span className="col-span-2">{wholesaleSource || \'N/A\'}</span> <span className="font-medium text-gray-500">Pharm:</span> <span className="col-span-2">{pharmacySource || \'N/A\'}</span> </div> </CardContent> </Card> )} {status === \'verified\' && isAntibiotic && ( <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 text-yellow-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>ABX Alert:</strong> Use only as prescribed.</span> </div> )} {status === \'invalid\' && ( <div className="mt-4 p-3 bg-red-100 border border-red-300 text-red-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>Action:</strong> Do not use. Report!</span> </div> )} <Button onClick={onClose} className="mt-6" variant={status === \'invalid\' ? \'destructive\' : \'default\'}>Close</Button> </div> </Modal> ); }\r\n\r\n        // --- Pharmacy Portal & Sub-Components ---\r\n        function PharmacyPortal({ setActiveView, openVerificationModal, patientData }) {\r\n            console.log("Rendering PharmacyPortal Component");\r\n            const [pharmacySubView, setPharmacySubView] = useState(\'orders\');\r\n            const [isDispensingModalOpen, setDispensingModalOpen] = useState(false);\r\n            const [isOrderDetailsModalOpen, setOrderDetailsModalOpen] = useState(false);\r\n            const [selectedOrderForModal, setSelectedOrderForModal] = useState(null);\r\n            const [orders, setOrders] = useState(() => {\r\n                 console.log("Initializing PharmacyPortal \'orders\' state with MOCK_PHARMACY_ORDERS.");\r\n                 return JSON.parse(JSON.stringify(MOCK_PHARMACY_ORDERS));\r\n            });\r\n\r\n            const updateOrderStatus = (orderId, newStatus) => {\r\n                console.log(`(updateOrderStatus) called for ID: ${orderId}, New Status: ${newStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current status: ${order.status}. Updating to ${newStatus}.`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(order.medicalAidStatus)); return { ...order, status: newStatus, requiresAction }; } return order; })); };\r\n\r\n            const updateOrderAndMAStatus = (orderId, newOrderStatus, newMAStatus) => {\r\n                console.log(`(updateOrderAndMAStatus) called for ID: ${orderId}. New Order Status: ${newOrderStatus}, New MA Status: ${newMAStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current: Status=${order.status}, MA=${order.medicalAidStatus}.`); const updatedStatus = newOrderStatus ?? order.status; const updatedMAStatus = newMAStatus ?? order.medicalAidStatus; const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(updatedStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(updatedMAStatus)); console.log(` -> Updated state: Status=${updatedStatus}, MA=${updatedMAStatus}, RequiresAction=${requiresAction}`); return { ...order, status: updatedStatus, medicalAidStatus: updatedMAStatus, requiresAction }; } return order; })); };\r\n\r\n            const openDispensingModal = () => setDispensingModalOpen(true);\r\n            const closeDispensingModal = () => setDispensingModalOpen(false);\r\n            const openOrderDetailsModalHandler = (order) => { console.log("Opening Order Details Modal for order:", order); setSelectedOrderForModal(order); setOrderDetailsModalOpen(true); };\r\n            const closeOrderDetailsModalHandler = () => { console.log("Closing Order Details Modal"); setOrderDetailsModalOpen(false); setSelectedOrderForModal(null); };\r\n\r\n            const renderSubView = () => {\r\n                 console.log("Rendering Pharmacy SubView:", pharmacySubView);\r\n                 // Wrap sub-view rendering in try-catch for better error isolation\r\n                 try {\r\n                     switch(pharmacySubView) {\r\n                        case \'inventory\':\r\n                            console.log(" -> Attempting to render PharmacyInventory...");\r\n                            return <PharmacyInventory />; // The component we are debugging\r\n                        case \'orders\': return <OrderManagementView orders={orders} updateOrderStatus={updateOrderStatus} openOrderDetailsModal={openOrderDetailsModalHandler} />;\r\n                        case \'marketWatch\': return <MarketWatchView />;\r\n                        case \'analytics\': return <PharmacyAnalytics />;\r\n                        case \'claims\': return <MedicalAidClaimsView orders={orders} />;\r\n                        default: console.warn(`Unknown pharmacySubView: ${pharmacySubView}.`); return <div className="text-center p-8 text-gray-500">Select a view from the tabs above.</div>;\r\n                     }\r\n                 } catch (error) {\r\n                     console.error(`Error rendering pharmacy subview "${pharmacySubView}":`, error);\r\n                     // Display error prominently if sub-view fails\r\n                     return (\r\n                        <div className="text-center p-8 text-red-600 bg-red-50 border border-red-300 rounded-md">\r\n                             <h3 className="text-lg font-semibold mb-2">Error Loading \'{pharmacySubView}\' View</h3>\r\n                             <p>There was a problem rendering this section.</p>\r\n                             <p className="text-sm mt-2">Please check the browser console (F12) for technical details.</p>\r\n                             <pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || error.message}</pre>\r\n                         </div>\r\n                    );\r\n                 }\r\n            };\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <nav className="flex space-x-1 border-b overflow-x-auto">\r\n                        <Button variant={pharmacySubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'orders\')} data-state={pharmacySubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button>\r\n                        <Button variant=\'ghost\' onClick={openDispensingModal} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Pill className="mr-2 h-4 w-4" /> Dispense</Button>\r\n                        <Button variant={pharmacySubView === \'inventory\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'inventory\')} data-state={pharmacySubView === \'inventory\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Package className="mr-2 h-4 w-4" /> Inventory</Button>\r\n                        <Button variant={pharmacySubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'marketWatch\')} data-state={pharmacySubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button>\r\n                        <Button variant={pharmacySubView === \'analytics\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'analytics\')} data-state={pharmacySubView === \'analytics\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BarChart className="mr-2 h-4 w-4" /> Analytics</Button>\r\n                        <Button variant={pharmacySubView === \'claims\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'claims\')} data-state={pharmacySubView === \'claims\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CreditCard className="mr-2 h-4 w-4" /> Claims</Button>\r\n                        <Button variant=\'ghost\' onClick={() => alert(\'Pholder: Walk-in Quote\')} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4" /> Quote Walk-in</Button>\r\n                    </nav>\r\n                    <div className="pt-6">\r\n                       {renderSubView()}\r\n                    </div>\r\n                    <DispensingModal isOpen={isDispensingModalOpen} onClose={closeDispensingModal} />\r\n                    <OrderDetailsModal isOpen={isOrderDetailsModalOpen} onClose={closeOrderDetailsModalHandler} order={selectedOrderForModal} updateOrderAndMAStatusCallback={updateOrderAndMAStatus} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function PharmacyInventory() {\r\n            console.log("PharmacyInventory: Component rendering started.");\r\n            const [inventory, setInventory] = useState(MOCK_PHARMACY_INVENTORY);\r\n            const [searchTerm, setSearchTerm] = useState(\'\');\r\n            const [filterCategory, setFilterCategory] = useState(\'all\');\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            console.log("PharmacyInventory: State initialized.");\r\n\r\n            const filteredInventory = useMemo(() => {\r\n                console.log("PharmacyInventory: Calculating filteredInventory memo...");\r\n                try {\r\n                    return inventory.filter(item => {\r\n                        // Added robust checks for potential null/undefined values\r\n                        const term = searchTerm.toLowerCase();\r\n                        const nameMatch = item && item.name && typeof item.name.toLowerCase === \'function\' ? item.name.toLowerCase().includes(term) : false;\r\n                        const idMatch = item && item.id && typeof item.id.toLowerCase === \'function\' ? item.id.toLowerCase().includes(term) : false;\r\n                        const categoryMatch = item && item.category && typeof item.category.toLowerCase === \'function\' ? item.category.toLowerCase().includes(term) : false;\r\n                        const matchesSearch = nameMatch || idMatch || categoryMatch;\r\n\r\n                        const matchesCategory = filterCategory === \'all\' || (item && item.category === filterCategory);\r\n                        const matchesStatus = filterStatus === \'all\' || (item && item.status === filterStatus);\r\n                        return matchesSearch && matchesCategory && matchesStatus;\r\n                    });\r\n                } catch(error) {\r\n                    console.error("PharmacyInventory: Error during filtering:", error);\r\n                    return []; // Return empty array on error\r\n                }\r\n            }, [inventory, searchTerm, filterCategory, filterStatus]);\r\n\r\n            const categories = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating categories memo...");\r\n                 try {\r\n                    const uniqueCategories = new Set(inventory.map(item => item?.category).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueCategories)].sort();\r\n                 } catch (error) {\r\n                    console.error("PharmacyInventory: Error calculating categories:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            const statuses = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating statuses memo...");\r\n                 try {\r\n                    const uniqueStatuses = new Set(inventory.map(item => item?.status).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueStatuses)];\r\n                 } catch(error) {\r\n                    console.error("PharmacyInventory: Error calculating statuses:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            console.log("PharmacyInventory: Memos calculated. Filtered count:", filteredInventory.length);\r\n\r\n            const handleAddItem = () => alert(\'Pholder: Add Item Modal\');\r\n            const handleEditItem = (itemId) => alert(`Pholder: Edit Modal ${itemId}`);\r\n            const handleOrderFromWholesaler = () => alert(\'Pholder: Wholesaler Order UI\');\r\n\r\n            console.log("PharmacyInventory: Preparing to return JSX.");\r\n\r\n            // Wrap the entire JSX return in a try-catch as a last resort for rendering errors\r\n            try {\r\n                return (\r\n                    <div className="space-y-6">\r\n                        {/* Header */}\r\n                        <header className="flex flex-wrap justify-between items-center pb-4 gap-4 border-b">\r\n                            <div> <h2 className="text-xl font-semibold">Inventory Management</h2> <p className="text-gray-500 text-sm">Manage stock & details.</p> </div>\r\n                            <div className="flex items-center space-x-2 flex-wrap gap-2"> <Button variant="outline" size="sm" onClick={handleOrderFromWholesaler}><Truck className="mr-2 h-4 w-4" /> Order Stock</Button> <Button size="sm" onClick={handleAddItem}><PlusCircle className="mr-2 h-4 w-4" /> Add Item</Button> </div>\r\n                        </header>\r\n                        {/* Filters */}\r\n                        <Card>\r\n                            <CardContent className="pt-6 flex flex-wrap items-center gap-4">\r\n                                <div className="relative flex-grow min-w-[200px]"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" /><Input placeholder="Search Name, ID, Category..." className="pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="cat-filter" className="sr-only">Category</Label><Select id="cat-filter" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full">{categories.map(cat => (<SelectItem key={cat} value={cat}>{cat === \'all\' ? \'All Categories\' : cat}</SelectItem>))}</Select></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="stat-filter" className="sr-only">Status</Label><Select id="stat-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* Table */}\r\n                        <Card>\r\n                            <CardHeader><CardTitle>Medicine Stock List</CardTitle></CardHeader>\r\n                            <CardContent className="pt-4">\r\n                                <Table>\r\n                                    <TableHeader><TableRow><TableHead>ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Stock</TableHead><TableHead className="text-right">Price</TableHead><TableHead>Status</TableHead><TableHead>Supplier</TableHead><TableHead>Updated</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                    <TableBody>\r\n                                        {filteredInventory.length > 0 ? (\r\n                                            filteredInventory.map((item) => (\r\n                                                item && item.id ? (\r\n                                                    <TableRow key={item.id} className={item.stock === 0 ? \'opacity-60 bg-gray-50\' : item.stock < 10 ? \'bg-yellow-50/70\' : \'\'}>\r\n                                                        <TableCell className="font-mono text-xs">{item.id}</TableCell>\r\n                                                        <TableCell className="font-medium">{item.name || \'N/A\'}</TableCell>\r\n                                                        <TableCell>{item.category || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right font-semibold">{typeof item.stock === \'number\' ? item.stock : \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right">{(typeof item.price === \'number\' ? item.price : 0).toFixed(2)}</TableCell>\r\n                                                        <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status || \'N/A\'}</Badge></TableCell>\r\n                                                        <TableCell>{item.supplier || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-xs">{item.lastUpdated || \'N/A\'}</TableCell>\r\n                                                        <TableCell><Button variant="ghost" size="sm" onClick={() => handleEditItem(item.id)}>Edit</Button></TableCell>\r\n                                                    </TableRow>\r\n                                                ) : null\r\n                                            ))\r\n                                        ) : (\r\n                                            <TableRow><TableCell colSpan={9} className="h-24 text-center text-gray-500">No inventory items match the current filters.</TableCell></TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </CardContent>\r\n                            <CardFooter className="pt-4 justify-between items-center border-t">\r\n                                <p className="text-sm text-gray-500">Showing {filteredInventory.length} of {inventory.length} items.</p>\r\n                                <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                );\r\n            } catch (error) {\r\n                console.error("PharmacyInventory: Error during JSX rendering:", error);\r\n                return <div className="p-4 text-red-600 bg-red-50 border border-red-300 rounded">Error rendering inventory table. Check console. <pre>{error.stack}</pre></div>;\r\n            }\r\n        }\r\n\r\n        function OrderManagementView({ orders, updateOrderStatus, openOrderDetailsModal }) {\r\n            console.log("Rendering OrderManagementView. Received orders prop:", orders);\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            const validOrders = Array.isArray(orders) ? orders : [];\r\n            if (!Array.isArray(orders)) { console.error("OrderManagementView received non-array \'orders\' prop:", orders); }\r\n            const statuses = useMemo(() => { if (!validOrders.length) return [\'all\']; const validStatuses = validOrders.map(order => order?.status).filter(Boolean); return [\'all\', ...new Set(validStatuses)].sort(); }, [validOrders]);\r\n            const filteredOrders = useMemo(() => { if (!validOrders.length) return []; if (filterStatus === \'all\') return validOrders; return validOrders.filter(order => order?.status === filterStatus); }, [validOrders, filterStatus]);\r\n            console.log(`OrderManagementView: Filter Status=\'${filterStatus}\', Filtered Orders Count=${filteredOrders.length}`);\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <header className="pb-4 flex flex-wrap justify-between items-center gap-4 border-b">\r\n                        <div><h2 className="text-xl font-semibold">Order Management</h2><p className="text-gray-500 text-sm">View and manage incoming patient orders.</p></div>\r\n                        <div className="flex items-center gap-2"><Label htmlFor="order-status-filter" className="text-sm">Filter by Status:</Label><Select id="order-status-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-40">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                    </header>\r\n                    <Card>\r\n                        <CardHeader><CardTitle>Incoming & Recent Orders</CardTitle></CardHeader>\r\n                        <CardContent className="pt-4">\r\n                            <Table>\r\n                                <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Patient</TableHead><TableHead>Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Total</TableHead><TableHead>Medical Aid</TableHead><TableHead>Payment</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                <TableBody>\r\n                                    {filteredOrders.length > 0 ? (\r\n                                        filteredOrders.map((order) => ( order && order.id ? ( <TableRow key={order.id} className={order.requiresAction ? \'bg-blue-50/70 hover:bg-blue-100/50\' : \'\'}>\r\n                                                    <TableCell className="font-mono text-xs">{order.id}</TableCell>\r\n                                                    <TableCell>{order.patientName || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.date || \'N/A\'}</TableCell>\r\n                                                    <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status || \'N/A\'}</Badge></TableCell>\r\n                                                    <TableCell className="text-right font-medium">${(typeof order.total === \'number\' ? order.total : 0).toFixed(2)}</TableCell>\r\n                                                    <TableCell>{order.medicalAidProvider ? (<Badge variant={getClaimStatusVariant(order.medicalAidStatus)}>{order.medicalAidStatus || \'N/A\'}</Badge>) : (<Badge variant="outline">N/A</Badge>)}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.paymentMethod || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="space-x-1 whitespace-nowrap">\r\n                                                        <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => openOrderDetailsModal(order)}>Details</Button>\r\n                                                        {order.status === \'Pending Approval\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Approve</Button>}\r\n                                                        {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Ready for Pickup\')}>Ready</Button>}\r\n                                                        {order.status === \'Ready for Pickup\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Completed\')}>Complete</Button>}\r\n                                                        {order.status === \'Pending Payment\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Mark Paid</Button> }\r\n                                                    </TableCell>\r\n                                                </TableRow> ) : null\r\n                                        ))\r\n                                    ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No orders match the selected filter.</TableCell></TableRow> )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                        <CardFooter className="pt-4 border-t justify-between items-center">\r\n                             <p className="text-sm text-gray-500">Showing {filteredOrders.length} of {validOrders.length} orders.</p>\r\n                             <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        function OrderDetailsModal({ isOpen, onClose, order, updateOrderAndMAStatusCallback }) {\r\n            const [internalOrderData, setInternalOrderData] = useState(null);\r\n            useEffect(() => { console.log("OrderDetailsModal Effect: Received order prop:", order); if (order && (!internalOrderData || internalOrderData.id !== order.id)) { console.log(` -> Updating internal state for order ID: ${order.id}`); setInternalOrderData({ ...order }); } else if (!order && internalOrderData) { console.log(" -> Clearing internal state as order prop is null/undefined."); setInternalOrderData(null); } }, [order]);\r\n            if (!isOpen || !internalOrderData) { return null; }\r\n            const { id, patientName, date, status, total, items, medicalAidStatus, amountCovered, medicalAidProvider, paymentMethod } = internalOrderData;\r\n            console.log(`OrderDetailsModal Rendering content for Order ID: ${id}`);\r\n            const showClaimButton = medicalAidProvider && (medicalAidStatus === \'Received\' || medicalAidStatus === \'Pending Patient Auth\');\r\n            const showMarkPaidButton = status === \'Pending Payment\';\r\n            const showApproveButton = status === \'Pending Approval\';\r\n            const showReadyButton = status === \'Processing\';\r\n            const showCompleteButton = status === \'Ready for Pickup\' || status === \'Out for Delivery\';\r\n            const handleClaimSubmit = () => { const newMAStatus = \'Claim Submitted\'; console.log(`Modal action: Submitting claim for ${id}, setting MA status to ${newMAStatus}`); setInternalOrderData(prev => prev ? { ...prev, medicalAidStatus: newMAStatus, requiresAction: false } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, null, newMAStatus); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Claim Submitted for ${id}`); };\r\n            const handleStatusUpdate = (newStatus) => { console.log(`Modal action: Updating status for ${id} to ${newStatus}`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(medicalAidStatus)); setInternalOrderData(prev => prev ? { ...prev, status: newStatus, requiresAction } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, newStatus, null); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Order ${id} updated to ${newStatus}.`); };\r\n            const orderItems = Array.isArray(items) ? items : [];\r\n\r\n            return (\r\n                <Modal isOpen={isOpen} onClose={onClose} title={`Order Details: ${id}`} maxWidth="xl">\r\n                    <div className="space-y-4">\r\n                        <Card><CardHeader><CardTitle className="text-base">Order Information</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Patient:</span> <span className="font-medium">{patientName || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Date:</span> <span>{date || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Status:</span> <span><Badge variant={getStatusBadgeVariant(status)}>{status || \'N/A\'}</Badge></span></div><div><span className="text-gray-500 mr-2">Total:</span> <span className="font-semibold">${(typeof total === \'number\' ? total : 0).toFixed(2)}</span></div><div><span className="text-gray-500 mr-2">Payment Method:</span> <span>{paymentMethod || \'N/A\'}</span></div></CardContent></Card>\r\n                        <Card><CardHeader><CardTitle className="text-base">Items in Order</CardTitle></CardHeader><CardContent className="pt-4">{orderItems.length > 0 ? (<ul className="space-y-1 text-sm">{orderItems.map((item, index) => ( <li key={item.id || index} className="flex justify-between border-b py-1 last:border-0"><span>{item.qty || 0} x {item.name || \'Unknown Item\'}</span></li> ))}</ul>) : (<p className="text-sm text-gray-500 italic">No items listed for this order.</p>)}</CardContent></Card>\r\n                        {medicalAidProvider && ( <Card><CardHeader><CardTitle className="text-base">Medical Aid Details</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Provider:</span> <span>{medicalAidProvider}</span></div><div><span className="text-gray-500 mr-2">Claim Status:</span> <Badge variant={getClaimStatusVariant(medicalAidStatus)}>{medicalAidStatus || \'N/A\'}</Badge></div><div><span className="text-gray-500 mr-2">Amount Covered:</span> <span className="font-semibold">${(typeof amountCovered === \'number\' ? amountCovered : 0).toFixed(2)}</span></div>{showClaimButton && ( <div className="md:col-span-2 mt-2"><Button onClick={handleClaimSubmit} size="sm" variant="success"><FileCheck className="mr-2 h-4 w-4" /> Submit Claim Now</Button></div> )}</CardContent></Card> )}\r\n                        <div className="flex flex-wrap justify-between items-center gap-3 border-t pt-4 mt-4">\r\n                            <div className="flex flex-wrap gap-2">{showApproveButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm">Approve Order</Button>}{showReadyButton && <Button onClick={() => handleStatusUpdate(\'Ready for Pickup\')} size="sm">Mark Ready for Pickup</Button>}{showCompleteButton && <Button onClick={() => handleStatusUpdate(\'Completed\')} size="sm" variant="success">Mark as Completed</Button>}{showMarkPaidButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm" variant="success">Mark as Paid</Button> }</div>\r\n                            <Button variant="outline" onClick={onClose}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n        function DispensingModal({ isOpen, onClose }) { const [patientSearchTerm, setPatientSearchTerm] = useState(\'\'); const [selectedPatient, setSelectedPatient] = useState(null); const [medicineSearchTerm, setMedicineSearchTerm] = useState(\'\'); const [dispensingCart, setDispensingCart] = useState([]); const [inventory] = useState(MOCK_PHARMACY_INVENTORY); const handlePatientSearch = () => { const term = patientSearchTerm.toLowerCase(); const foundPatient = MOCK_PHARMACY_ORDERS.find(o => o.patientName.toLowerCase().includes(term) || o.patientId?.toLowerCase() === term); if (foundPatient) { setSelectedPatient({ id: foundPatient.patientId, name: foundPatient.patientName }); setPatientSearchTerm(\'\'); } else { setSelectedPatient(null); alert(\'Patient not found.\'); } }; const filteredInventory = useMemo(() => { if (!medicineSearchTerm) return []; return inventory.filter(item => item.name.toLowerCase().includes(medicineSearchTerm.toLowerCase()) && item.stock > 0); }, [medicineSearchTerm, inventory]); const addToCart = (medItem) => { const existingItemIndex = dispensingCart.findIndex(item => item.id === medItem.id); if (existingItemIndex > -1) { const currentQty = dispensingCart[existingItemIndex].qty; if (currentQty < medItem.stock) { setDispensingCart(prevCart => prevCart.map((item, index) => index === existingItemIndex ? { ...item, qty: item.qty + 1 } : item)); } else { alert(`Max stock (${medItem.stock}) reached for ${medItem.name}`); } } else { if (medItem.stock > 0) { setDispensingCart(prevCart => [...prevCart, { id: medItem.id, name: medItem.name, qty: 1, price: medItem.price, stock: medItem.stock }]); } else { alert(`${medItem.name} is out of stock.`); } } setMedicineSearchTerm(\'\'); }; const updateQty = (itemId, newQtyStr) => { const newQty = parseInt(newQtyStr, 10); if (isNaN(newQty)) return; const itemInCart = dispensingCart.find(item => item.id === itemId); if (!itemInCart) return; if (newQty <= 0) { setDispensingCart(prevCart => prevCart.filter(item => item.id !== itemId)); } else if (newQty <= itemInCart.stock) { setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: newQty } : item)); } else { alert(`Quantity (${newQty}) exceeds stock (${itemInCart.stock}). Maximum quantity set.`); setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: itemInCart.stock } : item)); } }; const calculateTotal = () => dispensingCart.reduce((total, item) => total + (item.qty * item.price), 0); const handleDispenseAndSendToPOS = () => { if (!selectedPatient && !window.confirm("No patient selected. Proceed as Walk-in Sale?")) return; if (dispensingCart.length === 0) { alert("Cart is empty."); return; } const patientInfo = selectedPatient || { id: \'WALK-IN\', name: \'Walk-in Customer\' }; const saleData = { patient: patientInfo, items: dispensingCart, total: calculateTotal(), timestamp: new Date().toISOString(), type: \'Dispensed\' }; console.log("-> Sending to POS:", saleData); alert(`Dispensed for ${patientInfo.name}. Total: $${saleData.total.toFixed(2)}. (Simulated POS send)`); handleReset(); onClose(); }; const handleReset = () => { setPatientSearchTerm(\'\'); setSelectedPatient(null); setMedicineSearchTerm(\'\'); setDispensingCart([]); }; return ( <Modal isOpen={isOpen} onClose={onClose} title="Dispense / Walk-in Sale" maxWidth="4xl"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[70vh]"> <div className="lg:col-span-1 space-y-4 flex flex-col"> <Card className="flex-shrink-0"> <CardHeader><CardTitle className="text-base">1. Select Patient</CardTitle></CardHeader> <CardContent className="pt-2 space-y-2"> <div className="flex gap-2 items-center"> <Input placeholder="Search Name/ID or leave blank..." value={patientSearchTerm} onChange={(e) => setPatientSearchTerm(e.target.value)}/> <Button onClick={handlePatientSearch} size="sm" variant="outline">Find</Button> </div> {selectedPatient ? ( <div className="p-2 bg-green-100 rounded text-sm font-medium text-green-800">Selected: {selectedPatient.name}</div> ) : ( <div className="p-2 bg-yellow-100 rounded text-sm text-yellow-800">Default: Walk-in Sale</div> )} </CardContent> </Card> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">2. Add Medicines</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow flex flex-col"> <Input placeholder="Search Medicine Name..." value={medicineSearchTerm} onChange={(e) => setMedicineSearchTerm(e.target.value)} className="mb-2"/> <div className="mt-1 border rounded-md overflow-y-auto flex-grow bg-gray-50 min-h-[150px]"> {medicineSearchTerm && filteredInventory.length > 0 ? ( filteredInventory.map(item => ( <div key={item.id} className="p-2 hover:bg-blue-100 cursor-pointer flex justify-between items-center border-b" onClick={() => addToCart(item)}> <span className="text-sm">{item.name} <span className="text-xs text-gray-500">(Stock: {item.stock})</span></span> <span className="text-sm font-semibold">${item.price.toFixed(2)}</span> </div> )) ) : medicineSearchTerm ? ( <p className="text-sm text-red-500 p-4 text-center italic">No matching medicine found in stock.</p> ) : ( <p className="text-sm text-gray-400 p-4 text-center italic">Type above to search medicines...</p> )} </div> </CardContent> </Card> </div> <div className="lg:col-span-2 space-y-4 flex flex-col"> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">3. Review Cart</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow overflow-y-auto"> {dispensingCart.length > 0 ? ( <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="w-24 text-center">Qty</TableHead> <TableHead className="w-20 text-right">Price</TableHead> <TableHead className="w-24 text-right">Subtotal</TableHead> <TableHead className="w-10 text-center">Rem</TableHead> </TableRow> </TableHeader> <TableBody> {dispensingCart.map(item => ( <TableRow key={item.id}> <TableCell className="text-sm">{item.name}</TableCell> <TableCell> <Input type="number" min="1" max={item.stock} value={item.qty} onChange={(e) => updateQty(item.id, e.target.value)} className="h-8 w-16 text-center p-1"/> </TableCell> <TableCell className="text-right text-sm">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right text-sm font-medium">${(item.qty * item.price).toFixed(2)}</TableCell> <TableCell className="text-center"> <button onClick={() => updateQty(item.id, 0)} className="text-red-500 hover:text-red-700 p-1 font-bold" title="Remove">&times;</button> </TableCell> </TableRow> ))} </TableBody> </Table> ) : ( <p className="text-center text-gray-500 py-10 italic">Cart is currently empty. Add medicines from the left.</p> )} </CardContent> {dispensingCart.length > 0 && ( <CardFooter className="border-t pt-3 flex justify-end items-center"> <span className="text-sm font-semibold mr-2">Total Amount:</span> <span className="font-bold text-xl text-blue-700">${calculateTotal().toFixed(2)}</span> </CardFooter> )} </Card> <div className="flex justify-between gap-3 pt-4 border-t flex-shrink-0"> <Button variant="outline" onClick={handleReset}>Clear Cart</Button> <div className="flex gap-3"> <Button variant="secondary" onClick={onClose}>Cancel</Button> <Button onClick={handleDispenseAndSendToPOS} disabled={dispensingCart.length === 0}> <MonitorSmartphone className="mr-2 h-4 w-4" /> Dispense & Send to POS </Button> </div> </div> </div> </div> </Modal> ); }\r\n        function PharmacyAnalytics() { return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Analytics & Reports</h2> <p className="text-gray-500 text-sm">Performance insights.</p> </header> <Card> <CardHeader><CardTitle>Key Performance Indicators (KPIs)</CardTitle></CardHeader> <CardContent className="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Sales (Today)</p><p className="text-2xl font-bold text-blue-800">$1,234</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Orders (Today)</p><p className="text-2xl font-bold text-green-800">42</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Low Stock Items</p><p className="text-2xl font-bold text-yellow-900">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Low Stock\').length}</p></div> <div className="p-4 bg-red-50 rounded border border-red-200"><p className="text-xs uppercase text-red-600 font-medium">Out of Stock</p><p className="text-2xl font-bold text-red-800">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Out of Stock\').length}</p></div> </CardContent> </Card> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader><CardTitle>Monthly Sales Trend</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><BarChartComponent data={MOCK_SALES_DATA} /></ResponsiveContainer></CardContent> </Card> <Card> <CardHeader><CardTitle>Top Selling Categories</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><LineChart data={[{name:\'Pain\', v:40}, {name:\'ABX\', v:30}, {name:\'Vit\', v:25}]} /></ResponsiveContainer></CardContent> </Card> </div> <Card> <CardHeader><CardTitle>Generate Custom Reports</CardTitle></CardHeader> <CardContent className="pt-4 space-y-3"> <p className="text-sm text-gray-600">Select report type and date range to generate.</p> <div className="flex flex-wrap gap-4 items-end"> <div className="flex-grow min-w-[150px]"> <Label htmlFor="report-type">Report Type</Label> <Select id="report-type" className="mt-1"> <SelectItem value="daily_sales">Daily Sales Summary</SelectItem> <SelectItem value="monthly_sales">Monthly Sales Report</SelectItem> <SelectItem value="sales_tender">Sales by Tender Type</SelectItem> <SelectItem value="sales_user">Sales by User</SelectItem> <SelectItem value="stock_level">Current Stock Levels</SelectItem> <SelectItem value="stock_usage">Stock Usage Report</SelectItem> <SelectItem value="stock_expiry">Stock Expiry Report</SelectItem> <SelectItem value="debtors">Debtors List</SelectItem> <SelectItem value="inv_valuation">Inventory Valuation</SelectItem> </Select> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="start-date">Start Date</Label> <Input id="start-date" type="date" className="mt-1"/> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="end-date">End Date</Label> <Input id="end-date" type="date" className="mt-1"/> </div> <Button onClick={() => alert(\'Pholder: Generate selected report\')}><FileCheck className="mr-2 h-4 w-4"/> Generate Report</Button> </div> </CardContent> </Card> </div> ); }\r\n        function MedicalAidClaimsView({ orders }) { const validOrders = Array.isArray(orders) ? orders : []; const claimsData = validOrders.filter(o => o && o.medicalAidProvider).map(o => ({ id: `CLAIM-${o.id}`, orderId: o.id, patientName: o.patientName || \'N/A\', provider: o.medicalAidProvider, date: o.date || \'N/A\', amountClaimed: (typeof o.amountCovered === \'number\' ? o.amountCovered : 0), status: o.medicalAidStatus || \'N/A\', })); return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Medical Aid Claims Management</h2> <p className="text-gray-500 text-sm">Track and manage medical aid claims.</p> </header> <Card> <CardHeader><CardTitle>Claim Status Overview</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Claim ID</TableHead><TableHead>Order ID</TableHead><TableHead>Patient</TableHead> <TableHead>Provider</TableHead><TableHead>Date</TableHead> <TableHead className="text-right">Claimed Amt</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {claimsData.length > 0 ? ( claimsData.map(claim => ( <TableRow key={claim.id}> <TableCell className="font-mono text-xs">{claim.id}</TableCell><TableCell className="font-mono text-xs">{claim.orderId}</TableCell> <TableCell>{claim.patientName}</TableCell><TableCell>{claim.provider}</TableCell> <TableCell className="text-xs">{claim.date}</TableCell><TableCell className="text-right font-medium">${claim.amountClaimed.toFixed(2)}</TableCell> <TableCell><Badge variant={getClaimStatusVariant(claim.status)}>{claim.status}</Badge></TableCell> <TableCell className="space-x-1 whitespace-nowrap"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Claim Details ${claim.id}`)}>Details</Button> {claim.status === \'Received\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Submit Claim ${claim.id}`)}>Submit</Button>} {claim.status === \'Pending Patient Auth\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Request Auth ${claim.id}`)} disabled>Req. Auth</Button>} {claim.status === \'Claim Rejected\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Resubmit Claim ${claim.id}`)}>Resubmit</Button>} {claim.status === \'Claim Submitted\' && <Badge variant="info" className="ml-2">Submitted</Badge>} {claim.status === \'Paid\' && <Badge variant="success" className="ml-2">Paid</Badge>} </TableCell> </TableRow> )) ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No medical aid claims found.</TableCell></TableRow> )} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <p className="text-sm text-gray-500">Showing {claimsData.length} claims.</p> </CardFooter> </Card> <Card> <CardHeader><CardTitle>Claims Summary & Analytics</CardTitle></CardHeader> <CardContent className="pt-4 text-center italic text-gray-400"> Placeholder: Charts visualizing claims status (Pending, Submitted, Paid, Rejected), claim amounts by provider, aging analysis, etc. </CardContent> </Card> </div> ); }\r\n        function MarketWatchView() { const data = MOCK_MARKET_WATCH_DATA; const adverts = MOCK_ADVERTS; const getTrendIcon = (trendString) => { if (!trendString) return null; if (trendString.includes(\'+\') || trendString.toLowerCase().includes(\'high\') || trendString.toLowerCase().includes(\'increase\')) return <TrendingUp className="h-4 w-4 text-green-600 inline ml-1" />; if (trendString.includes(\'-\') || trendString.toLowerCase().includes(\'low\') || trendString.toLowerCase().includes(\'decrease\')) return <TrendingDown className="h-4 w-4 text-red-600 inline ml-1" />; return null; }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <div> <h2 className="text-xl font-semibold">Market Watch Insights</h2> <p className="text-gray-500 text-sm">AI-powered intelligence on market trends, demand, and stock levels.</p> </div> </header> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <Card className="lg:col-span-3 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-blue-200"> <CardHeader> <CardTitle className="flex items-center text-blue-800"><Cpu className="mr-2 h-5 w-5" /> AI-Driven Insights</CardTitle> <CardDescription>Real-time analysis and actionable recommendations.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-3"> {data.aiInsights.map((insight, index) => ( <div key={index} className="text-sm p-3 bg-white/70 rounded border border-blue-100 shadow-sm flex items-start gap-2"> <Info className="h-4 w-4 text-blue-600 mt-0.5 shrink-0"/> <div> <p className=" text-gray-800">{insight}</p> <p className="text-xs text-blue-600 mt-1 italic">Source: ehutano+ AI Engine</p> </div> </div> ))} </CardContent> </Card> <Card className="lg:col-span-2"> <CardHeader> <CardTitle className="flex items-center"><Activity className="mr-2 h-5 w-5 text-orange-600" /> Product Trends & Demand Signals</CardTitle> <CardDescription>Monitor fast-moving items, high demand, and pricing changes.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-4"> <div> <h4 className="font-semibold mb-2 flex items-center"><TrendingUp className="mr-2 h-4 w-4 text-green-600"/> Fast Moving Items</h4> {data.fastMoving.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="trendUp">{item.trend} {getTrendIcon(item.trend)}</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><Users className="mr-2 h-4 w-4 text-red-600"/> High Demand Indicators</h4> {data.highDemand.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.reason}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="warning">High Demand</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><DollarSign className="mr-2 h-4 w-4 text-indigo-600" /> Price Change Alerts</h4> {data.priceAlerts.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.note}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant={item.change.startsWith(\'+\') ? \'trendDown\' : \'trendUp\'}>{item.change} {getTrendIcon(item.change)}</Badge> </div> ))} </div> </CardContent> </Card> <Card className="lg:col-span-1 flex flex-col space-y-4"> <div> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackageX className="mr-2 h-5 w-5 text-red-600" /> Stock Alerts</CardTitle> <CardDescription>Out-of-stock & low stock items.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 max-h-48 overflow-y-auto"> {data.stockOuts.map(item => ( <div key={item.id} className={`text-sm p-2 rounded border ${getStatusBadgeVariant(item.status)===\'destructive\' ? \'bg-red-50 border-red-200\' : \'bg-yellow-50 border-yellow-200\'}`}> <p className="font-medium">{item.name} <Badge variant={getStatusBadgeVariant(item.status)}>{item.status}</Badge></p> <p className="text-xs">Supplier: {item.supplier} | {item.note}</p> <p className="text-xs italic text-gray-500">Source: {item.source}</p> </div> ))} </CardContent> </div> <div className="border-t flex-grow flex flex-col"> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackagePlus className="mr-2 h-5 w-5 text-cyan-600" /> New Market Arrivals</CardTitle> <CardDescription>Newly registered or imported.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 flex-grow overflow-y-auto"> <h5 className="text-xs font-semibold uppercase text-gray-500">Newly Registered (via MCAZ)</h5> {data.newlyRegistered.map(item => ( <div key={item.id} className="text-sm p-2 border-b"><p>{item.name}</p><p className="text-xs">Supplier: {item.supplier} (Registered: {item.date})</p></div> ))} <h5 className="text-xs font-semibold uppercase text-gray-500 pt-2 mt-2">Recently Imported</h5> {data.recentlyImported.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0"><p>{item.name}</p><p className="text-xs">Source: {item.source} | Arrived: {item.arrival}</p><p className="text-xs">Distributor: {item.distributor}</p></div> ))} </CardContent> </div> </Card> <Card className="lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center"><Megaphone className="mr-2 h-5 w-5 text-purple-600" /> Industry Adverts (MCAZ Approved)</CardTitle> <CardDescription>Approved promotions & announcements.</CardDescription> </CardHeader> <CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {adverts.map(ad => ( <a key={ad.id} href={ad.link} target="_blank" rel="noopener noreferrer" className="block group border rounded overflow-hidden hover:shadow-md bg-white transition-shadow"> <img src={ad.imageUrl} alt={ad.title} className="w-full h-24 object-cover"/> <div className="p-3"> <p className="text-sm font-medium mb-1 group-hover:text-blue-600">{ad.title}</p> <p className="text-xs text-gray-500">{ad.type}</p> <p className="text-xs text-gray-400 mt-2">Ref: {ad.approvedBy}</p> </div> </a> ))} </CardContent> </Card> </div> </div> ); }\r\n\r\n        // --- Doctor Portal ---\r\n        function DoctorPortal({ setActiveView }) { const [activeSubView, setActiveSubView] = useState(\'dashboard\'); const mockPatients = [ { id: \'PAT101\', name: \'Tendai Moyo\', lastVisit: \'2025-03-20\', condition: \'Hypertension\' }, { id: \'PAT102\', name: \'Alice Banda\', lastVisit: \'2025-04-10\', condition: \'Diabetes Type 2\' }, { id: \'PAT103\', name: \'John Doe\', lastVisit: \'2025-04-22\', condition: \'Check-up\' }, ]; const mockAppointments = [ { id: \'APP001\', time: \'09:00\', patientName: \'Jane Smith\', reason: \'Follow-up\' }, { id: \'APP002\', time: \'09:30\', patientName: \'Peter Jones\', reason: \'New Consult\' }, { id: \'APP003\', time: \'10:00\', patientName: \'Tendai Moyo\', reason: \'BP Check\' }, ]; const renderContent = () => { switch (activeSubView) { case \'patients\': return ( <Card> <CardHeader><CardTitle>Patient Records</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Patients..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Patient ID</TableHead><TableHead>Name</TableHead><TableHead>Last Visit</TableHead><TableHead>Primary Condition</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockPatients.map(p => ( <TableRow key={p.id}> <TableCell className="font-mono text-xs">{p.id}</TableCell><TableCell>{p.name}</TableCell><TableCell>{p.lastVisit}</TableCell><TableCell>{p.condition}</TableCell> <TableCell><Button variant="link" size="sm" onClick={() => alert(`Pholder: View Patient Record ${p.name}`)}>View Record</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'prescriptions\': return ( <Card> <CardHeader><CardTitle>Electronic Prescriptions (E-Rx)</CardTitle></CardHeader> <CardContent className="pt-4 space-y-4"> <Button onClick={() => alert(\'Pholder: Open New E-Rx Form Modal\')}> <PlusCircle className="mr-2 h-4 w-4"/> Create New Prescription </Button> <div><h4 className="font-medium mb-2">Recently Issued Prescriptions</h4><p className="text-sm text-gray-500">Placeholder: List of recent Rxs with status (Sent, Filled, Pending).</p></div> <img src="https://placehold.co/600x150/e0f2f7/0891b2?text=E-Rx+List+Mockup" alt="E-Rx List Placeholder" className="mt-4 rounded border"/> </CardContent> </Card> ); case \'appointments\': return ( <Card> <CardHeader><CardTitle>Today\'s Schedule</CardTitle></CardHeader> <CardContent className="pt-4"> <Table> <TableHeader><TableRow><TableHead>Time</TableHead><TableHead>Patient</TableHead><TableHead>Reason for Visit</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockAppointments.map(a => ( <TableRow key={a.id}> <TableCell>{a.time}</TableCell><TableCell>{a.patientName}</TableCell><TableCell>{a.reason}</TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Start Consultation ${a.patientName}`)}>Start Consult</Button> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Add Notes/Record ${a.patientName}`)}>Add Record</Button> </TableCell> </TableRow> ))} </TableBody> </Table> <Button variant="outline" size="sm" className="mt-4" onClick={() => alert(\'Pholder: Open Full Calendar View\')}>View Full Calendar</Button> </CardContent> </Card> ); case \'dashboard\': default: return ( <Card> <CardHeader><CardTitle>Doctor Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-blue-50" onClick={() => setActiveSubView(\'appointments\')}> <CalendarDays className="h-6 w-6 mb-1 text-blue-600"/> <span className="font-medium">Today\'s Appointments</span> <span className="text-sm text-gray-600">({mockAppointments.length} scheduled)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-green-50" onClick={() => setActiveSubView(\'prescriptions\')}> <FileText className="h-6 w-6 mb-1 text-green-600"/> <span className="font-medium">E-Prescriptions</span> <span className="text-sm text-gray-600">(Create & Manage)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-purple-50" onClick={() => setActiveSubView(\'patients\')}> <Users className="h-6 w-6 mb-1 text-purple-600"/> <span className="font-medium">Patient Records</span> <span className="text-sm text-gray-600">(View & Search)</span> </Button> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2 flex items-center"><Bell className="mr-2 h-4 w-4"/> Notifications & Tasks</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Lab result received for Alice B.</li> <li>Placeholder: Refill request from Tendai M.</li> <li>Placeholder: Message from Pharmacy re: Rx124</li> </ul> <Button variant="link" size="sm" className="mt-2">View All Notifications</Button> </div> </CardContent> </Card> ); } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl md:text-3xl font-bold">Doctor Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage patients, electronic prescriptions, and appointments efficiently.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={activeSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'dashboard\')} data-state={activeSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4"/>Dashboard</Button> <Button variant={activeSubView === \'appointments\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'appointments\')} data-state={activeSubView === \'appointments\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CalendarDays className="mr-2 h-4 w-4"/>Appointments</Button> <Button variant={activeSubView === \'patients\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'patients\')} data-state={activeSubView === \'patients\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Users className="mr-2 h-4 w-4"/>Patients</Button> <Button variant={activeSubView === \'prescriptions\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'prescriptions\')} data-state={activeSubView === \'prescriptions\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4"/>E-Rx</Button> </nav> <div className="pt-6"> {renderContent()} </div> </div> ); }\r\n\r\n        // --- Wholesaler Portal ---\r\n        function WholesalerPortal({ setActiveView }) { const [wholesalerSubView, setWholesalerSubView] = useState(\'dashboard\'); const mockWholesalerCatalog = MOCK_PHARMACY_INVENTORY.filter(i => i.wholesaleSource?.startsWith(\'MediSupply\') || i.wholesaleSource?.startsWith(\'PharmaDistro\')); const mockWholesalerOrders = [ { id: \'W-ORD-001\', pharmacyName: \'Bonvie Pharmacy\', date: \'2025-04-24\', total: 450.00, status: \'Shipped\' }, { id: \'W-ORD-002\', pharmacyName: \'City Pharmacy\', date: \'2025-04-25\', total: 1200.50, status: \'Processing\' }, { id: \'W-ORD-003\', pharmacyName: \'Pulse Pharmacy\', date: \'2025-04-25\', total: 320.00, status: \'Pending Confirmation\' }, ]; const renderWholesalerContent = () => { switch (wholesalerSubView) { case \'dashboard\': return ( <Card> <CardHeader><CardTitle>Wholesaler Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Pending Orders</p><p className="text-2xl font-bold text-blue-800">{mockWholesalerOrders.filter(o => o.status.includes(\'Pending\') || o.status === \'Processing\').length}</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Active Catalog Items</p><p className="text-2xl font-bold text-green-800">{mockWholesalerCatalog.filter(i => i.stock > 0).length}</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Items Nearing Low Stock</p><p className="text-2xl font-bold text-yellow-900">5</p></div> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2">Recent Activity</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Order W-ORD-001 shipped to Bonvie Pharmacy.</li> <li>Placeholder: New order W-ORD-003 received from Pulse Pharmacy.</li> <li>Placeholder: Stock updated for Paracetamol 500mg.</li> </ul> <Button variant="link" size="sm" className="mt-2" onClick={() => setWholesalerSubView(\'orders\')}>View All Orders</Button> </div> </CardContent> </Card> ); case \'catalog\': return ( <Card> <CardHeader className="flex flex-row justify-between items-center"> <div><CardTitle>Product Catalog Management</CardTitle></div> <Button onClick={() => alert(\'Pholder: Open Add New Product Modal\')} size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Add New Product</Button> </CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Catalog (Name, ID, Category)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Product ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Wholesale Price</TableHead><TableHead className="text-right">Available Stock</TableHead><TableHead>Stock Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerCatalog.map(item => ( <TableRow key={item.id}> <TableCell className="font-mono text-xs">{item.id}</TableCell><TableCell>{item.name}</TableCell><TableCell>{item.category}</TableCell> <TableCell className="text-right">${(item.price * 0.8).toFixed(2)}</TableCell> <TableCell className="text-right">{item.stock * 10}</TableCell> <TableCell><Badge variant={item.stock > 0 ? \'success\' : \'destructive\'}>{item.stock > 0 ? \'In Stock\' : \'Out Of Stock\'}</Badge></TableCell> <TableCell><Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Edit Product ${item.id}`)}>Edit</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'orders\': return ( <Card> <CardHeader><CardTitle>Incoming Pharmacy Orders</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Orders (ID, Pharmacy Name)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Pharmacy Customer</TableHead><TableHead>Order Date</TableHead><TableHead className="text-right">Order Total</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerOrders.map(order => ( <TableRow key={order.id} className={order.status.includes(\'Pending\') ? \'bg-yellow-50/70\' : \'\'}> <TableCell className="font-mono text-xs">{order.id}</TableCell><TableCell>{order.pharmacyName}</TableCell><TableCell className="text-xs">{order.date}</TableCell> <TableCell className="text-right font-medium">${order.total.toFixed(2)}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Order Details ${order.id}`)}>Details</Button> {order.status === \'Pending Confirmation\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Confirm Order ${order.id}`)}>Confirm</Button>} {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Mark as Shipped ${order.id}`)}>Mark Shipped</Button>} {order.status === \'Shipped\' && <Badge variant="info" className="ml-2">Shipped</Badge>} </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'marketWatch\': return <MarketWatchView />; default: return <div className="text-center p-8 text-gray-500">Select a section.</div>; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Wholesaler Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage your product catalog, process pharmacy orders, and view market insights.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={wholesalerSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'dashboard\')} data-state={wholesalerSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4" /> Dashboard</Button> <Button variant={wholesalerSubView === \'catalog\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'catalog\')} data-state={wholesalerSubView === \'catalog\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BookOpen className="mr-2 h-4 w-4" /> Catalog</Button> <Button variant={wholesalerSubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'orders\')} data-state={wholesalerSubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button> <Button variant={wholesalerSubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'marketWatch\')} data-state={wholesalerSubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button> </nav> <div className="pt-6"> {renderWholesalerContent()} </div> </div> ); }\r\n\r\n        // --- Community Wellness Hub ---\r\n        function CommunityWellnessHub({setActiveView}) { const [activeTab, setActiveTab] = useState(\'activities\'); const [activities, setActivities] = useState(MOCK_WELLNESS_ACTIVITIES); const [selectedDay, setSelectedDay] = useState(\'Monday\'); const [blogCategory, setBlogCategory] = useState(\'All\'); const handleBooking = (activityId) => { setActivities(prevActivities => prevActivities.map(act => { if (act.id === activityId && act.slots > 0 && !act.booked) { alert(`Successfully booked ${act.name}!`); return { ...act, slots: act.slots - 1, booked: true }; } else if (act.id === activityId && act.booked) { alert(`You have already booked ${act.name}.`); return act; } else if (act.id === activityId && act.slots === 0) { alert(`Sorry, ${act.name} is currently full.`); return act; } return act; }) ); }; const filteredActivities = activities.filter(act => act.day === selectedDay); const daysOfWeek = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'].filter(day => MOCK_WELLNESS_ACTIVITIES.some(a => a.day === day)); const blogCategories = [\'All\', ...new Set(MOCK_BLOG_POSTS.map(p => p.category))]; const filteredBlogPosts = blogCategory === \'All\' ? MOCK_BLOG_POSTS : MOCK_BLOG_POSTS.filter(p => p.category === blogCategory); const renderTabContent = () => { switch (activeTab) { case \'activities\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Community Activities & Event Schedule</h2> <p className="text-sm text-gray-600">Book sports sessions, fitness classes, support groups, and other wellness events.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">View Schedule For:</span> {daysOfWeek.map(day => ( <Button key={day} variant={selectedDay === day ? \'default\' : \'outline\'} size="sm" onClick={() => setSelectedDay(day)}> {day} </Button> ))} </div> <Card> <CardHeader> <CardTitle>Available Activities for {selectedDay}</CardTitle> </CardHeader> <CardContent className="pt-4 space-y-4"> {filteredActivities.length > 0 ? ( filteredActivities.map(act => ( <div key={act.id} className={`flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border rounded-lg gap-4 ${act.booked ? \'bg-green-50 border-green-200\' : act.slots === 0 ? \'bg-red-50 border-red-200 opacity-70\' : \'bg-white hover:bg-gray-50\'}`}> <div className="flex items-center gap-3 flex-grow"> <span className="text-3xl">{act.icon}</span> <div> <p className="font-semibold">{act.name}</p> <p className="text-sm text-gray-600">{act.time} @ {act.location}</p> <p className="text-xs mt-1"> {act.slots > 0 ? <span className="text-green-700">{`${act.slots} slots available`}</span> : <span className="font-medium text-red-600">Fully Booked</span>} </p> </div> </div> <Button size="sm" onClick={() => handleBooking(act.id)} disabled={act.slots === 0 || act.booked} className={`mt-2 sm:mt-0 flex-shrink-0 ${act.booked ? \'bg-green-600 hover:bg-green-700 cursor-default\' : act.slots === 0 ? \'bg-gray-400 cursor-not-allowed\' : \'bg-blue-600 hover:bg-blue-700\'}`}> {act.booked ? (<><CheckCircle className="mr-1 h-4 w-4"/> You\'re Booked</>) : (act.slots > 0 ? \'Book Your Slot\' : \'Full\')} </Button> </div> )) ) : ( <p className="text-center py-6 text-gray-500 italic">No activities scheduled for {selectedDay}.</p> )} </CardContent> </Card> </div> ); case \'blog\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Wellness Blog & Articles</h2> <p className="text-sm text-gray-600">Read the latest health tips, lifestyle advice, and expert insights.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">Filter by Category:</span> {blogCategories.map(cat => ( <Button key={cat} variant={blogCategory === cat ? \'default\' : \'outline\'} size="sm" onClick={() => setBlogCategory(cat)}> {cat} </Button> ))} </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredBlogPosts.map(post => ( <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-200"> <img src={post.imageUrl} alt={post.title} className="h-40 w-full object-cover"/> <CardHeader> <Badge variant="secondary" className="w-fit mb-2">{post.category}</Badge> <CardTitle className="text-lg">{post.title}</CardTitle> <CardDescription>By {post.author} - {post.date}</CardDescription> </CardHeader> <CardContent className="pt-2 flex-grow"> <p className="text-sm text-gray-700">{post.snippet}</p> </CardContent> <CardFooter className="pt-2 border-t"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Navigate to full blog post ${post.id}`)}>Read Full Article</Button> </CardFooter> </Card> ))} {filteredBlogPosts.length === 0 && ( <p className="md:col-span-2 lg:col-span-3 text-center py-10 text-gray-500 italic">No blog posts found in the "{blogCategory}" category.</p> )} </div> </div> ); case \'resources\': return ( <div className="space-y-8"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Health Resources & Interactive Tools</h2> <p className="text-sm text-gray-600">Access guides, calculators, and information on various health topics.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-gradient-to-br from-orange-50 to-amber-100 border border-orange-200"> <CardHeader> <CardTitle className="flex items-center text-orange-800"><Utensils className="mr-2 h-5 w-5"/> Diabetes Management</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-orange-700">Resources for managing diabetes effectively.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Downloadable Meal Plans</li> <li>Video Guide: Using Your Meter</li> <li>Article: Importance of Foot Care</li> <li>Find Local Support Groups</li> </ul> <Button size="sm" className="bg-orange-500 hover:bg-orange-600 text-white" onClick={() => alert(\'Pholder: Navigate to Diabetes Resource Page\')}>Explore Diabetes Section</Button> </CardContent> </Card> <Card className="bg-gradient-to-br from-red-50 to-rose-100 border border-red-200"> <CardHeader> <CardTitle className="flex items-center text-red-800"><Heart className="mr-2 h-5 w-5"/> Hypertension Control</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-red-700">Tips for managing high blood pressure.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Low Sodium Recipe Book (PDF)</li> <li>Audio Guide: Stress Reduction Techniques</li> <li>Interactive Blood Pressure Log Tool</li> <li>Understanding Your Readings</li> </ul> <Button size="sm" className="bg-red-500 hover:bg-red-600 text-white" onClick={() => alert(\'Pholder: Navigate to Hypertension Page\')}>View BP Management Tips</Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Scale className="mr-2 h-5 w-5"/> BMI Calculator</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Calculate your Body Mass Index.</p> <div className="flex gap-2 mt-2"> <div className="flex-1"><Label htmlFor="height-input">Height (cm)</Label><Input id="height-input" placeholder="e.g., 175" type="number"/></div> <div className="flex-1"><Label htmlFor="weight-input">Weight (kg)</Label><Input id="weight-input" placeholder="e.g., 70" type="number"/></div> </div> <Button size="sm" className="mt-3" onClick={() => alert(\'Pholder: Calculate BMI based on inputs\')}>Calculate BMI</Button> <p className="text-sm mt-3">Your BMI: <span className="font-semibold">[Result Placeholder]</span></p> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Brain className="mr-2 h-5 w-5"/> Mental Wellness Corner</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Resources for mental health and well-being.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Guided Mindfulness Exercises (Audio)</li> <li>Recognizing Signs of Burnout</li> <li>Directory of Local Mental Health Professionals</li> <li>Tips for Improving Sleep Quality</li> </ul> <Button size="sm" variant="link" onClick={() => alert(\'Pholder: Navigate to Mental Wellness Page\')}>Explore Mental Wellness</Button> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-3 text-gray-700">Quick Health Links</h4> <div className="grid grid-cols-1 sm:grid-cols-3 gap-3"> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Ministry of Health & Child Care (MoHCC)</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Common Colds & Flu Information</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Basic First Aid Guide</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">National Vaccination Schedules</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Find a Clinic Near You</a> </div> </div> </div> ); case \'antibiotic\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold flex items-center text-blue-800"><Pill className="mr-2 h-5 w-5"/> Antibiotic Stewardship: Be Antibiotic Wise</h2> <p className="text-sm text-gray-600">Learn about the responsible use of antibiotics to combat resistance.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-blue-50 border border-blue-200"> <CardHeader><CardTitle>Why is Responsible Use Important?</CardTitle></CardHeader> <CardContent className="pt-2 text-sm text-blue-800"><p>Antibiotic resistance is a major global health threat. When bacteria become resistant, antibiotics may not work when needed most. Using antibiotics only when necessary and as prescribed helps preserve their effectiveness for everyone.</p></CardContent> </Card> <Card> <CardHeader><CardTitle>Key Principles of Antibiotic Use</CardTitle></CardHeader> <CardContent className="pt-2"> <ul className="list-disc list-inside text-sm space-y-2 text-gray-700"> <li><strong>Viruses vs. Bacteria:</strong> Antibiotics ONLY treat bacterial infections, not viruses like colds or flu.</li> <li><strong>Complete the Full Course:</strong> Always finish your prescribed antibiotics, even if you start feeling better. Stopping early can allow resistant bacteria to survive.</li> <li><strong>Do Not Share:</strong> Never use antibiotics prescribed for someone else or share yours.</li> <li><strong>Trust Your Doctor:</strong> Don\'t pressure your doctor for antibiotics if they say you don\'t need them.</li> <li><strong>Prevent Infections:</strong> Practice good hygiene (like handwashing) and stay up-to-date on vaccinations to prevent infections in the first place.</li> </ul> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6 bg-yellow-50 p-4 rounded border border-yellow-200"> <h4 className="font-semibold mb-2 text-yellow-800 flex items-center"><AlertTriangle className="mr-2 h-4 w-4"/> Patient Advisory</h4> <p className="text-sm text-yellow-900">Always consult your doctor or pharmacist before taking any medication, including antibiotics. Ensure you understand the instructions and potential side effects. Report any adverse reactions immediately.</p> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-2">Further Information</h4> <div className="space-y-1"> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">World Health Organization (WHO) - Antimicrobial Resistance</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Africa CDC - Antimicrobial Resistance Programme</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Local Resources on Antibiotic Use (Placeholder Link)</a> </div> </div> </div> ); default: return null; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Community Wellness Hub</h1> <p className="text-sm mt-1 text-gray-600">Explore activities, health information, and resources for a healthier you.</p> </header> <div className="border-b border-gray-200"> <nav className="-mb-px flex space-x-4 overflow-x-auto"> <button onClick={() => setActiveTab(\'activities\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'activities\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'activities\' ? \'active\' : \'\'}> <CalendarDays className="inline mr-1 h-4 w-4" /> Activities & Events </button> <button onClick={() => setActiveTab(\'blog\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'blog\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'blog\' ? \'active\' : \'\'}> <BookOpen className="inline mr-1 h-4 w-4" /> Wellness Blog </button> <button onClick={() => setActiveTab(\'resources\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'resources\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'resources\' ? \'active\' : \'\'}> <Settings className="inline mr-1 h-4 w-4" /> Health Resources & Tools </button> <button onClick={() => setActiveTab(\'antibiotic\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'antibiotic\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'antibiotic\' ? \'active\' : \'\'}> <Pill className="inline mr-1 h-4 w-4" /> Be Antibiotic Wise </button> </nav> </div> <div className="mt-6"> {renderTabContent()} </div> </div> ); }\r\n\r\n        // --- Main App Component ---\r\n        function App() {\r\n            console.log("App Component: Initial Render");\r\n            const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n            const [userRole, setUserRole] = useState(null);\r\n            const [userName, setUserName] = useState(\'\');\r\n            const [userData, setUserData] = useState(null);\r\n            const [activeView, setActiveView] = useState(\'landing\');\r\n            const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n            const [verificationData, setVerificationData] = useState(null);\r\n\r\n            const openVerificationModal = (data) => { setVerificationData(data); setIsVerificationModalOpen(true); };\r\n            const closeVerificationModal = () => setIsVerificationModalOpen(false);\r\n\r\n            const handleLogin = (role) => {\r\n                console.log(`App Component: handleLogin called with role: ${role}`);\r\n                let defaultView = \'landing\'; let currentUserName = \'\'; let currentUserData = null; let authStatus = false;\r\n                switch (role) {\r\n                    case \'patient\': defaultView = \'patientPortal\'; currentUserName = MOCK_PATIENT_DATA.name; currentUserData = MOCK_PATIENT_DATA; authStatus = true; break;\r\n                    case \'pharmacy\': defaultView = \'pharmacyPortal\'; currentUserName = \'City Pharmacy Staff\'; currentUserData = { id: \'PHARM001\', name: \'City Pharmacy\'}; authStatus = true; break;\r\n                    case \'doctor\': defaultView = \'doctorPortal\'; currentUserName = \'Dr. Musasa\'; currentUserData = { id: \'DOC001\' }; authStatus = true; break;\r\n                    case \'wholesaler\': defaultView = \'wholesalerPortal\'; currentUserName = \'MediSupply Inc.\'; currentUserData = { id: \'WH001\' }; authStatus = true; break;\r\n                    default: console.warn(`App Component: Unknown role "${role}" passed to handleLogin. Staying on landing page.`); role = null; defaultView = \'landing\'; authStatus = false; break;\r\n                }\r\n                setIsAuthenticated(authStatus); setUserRole(role); setActiveView(defaultView); setUserName(currentUserName); setUserData(currentUserData); console.log(`App Component: Login state updated. Auth=${authStatus}, Role=${role}, View=${defaultView}`);\r\n            };\r\n\r\n            const handleLogout = () => { console.log("App Component: handleLogout called."); setIsAuthenticated(false); setUserRole(null); setUserName(\'\'); setUserData(null); setActiveView(\'landing\'); console.log("App Component: Logout state updated. Redirecting to landing."); };\r\n\r\n            const navigateTo = (view) => {\r\n                console.log(`App Component: navigateTo called for view: ${view}. Current auth: ${isAuthenticated}, role: ${userRole}`);\r\n                const publicViews = [\'landing\', \'wellness\']; const semiPublicViews = [\'medicineSearch\']; const allowedViews = { patient: [\'patientPortal\', \'wellness\', \'medicineSearch\', \'prescriptionUpload\', \'quotedRx\'], pharmacy: [\'pharmacyPortal\', \'wellness\'], doctor: [\'doctorPortal\', \'wellness\'], wholesaler: [\'wholesalerPortal\', \'wellness\'], };\r\n                if (publicViews.includes(view)) { console.log(` -> Navigating to public view: ${view}`); setActiveView(view); return; }\r\n                if (semiPublicViews.includes(view) && !isAuthenticated) { console.log(` -> Navigating to semi-public view (unauthenticated): ${view}`); setActiveView(view); return; }\r\n                if (!isAuthenticated) { console.log(` -> Navigation to "${view}" denied (not authenticated). Redirecting to landing.`); setActiveView(\'landing\'); return; }\r\n                if (allowedViews[userRole]?.includes(view)) { console.log(` -> Navigation allowed for role "${userRole}" to view "${view}".`); setActiveView(view); }\r\n                else if (view === \'wellness\') { console.log(` -> Navigation allowed for authenticated user ("${userRole}") to wellness.`); setActiveView(view); }\r\n                else { console.warn(` -> Access denied for role "${userRole}" attempting to navigate to view "${view}". Redirecting to user\'s default portal.`); const defaultPortal = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(allowedViews[userRole]?.includes(defaultPortal) ? defaultPortal : \'landing\'); alert(`Access Denied: You do not have permission to view \'${view}\'. Redirecting to your dashboard.`); }\r\n            };\r\n\r\n            const renderMainContent = () => {\r\n                console.log(`App Component: renderMainContent triggered. Active View: ${activeView}, Role: ${userRole}, Auth: ${isAuthenticated}`);\r\n                if (!isAuthenticated) { switch (activeView) { case \'wellness\': return <CommunityWellnessHub setActiveView={navigateTo}/>; case \'medicineSearch\': return <MedicineSearchListing navigateTo={navigateTo} />; case \'landing\': default: console.log(" -> Rendering LandingPage (unauthenticated)."); return <LandingPage setActiveView={navigateTo} login={handleLogin} navigateTo={navigateTo}/>; } }\r\n\r\n                console.log(` -> Rendering authenticated content for view: ${activeView}`);\r\n                try {\r\n                    const renderPortal = (PortalComponent, requiredRole, props = {}) => { if (userRole === requiredRole) { console.log(` -> Rendering ${requiredRole} portal.`); return <PortalComponent setActiveView={navigateTo} openVerificationModal={openVerificationModal} patientData={userData} {...props} />; } else { console.warn(`Role mismatch: Trying to render ${requiredRole} portal for user role ${userRole}. Rendering Access Denied.`); return renderAccessDenied(); } };\r\n\r\n                    switch (activeView) {\r\n                        case \'patientPortal\': return renderPortal(PatientPortal, \'patient\', { navigateTo });\r\n                        case \'pharmacyPortal\': return renderPortal(PharmacyPortal, \'pharmacy\');\r\n                        case \'doctorPortal\': return renderPortal(DoctorPortal, \'doctor\');\r\n                        case \'wholesalerPortal\': return renderPortal(WholesalerPortal, \'wholesaler\');\r\n                        case \'wellness\': console.log(" -> Rendering CommunityWellnessHub (authenticated)."); return <CommunityWellnessHub setActiveView={navigateTo}/>;\r\n                        case \'medicineSearch\': if (userRole === \'patient\') return <MedicineSearchListing navigateTo={navigateTo} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'prescriptionUpload\': if (userRole === \'patient\') return <PrescriptionUpload navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'quotedRx\': if (userRole === \'patient\') { const quote = userData?.prescriptions?.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quote?.quote} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; } else return renderAccessDenied();\r\n                        default: console.warn(` -> Unhandled authenticated view route: "${activeView}". Resetting to user\'s default portal.`); const defaultPortalView = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(defaultPortalView); return null;\r\n                    }\r\n                } catch (error) {\r\n                     console.error(`CRITICAL ERROR rendering authenticated view "${activeView}" for role "${userRole}":`, error);\r\n                     return ( <div className="text-center p-8 text-red-600 bg-red-50 border border-red-200 rounded-md"><h2 className="text-xl font-semibold mb-2">Oops! Something went wrong.</h2><p>We encountered an error while loading this part of the application.</p><p className="mt-2">Please try refreshing the page. If the problem persists, contact support.</p><p className="mt-4 text-xs text-red-500"><i>Error details (for support): {error.message}</i></p><p className="text-xs text-red-500"><i>(Check browser console (F12) for more info)</i></p><pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || \'No stack trace available.\'}</pre></div> );\r\n                }\r\n            };\r\n\r\n            const renderAccessDenied = () => ( <div className="text-center py-10 px-4"> <Card className="max-w-md mx-auto bg-red-50 border-red-200"> <CardHeader> <CardTitle className="text-red-700 flex items-center justify-center"><AlertTriangle className="h-6 w-6 mr-2"/> Access Denied</CardTitle> </CardHeader> <CardContent className="pt-4 text-red-800"> <p>You do not have permission to access this page (\'{activeView}\') with your current role (\'{userRole || \'None\'}\').</p> <Button onClick={() => navigateTo(userRole ? `${userRole}Portal` : \'landing\')} className="mt-6 bg-red-600 hover:bg-red-700 text-white">Go to My Dashboard / Home</Button> </CardContent> </Card> </div> );\r\n\r\n            const renderNavigation = () => {\r\n                console.log(`App Component: renderNavigation. Auth=${isAuthenticated}, Role=${userRole}, View=${activeView}`);\r\n                if (!isAuthenticated) { return ( <div className="flex items-center space-x-2 sm:space-x-4"> <Button variant="ghost" onClick={() => navigateTo(\'medicineSearch\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Search className="mr-1 h-4 w-4" /> Search Meds </Button> <Button variant="ghost" onClick={() => navigateTo(\'wellness\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Activity className="mr-1 h-4 w-4" /> Wellness </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Show Login Options/Modal\')} size="sm"> <LogIn className="mr-1 h-4 w-4" /> Login </Button> <Button onClick={() => alert(\'Pholder: Show Registration Options/Modal\')} size="sm"> Register </Button> </div> ); }\r\n                else {\r\n                     const portalButtons = { patient: <Button variant={activeView === \'patientPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'patientPortal\')} size="sm" data-state={activeView === \'patientPortal\' ? \'active\' : \'\'}><Home className="mr-1 h-4 w-4" /> Dashboard</Button>, pharmacy: <Button variant={activeView === \'pharmacyPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'pharmacyPortal\')} size="sm" data-state={activeView === \'pharmacyPortal\' ? \'active\' : \'\'}><Building className="mr-1 h-4 w-4" /> Pharmacy Portal</Button>, doctor: <Button variant={activeView === \'doctorPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'doctorPortal\')} size="sm" data-state={activeView === \'doctorPortal\' ? \'active\' : \'\'}><Stethoscope className="mr-1 h-4 w-4" /> Doctor Portal</Button>, wholesaler: <Button variant={activeView === \'wholesalerPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wholesalerPortal\')} size="sm" data-state={activeView === \'wholesalerPortal\' ? \'active\' : \'\'}><Truck className="mr-1 h-4 w-4" /> Wholesaler Portal</Button>, };\r\n                    return ( <div className="flex items-center space-x-2 sm:space-x-4 overflow-x-auto py-1 flex-grow justify-end">\r\n                            {portalButtons[userRole]}\r\n                            <Button variant={activeView === \'wellness\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wellness\')} size="sm" data-state={activeView === \'wellness\' ? \'active\' : \'\'}><Activity className="mr-1 h-4 w-4" /> Wellness</Button>\r\n                            <div className="flex items-center space-x-3 pl-3 border-l border-gray-200 ml-2 flex-shrink-0">\r\n                                <Button variant="ghost" size="icon" className="relative hover:bg-gray-100 rounded-full" onClick={() => alert(\'Placeholder: Show Notifications Panel\')}> <Bell className="h-5 w-5 text-gray-600" /> <span className="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full ring-1 ring-white bg-red-500"/> </Button>\r\n                                <span className="text-sm font-medium text-gray-700 hidden sm:inline" title={`Logged in as: ${userRole}`}>Welcome, {userName}</span>\r\n                                <Button variant="outline" onClick={handleLogout} size="sm"> <LogOut className="mr-1 h-4 w-4" /> Logout </Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            };\r\n\r\n\r\n            // Ensure NO HTML comments are inside this return block\r\n            return (\r\n                <div className="min-h-screen bg-gray-100 flex flex-col">\r\n                    {/* Sticky Navigation Bar */}\r\n                    <nav className="bg-white shadow-md sticky top-0 z-40">\r\n                        <div className="container mx-auto px-4 py-2 flex flex-wrap justify-between items-center gap-4">\r\n                             <span\r\n                                className="text-2xl font-bold text-blue-700 cursor-pointer shrink-0 mr-6"\r\n                                onClick={() => navigateTo(isAuthenticated ? `${userRole}Portal` : \'landing\')}\r\n                                title="Go to Home/Dashboard"\r\n                             >\r\n                                ehutano<span className="text-green-600">+</span>\r\n                             </span>\r\n                             {renderNavigation()}\r\n                         </div>\r\n                    </nav>\r\n\r\n                    {/* Main Content Area */}\r\n                    <main className="container mx-auto p-4 md:p-6 lg:p-8 flex-grow">\r\n                        {renderMainContent()}\r\n                    </main>\r\n\r\n                    {/* Footer */}\r\n                    <footer className="bg-gray-800 text-gray-400 text-sm py-10 mt-16">\r\n                        <div className="container mx-auto px-4">\r\n                             <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 mb-8">\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Company</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">About Us</a></li> <li><a href="#" className="hover:text-white hover:underline">Careers</a></li> <li><a href="#" className="hover:text-white hover:underline">Contact</a></li> <li><a href="#" className="hover:text-white hover:underline" onClick={(e) => { e.preventDefault(); navigateTo(\'wellness\'); }}>Blog</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Legal</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Privacy Policy</a></li> <li><a href="#" className="hover:text-white hover:underline">Terms of Service</a></li> <li><a href="#" className="hover:text-white hover:underline">Compliance</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Resources</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Help Center</a></li> <li><a href="#" className="hover:text-white hover:underline">API Documentation</a></li> <li><a href="#" className="hover:text-white hover:underline">System Status</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Connect</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Facebook</a></li> <li><a href="#" className="hover:text-white hover:underline">Twitter / X</a></li> <li><a href="#" className="hover:text-white hover:underline">LinkedIn</a></li> <li><a href="#" className="hover:text-white hover:underline">WhatsApp Support</a></li> </ul> </div>\r\n                                <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right mt-8 lg:mt-0"> <span className="text-3xl font-bold text-white"> ehutano<span className="text-green-400">+</span> </span> <p className="text-xs mt-2">Digital Health Solutions</p> </div>\r\n                             </div>\r\n                             <div className="border-t border-gray-700 pt-6 text-center text-xs"> &copy; {new Date().getFullYear()} ehutano+. A division of Health Futures Ltd. All rights reserved. </div>\r\n                        </div>\r\n                    </footer>\r\n\r\n                     {/* Centralized Modals */}\r\n                    <MedicineVerificationModal isOpen={isVerificationModalOpen} onClose={closeVerificationModal} verificationData={verificationData} />\r\n                    {/* OrderDetailsModal & DispensingModal are rendered within PharmacyPortal */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        // --- Render the App ---\r\n        try {\r\n            console.log("Attempting ReactDOM.render...");\r\n            ReactDOM.render(<App />, document.getElementById(\'root\'));\r\n            console.log("React app rendered successfully.");\r\n        } catch (error) {\r\n             console.error("CRITICAL ERROR DURING REACT RENDERING:", error);\r\n             const rootElement = document.getElementById(\'root\');\r\n             if (rootElement) {\r\n                rootElement.innerHTML = `<div style="padding: 2rem; border: 2px solid red; background-color: #fee; color: #a00; font-family: sans-serif; text-align: center;">\r\n                                            <h2>Application Initialization Error</h2>\r\n                                            <p>We\'re sorry, but the application failed to load correctly.</p>\r\n                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>\r\n                                            <p style="margin-top: 1em; font-size: 0.9em; color: #500;"><i>Technical Details (for support): ${error.message}</i></p>\r\n                                            <p style="font-size: 0.8em;">(Check the browser\'s developer console (F12) for more detailed error information)</p>\r\n                                            <pre style="margin-top: 1em; text-align: left; background: #fff; border: 1px solid #ccc; padding: 1em; overflow-x: auto; font-size: 0.8em;">${error.stack || \'No stack trace available.\'}</pre>\r\n                                         </div>`;\r\n             }\r\n        }\r\n\r\n    </script>\n', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 8094211dc0984c38e816cd39ab7d9a47450645f4cf44986990bb3b2b013e652347c4d58aa6e25b3b9af5721236e43adba2dfc0e8a64a08e16bb070c1b44549b1_0
2025-06-01 17:18:30,863 - semgrep.rule_match - DEBUG - match_key = ('\r\n        // ***********************************************************************\r\n        // ehutano+ React Frontend Components (Structured Portals & Auth) - v6 - CORRECTED v6\r\n        // ***********************************************************************\r\n        // Final check: Ensuring no stray HTML comments are within the React JSX.\r\n        // ***********************************************************************\r\n\r\n        const { useState, useMemo, useEffect } = React;\r\n\r\n        // --- Mock Data ---\r\n        const MOCK_PATIENT_DATA = { name: \'Tendai Moyo\', medicalAid: { provider: \'Cimas\', memberId: \'CIM123456789\', verified: true }, recentOrders: [ { id: \'ORD789\', date: \'2025-04-18\', status: \'Delivered\', total: \'$15.50\', items: [\'Paracetamol 500mg\', \'Vitamin C Tabs\'] }, { id: \'ORD788\', date: \'2025-04-15\', status: \'Delivered\', total: \'$22.00\', items: [\'Amoxicillin 250mg (Script)\'] }, { id: \'ORD785\', date: \'2025-04-10\', status: \'Cancelled\', total: \'$8.75\', items: [\'Cough Syrup\'] }, ], prescriptions: [ { id: \'RX123\', medicine: \'Amoxicillin 250mg\', doctor: \'Dr. Chipo Musasa\', dateIssued: \'2025-04-14\', status: \'Filled\', refillsLeft: 0, uploadId: \'UPL001\' }, { id: \'RX124\', medicine: \'Lisinopril 10mg\', doctor: \'Dr. David Chen\', dateIssued: \'2025-03-20\', status: \'Active\', refillsLeft: 2, uploadId: \'UPL002\' }, { id: \'UPL003\', status: \'Pending Review\', dateUploaded: \'2025-04-25\', notes: \'Need urgently please\', isQuoteReady: false }, { id: \'UPL004\', status: \'Quote Ready\', dateUploaded: \'2025-04-24\', isQuoteReady: true, quote: { total: 35.50, items: [{ name: \'Metformin 500mg\', price: 9.50, qty: 1 }, { name: \'Amlodipine 5mg\', price: 13.00, qty: 2 }] } } ], reminders: [ { id: \'REM01\', type: \'Refill\', medicine: \'Lisinopril 10mg\', dueDate: \'2025-05-15\' }, { id: \'REM02\', type: \'Appointment\', details: \'Check-up with Dr. Chen\', dueDate: \'2025-05-01\' }, ], healthMetrics: { bloodPressure: \'120/80 mmHg\', lastCheckup: \'2025-03-20\', } };\r\n        const MOCK_PHARMACY_INVENTORY = [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', category: \'Pain Relief\', stock: 150, price: 2.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot A\' }, { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', category: \'Antibiotics\', stock: 45, price: 8.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot B\' }, { id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', category: \'Vitamins\', stock: 80, price: 5.75, supplier: \'HealthWell\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot C\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', category: \'Allergy\', stock: 5, price: 4.20, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-18\', status: \'Low Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot D\' }, { id: \'MED005\', name: \'Cough Syrup XYZ\', category: \'Cold & Flu\', stock: 0, price: 6.50, supplier: \'MediSupply\', lastUpdated: \'2025-04-15\', status: \'Out of Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'LocalChem\', wholesaleSource: \'MediSupply Lot E\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', category: \'Digestive Health\', stock: 60, price: 7.10, supplier: \'HealthWell\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot F\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', category: \'Pain Relief\', stock: 200, price: 3.10, supplier: \'MediSupply\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot G\' }, { id: \'MED008\', name: \'Metformin 500mg\', category: \'Diabetes\', stock: 70, price: 9.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'PharmaDistro Lot H\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', category: \'Antibiotics\', stock: 30, price: 12.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-21\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot I\' }, ];\r\n        const MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES = MOCK_PHARMACY_INVENTORY.map(item => ({ id: item.id, name: item.name, category: item.category, requiresPrescription: item.requiresPrescription, isAntibiotic: item.isAntibiotic, imageUrl: `https://placehold.co/150x150/e2e8f0/334155?text=${item.name.split(\' \')[0]}`, pharmacies: [ { name: \'Bonvie Pharmacy\', price: item.price, stockStatus: item.stock > 10 ? \'In Stock\' : (item.stock > 0 ? \'Low Stock\' : \'Out of Stock\') }, { name: \'Pulse Pharmacy\', price: item.price * 1.05, stockStatus: Math.random() > 0.2 ? \'In Stock\' : \'Low Stock\' }, { name: \'City Pharmacy\', price: item.price * 0.98, stockStatus: Math.random() > 0.1 ? \'In Stock\' : \'Out of Stock\' }, ].filter(p => p.stockStatus !== \'Out of Stock\'), }));\r\n        const MOCK_SALES_DATA = [ { name: \'Jan\', sales: 4000 }, { name: \'Feb\', sales: 3000 }, { name: \'Mar\', sales: 5000 }, { name: \'Apr\', sales: 4500 }, { name: \'May\', sales: 6000 }, { name: \'Jun\', sales: 5500 }, ];\r\n        const MOCK_PARTNER_LOGOS = [ { name: \'Cimas MedAid\', url: \'https://placehold.co/150x60/a5f3fc/0e7490?text=Cimas+Logo\' }, { name: \'Bonvie Pharmacy\', url: \'https://placehold.co/150x60/d8b4fe/581c87?text=Bonvie+Pharmacy\' }, { name: \'MediSupply Wholesalers\', url: \'https://placehold.co/150x60/fecaca/991b1b?text=MediSupply\' }, { name: \'Wellness Hub ZW\', url: \'https://placehold.co/150x60/a7f3d0/14532d?text=Wellness+Hub\' }, { name: \'Dr. Moyo Clinic\', url: \'https://placehold.co/150x60/bfdbfe/1e40af?text=Dr.+Moyo\' }, { name: \'First Mutual Health\', url: \'https://placehold.co/150x60/fed7aa/9a3412?text=FMH+Logo\' }, { name: \'Pulse Pharmacy\', url: \'https://placehold.co/150x60/fbcfe8/9d174d?text=Pulse+Pharmacy\' }, { name: \'PharmaDistro Ltd\', url: \'https://placehold.co/150x60/e0e7ff/3730a3?text=PharmaDistro\' }, ];\r\n        const MOCK_PHARMACY_ORDERS = [ { id: \'ORD-PHARM-001\', patientName: \'Alice Banda\', date: \'2025-04-23\', status: \'Pending Payment\', total: 35.50, items: [{ id: \'MED002\', name: \'Amoxicillin 250mg Caps\', qty: 1 }, { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', qty: 2 }], medicalAidStatus: \'Pending Patient Auth\', amountCovered: 0.00, medicalAidProvider: \'Cimas\', requiresAction: true, paymentMethod: \'Medical Aid\', patientId: \'PAT001\' }, { id: \'ORD-PHARM-002\', patientName: \'Tendai Moyo\', date: \'2025-04-22\', status: \'Ready for Pickup\', total: 12.00, items: [{ id: \'MED009\', name: \'Ciprofloxacin 500mg\', qty: 1 }], medicalAidStatus: \'Received\', amountCovered: 10.00, medicalAidProvider: \'First Mutual Health\', requiresAction: true, paymentMethod: \'Medical Aid / Co-Pay\', patientId: \'PAT002\' }, { id: \'ORD-PHARM-003\', patientName: \'John Doe\', date: \'2025-04-21\', status: \'Completed\', total: 5.75, items: [{ id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: false, paymentMethod: \'EcoCash\', patientId: \'PAT003\' }, { id: \'ORD-PHARM-004\', patientName: \'Jane Smith\', date: \'2025-04-24\', status: \'Processing\', total: 9.50, items: [{ id: \'MED008\', name: \'Metformin 500mg\', qty: 1 }], medicalAidStatus: \'Claim Submitted\', amountCovered: 7.50, medicalAidProvider: \'Cimas\', requiresAction: false, paymentMethod: \'Medical Aid\', patientId: \'PAT004\' }, { id: \'ORD-PHARM-005\', patientName: \'Blessing R\', date: \'2025-04-25\', status: \'Pending Approval\', total: 25.00, items: [{ id: \'MED006\', name: \'Omeprazole 20mg Caps\', qty: 2 }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: true, paymentMethod: \'Cash on Delivery\', patientId: \'PAT005\' }, ];\r\n        const MOCK_VERIFICATION_DATA_VALID = { status: \'verified\', medicineName: \'Amoxicillin 250mg Caps\', batchNumber: \'BCH12345\', expiryDate: \'2026-12-31\', pharmacySource: \'Bonvie Pharmacy\', wholesaleSource: \'MediSupply Lot B\', manufacturer: \'GenericMed\', isAntibiotic: true, message: \'Medicine verified successfully. Genuine product.\' };\r\n        const MOCK_VERIFICATION_DATA_INVALID = { status: \'invalid\', message: \'Verification Failed! Product may be falsified. Report to pharmacy/MCAZ.\', isAntibiotic: false, };\r\n        const MOCK_VERIFICATION_DATA_EXPIRED = { status: \'expired\', medicineName: \'Paracetamol 500mg Tabs\', batchNumber: \'BCH67890\', expiryDate: \'2024-03-31\', pharmacySource: \'Pulse Pharmacy\', wholesaleSource: \'PharmaDistro Lot C\', manufacturer: \'PharmaCo\', isAntibiotic: false, message: \'Warning: This medicine has EXPIRED. Do not use.\' };\r\n        const MOCK_MARKET_WATCH_DATA = { fastMoving: [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', trend: \'+25% sales WoW\', source: \'Aggregated POS\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', trend: \'High seasonal demand\', source: \'AI Model\' }, { id: \'MED003\', name: \'Vitamin C 1000mg\', trend: \'+15% sales WoW\', source: \'Wholesaler Volume\' }, ], highDemand: [ { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', reason: \'Increased Rx volume\', source: \'E-Rx Trends\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', reason: \'UTI treatment spike\', source: \'Clinic Data\' }, { id: \'MEDXXX\', name: \'Salbutamol Inhalers\', reason: \'Allergy season onset\', source: \'AI Model\' }, ], stockOuts: [ { id: \'MED005\', name: \'Cough Syrup XYZ\', supplier: \'MediSupply\', note: \'ETA 3 days\', status: \'Out of Stock\', source: \'Wholesaler Feed\' }, { id: \'MEDXYZ\', name: \'Salbutamol Inhaler\', supplier: \'PharmaDistro\', note: \'Manufacturing delay\', status: \'Out of Stock\', source: \'Supplier Comms\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', supplier: \'PharmaDistro\', note: \'Multiple low levels\', status: \'Low Stock\', source: \'Aggregated Inventory\' }, ], priceAlerts: [ { id: \'MED008\', name: \'Metformin 500mg\', change: \'+5% supplier price\', note: \'Effective next cycle\', source: \'PharmaDistro Update\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', change: \'-3% promotion\', note: \'Limited time offer\', source: \'Supplier Bulletin\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', change: \'+8% import cost\', note: \'FX fluctuation\', source: \'Import Agent\' }, ], newlyRegistered: [ { id: \'MED101\', name: \'Generic Lisinopril 5mg\', supplier: \'NewGen Pharma\', date: \'2025-04-15\', source: \'MCAZ Registry\' }, { id: \'MED102\', name: \'Adv. Allergy Spray\', supplier: \'HealthWell\', date: \'2025-04-10\', source: \'MCAZ Registry\' }, ], recentlyImported: [ { id: \'MEDIMP01\', name: \'Vaccine Batch X\', source: \'WHO\', arrival: \'2025-04-20\', distributor: \'Govt Stores\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', source: \'EU Supplier\', arrival: \'2025-04-18\', distributor: \'PharmaDistro\' }, ], aiInsights: [ "AI Trend: Potential shortage of pediatric Paracetamol Syrup expected in 2 weeks based on consumption & low regional stock. Check inventory.", "Demand Forecast: 30%+ increase predicted for allergy meds next month (pollen). Consider early stocking.", "Opportunity: Promote Vitamin D based on seasonal patterns & low recent sales velocity.", "Pricing Anomaly: Ciprofloxacin wholesale price shows higher variance. Cross-check quotes.", ], };\r\n        const MOCK_ADVERTS = [ { id: \'AD001\', title: \'Bonvie Pharmacy: Flu Shots Available Now!\', imageUrl: \'https://placehold.co/300x100/d8b4fe/581c87?text=Bonvie+Flu+Shots\', link: \'#\', approvedBy: \'MCAZ Ref: AD/FLU/25/001\', type: \'Pharmacy Promotion\' }, { id: \'AD002\', title: \'MediSupply: Reliable Partner for Bulk Orders\', imageUrl: \'https://placehold.co/300x100/fecaca/991b1b?text=MediSupply+Wholesale\', link: \'#\', approvedBy: \'MCAZ Ref: AD/WS/25/003\', type: \'Wholesaler Service\' }, { id: \'AD003\', title: \'Stay Healthy with BrandX Vitamins\', imageUrl: \'https://placehold.co/300x100/a7f3d0/14532d?text=BrandX+Vitamins\', link: \'#\', approvedBy: \'MCAZ Ref: AD/PROD/25/015\', type: \'Product Promotion\' }, ];\r\n        const MOCK_WELLNESS_ACTIVITIES = [ { id: \'ACT001\', name: \'5-a-side Soccer\', day: \'Monday\', time: \'18:00\', location: \'Field A\', slots: 3, booked: false, icon: \'⚽\' }, { id: \'ACT002\', name: \'Yoga Class\', day: \'Tuesday\', time: \'07:00\', location: \'Studio 1\', slots: 5, booked: false, icon: \'🧘\' }, { id: \'ACT003\', name: \'Basketball Pickup\', day: \'Tuesday\', time: \'19:00\', location: \'Court 1\', slots: 8, booked: false, icon: \'🏀\' }, { id: \'ACT004\', name: \'Tennis Singles\', day: \'Wednesday\', time: \'10:00\', location: \'Court 2\', slots: 1, booked: true, icon: \'🎾\' }, { id: \'ACT005\', name: \'Health Walk\', day: \'Thursday\', time: \'06:30\', location: \'Park Entrance\', slots: 15, booked: false, icon: \'🚶\u200d♀️\' }, { id: \'ACT006\', name: \'Zumba Fitness\', day: \'Friday\', time: \'17:30\', location: \'Studio 2\', slots: 0, booked: false, icon: \'💃\' }, { id: \'ACT007\', name: \'Diabetes Support\', day: \'Wednesday\', time: \'14:00\', location: \'Room 1\', slots: 10, booked: false, icon: \'💬\' }, { id: \'ACT008\', name: \'Healthy Cooking\', day: \'Thursday\', time: \'12:00\', location: \'Demo Kitchen\', slots: 6, booked: false, icon: \'🧑\u200d🍳\' }, ];\r\n        const MOCK_BLOG_POSTS = [ { id: \'BLOG001\', title: \'Seasonal Allergies in Zim\', date: \'2025-04-20\', author: \'Dr. Musasa\', snippet: \'Manage symptoms with local tips...\', imageUrl: \'https://placehold.co/300x150/a7f3d0/14532d?text=Allergies\', category: \'General Health\' }, { id: \'BLOG002\', title: \'Importance of Hydration\', date: \'2025-04-15\', author: \'Wellness Team\', snippet: \'Crucial for health in warmer climates...\', imageUrl: \'https://placehold.co/300x150/bfdbfe/1e40af?text=Hydration\', category: \'Lifestyle\' }, { id: \'BLOG003\', title: \'Simple Home Exercises\', date: \'2025-04-10\', author: \'Coach Themba\', snippet: \'Stay active without leaving home...\', imageUrl: \'https://placehold.co/300x150/fecaca/991b1b?text=Home+Exercise\', category: \'Fitness\' }, { id: \'BLOG004\', title: \'Healthy Eating on Budget\', date: \'2025-04-05\', author: \'Nutritionist N.\', snippet: \'Affordable & nutritious local options...\', imageUrl: \'https://placehold.co/300x150/fed7aa/9a3412?text=Healthy+Eating\', category: \'Nutrition\' }, { id: \'BLOG005\', title: \'Managing Type 2 Diabetes\', date: \'2025-04-22\', author: \'Diabetes Educator\', snippet: \'Lifestyle changes are vital...\', imageUrl: \'https://placehold.co/300x150/fde68a/ca8a04?text=Diabetes+Mgmt\', category: \'Diabetes\' }, { id: \'BLOG006\', title: \'Managing High Blood Pressure\', date: \'2025-04-18\', author: \'Dr. Chen\', snippet: \'Learn risks & management steps...\', imageUrl: \'https://placehold.co/300x150/fda4af/be123c?text=Hypertension\', category: \'Heart Health\' }, ];\r\n\r\n        // --- UI Components ---\r\n        const Button = ({ children, variant = \'default\', size = \'default\', className = \'\', disabled, ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"; const variants = { default: "bg-blue-600 text-white hover:bg-blue-700/90", destructive: "bg-red-600 text-white hover:bg-red-700/90", outline: "border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-900", secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200/80", ghost: "hover:bg-gray-100 hover:text-gray-900", link: "text-blue-600 underline-offset-4 hover:underline", success: "bg-green-600 text-white hover:bg-green-700/90", warning: "bg-yellow-400 text-yellow-900 hover:bg-yellow-500/90", }; const sizes = { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }; const variantStyle = variants[variant] || variants.default; return <button disabled={disabled} className={`${baseStyle} ${variantStyle} ${sizes[size]} ${className}`} {...props}>{children}</button>; };\r\n        const Card = ({ children, className = \'\', ...props }) => ( <div className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`} {...props}>{children}</div> );\r\n        const CardHeader = ({ children, className = \'\', ...props }) => <div className={`flex flex-col space-y-1.5 p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardTitle = ({ children, className = \'\', ...props }) => <h3 className={`text-lg md:text-xl font-semibold leading-none tracking-tight ${className}`} {...props}>{children}</h3>;\r\n        const CardDescription = ({ children, className = \'\', ...props }) => <p className={`text-sm text-gray-500 ${className}`} {...props}>{children}</p>;\r\n        const CardContent = ({ children, className = \'\', ...props }) => <div className={`p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardFooter = ({ children, className = \'\', ...props }) => <div className={`flex items-center p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const Table = ({ children, className = \'\', ...props }) => <div className="w-full overflow-auto"><table className={`w-full caption-bottom text-sm ${className}`} {...props}>{children}</table></div>;\r\n        const TableHeader = ({ children, className = \'\', ...props }) => <thead className={`[&_tr]:border-b bg-gray-50 ${className}`} {...props}>{children}</thead>;\r\n        const TableBody = ({ children, className = \'\', ...props }) => <tbody className={`[&_tr:last-child]:border-0 divide-y divide-gray-200 ${className}`} {...props}>{children}</tbody>;\r\n        const TableFooter = ({ children, className = \'\', ...props }) => <tfoot className={`border-t bg-gray-100/50 font-medium ${className}`} {...props}>{children}</tfoot>;\r\n        const TableRow = ({ children, className = \'\', ...props }) => <tr className={`border-b border-gray-200 transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-blue-50 ${className}`} {...props}>{children}</tr>;\r\n        const TableHead = ({ children, className = \'\', ...props }) => <th className={`h-12 px-4 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>{children}</th>;\r\n        const TableCell = ({ children, className = \'\', ...props }) => <td className={`p-4 align-middle ${className}`} {...props}>{children}</td>;\r\n        const TableCaption = ({ children, className = \'\', ...props }) => <caption className={`mt-4 text-sm text-gray-500 ${className}`} {...props}>{children}</caption>;\r\n        const Input = ({ className = \'\', type = \'text\', ...props }) => ( <input type={type} className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Select = ({ children, className = \'\', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 appearance-none pr-8 bg-no-repeat bg-right bg-[url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="%236b7280" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/></svg>\')] ${className}`} {...props}> {children} </select> );\r\n        const SelectItem = ({ children, value, ...props }) => <option value={value} {...props}>{children}</option>;\r\n        const Badge = ({ children, variant = \'default\', className = \'\', ...props }) => { const baseStyle = "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"; const variants = { default: "border-transparent bg-blue-600 text-blue-50", secondary: "border-transparent bg-gray-200 text-gray-800", destructive: "border-transparent bg-red-600 text-red-50", outline: "text-gray-900 border-gray-300", success: "border-transparent bg-green-500 text-white", warning: "border-transparent bg-yellow-400 text-yellow-900", info: "border-transparent bg-sky-500 text-white", trendUp: "border-transparent bg-emerald-100 text-emerald-800", trendDown: "border-transparent bg-rose-100 text-rose-800", }; const variantStyle = variants[variant] || variants.default; return <span className={`${baseStyle} ${variantStyle} ${className}`} {...props}>{children}</span>; };\r\n        const Label = ({ children, className = \'\', ...props }) => ( <label className={`block text-sm font-medium text-gray-700 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}> {children} </label> );\r\n        const Textarea = ({ className = \'\', ...props }) => ( <textarea className={`flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Modal = ({ isOpen, onClose, title, children, maxWidth = \'lg\' }) => { if (!isOpen) return null; const widthClasses = { sm: \'max-w-sm\', md: \'max-w-md\', lg: \'max-w-lg\', xl: \'max-w-xl\', \'2xl\': \'max-w-2xl\', \'3xl\': \'max-w-3xl\', \'4xl\': \'max-w-4xl\' }; return ( <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 backdrop-blur-sm animate-fade-in" onClick={onClose}> <div className={`bg-white rounded-lg shadow-xl w-full ${widthClasses[maxWidth] || widthClasses.lg} max-h-[90vh] flex flex-col overflow-hidden transform transition-all animate-scale-in`} onClick={e => e.stopPropagation()} > <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10"> <h3 className="text-lg font-semibold text-gray-800">{title}</h3> <button onClick={onClose} className="text-gray-400 hover:text-gray-700 text-2xl leading-none p-1 rounded-full hover:bg-gray-100">&times;</button> </div> <div className="p-4 md:p-6 overflow-y-auto flex-grow"> {children} </div> </div> </div> ); };\r\n\r\n        // --- Icons ---\r\n        const ShoppingCart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="9" cy="21" r="1"/><circle cx="20" cy="21" r="1"/><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/></svg>;\r\n        const Pill = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"/><path d="m8.5 8.5 7 7"/></svg>;\r\n        const Bell = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/><path d="M13.73 21a2 2 0 0 1-3.46 0"/></svg>;\r\n        const FileText = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>;\r\n        const User = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;\r\n        const Search = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;\r\n        const PlusCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="16"/><line x1="8" x2="16" y1="12" y2="12"/></svg>;\r\n        const Filter = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;\r\n        const BarChart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="20" y2="10"/><line x1="18" x2="18" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="16"/></svg>;\r\n        const Settings = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0 2l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const UploadCloud = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M12 12v9"/><path d="m16 16-4-4-4 4"/></svg>;\r\n        const Stethoscope = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"/><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"/><circle cx="20" cy="10" r="2"/></svg>;\r\n        const Truck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>;\r\n        const Building = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><path d="M9 22v-4h6v4"/><path d="M8 6h.01"/><path d="M16 6h.01"/><path d="M12 6h.01"/><path d="M12 10h.01"/><path d="M12 14h.01"/><path d="M16 10h.01"/><path d="M16 14h.01"/><path d="M8 10h.01"/><path d="M8 14h.01"/></svg>;\r\n        const Activity = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>;\r\n        const Home = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;\r\n        const Users = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;\r\n        const MapPin = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>;\r\n        const LogIn = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/><polyline points="10 17 15 12 10 7"/><line x1="15" x2="3" y1="12" y2="12"/></svg>;\r\n        const LogOut = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>;\r\n        const HeartPulse = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.22 12H9.5l.7-1 2.1 2.1.8-1 1.9 1.9h5.27"/></svg>;\r\n        const FileSearch = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"/><path d="M14 2v6h6"/><circle cx="5" cy="14" r="3"/><path d="m9 18-1.5-1.5"/></svg>;\r\n        const FileCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="m9 15 2 2 4-4"/></svg>;\r\n        const CreditCard = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>;\r\n        const PackageCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16.19 11.26-4.19 4.19-1.53-1.53"/><path d="M22 11.16V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1.17"/><path d="m16 4 3 3H4"/><path d="M18 7.84V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12.17"/><path d="M21 10.84v.32a2 2 0 0 1-2 2H17"/><path d="M7 16h10"/></svg>;\r\n        const QrCode = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="5" height="5" x="3" y="3" rx="1"/><rect width="5" height="5" x="16" y="3" rx="1"/><rect width="5" height="5" x="3" y="16" rx="1"/><path d="M21 16h-3a2 2 0 0 0-2 2v3"/><path d="M21 21v.01"/><path d="M12 7v3a2 2 0 0 1-2 2H7"/><path d="M3 12h.01"/><path d="M12 3h.01"/><path d="M12 16v.01"/><path d="M16 12h1"/><path d="M21 12v.01"/><path d="M12 21v-1"/></svg>;\r\n        const AlertTriangle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>;\r\n        const CheckCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><path d="m9 11 3 3L22 4"/></svg>;\r\n        const XCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>;\r\n        const BookOpen = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;\r\n        const ClipboardList = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>;\r\n        const Info = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>;\r\n        const TrendingUp = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>;\r\n        const PackageX = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"/><path d="m7.5 4.27 9 5.15"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/><path d="m17 13 5 5"/><path d="m22 13-5 5"/></svg>;\r\n        const DollarSign = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;\r\n        const PackagePlus = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4a7 7 0 1 1-9 0"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><line x1="12" x2="12" y1="12" y2="22"/><polyline points="7 12 12 14.5 17 12"/><line x1="3.29" x2="12" y1="7" y2="12"/><line x1="20.71" x2="12" y1="7" y2="12"/><line x1="12" x2="12" y1="8" y2="10"/><line x1="10" x2="14" y1="9" y2="9"/></svg>;\r\n        const Cpu = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><rect width="6" height="6" x="9" y="9" rx="1"/><path d="M15 2v2"/><path d="M15 20v2"/><path d="M9 2v2"/><path d="M9 20v2"/><path d="M2 9h2"/><path d="M2 15h2"/><path d="M20 9h2"/><path d="M20 15h2"/><path d="M9 4V2"/><path d="M15 4V2"/><path d="M9 20v2"/><path d="M15 20v2"/></svg>;\r\n        const Megaphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 11 18-5v12L3 14v-3z"/><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"/></svg>;\r\n        const Eye = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const CalendarDays = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;\r\n        const Utensils = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>;\r\n        const Heart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/></svg>;\r\n        const Scale = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2"/><path d="M19 7h2"/></svg>;\r\n        const Brain = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3.06Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3.06Z"/></svg>;\r\n        const Package = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="16.5" x2="7.5" y1="9.4" y2="9.4"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27 6.96 12 12.01 20.73 6.96"/><line x1="12" x2="12" y1="22.08" y2="12"/></svg>;\r\n        const MonitorSmartphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"/><path d="M10 19v-3.96 3.15"/><path d="M7 19h5"/><rect width="6" height="10" x="16" y="12" rx="2"/></svg>;\r\n        const Receipt = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"/><path d="M8 8h8"/><path d="M8 12h8"/><path d="M10 16h4"/></svg>;\r\n        const HelpCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>;\r\n        const MessageSquare = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>;\r\n        const Fingerprint = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4"/><path d="M5 19.5A8.5 8.5 0 0 1 12 11a8.5 8.5 0 0 1 7 8.5"/><path d="M10 16.5c0 .8.7 1.5 1.5 1.5S13 17.3 13 16.5"/><path d="M16 14a1 1 0 0 1 1 1v1.5c0 .8-.7 1.5-1.5 1.5S14 17.3 14 16.5V15a1 1 0 0 1 1-1z"/><path d="M8 14a1 1 0 0 0-1 1v1.5c0 .8.7 1.5 1.5 1.5S10 17.3 10 16.5V15a1 1 0 0 0-1-1z"/><path d="M18 19.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/><path d="M6 19.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/><path d="M12 5.5c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5"/><path d="M15 8.5c0 .8-.7 1.5-1.5 1.5S12 9.3 12 8.5"/><path d="M12 11.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"/></svg>;\r\n        const TrendingDown = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>;\r\n\r\n        // --- Recharts Placeholder ---\r\n        const ResponsiveContainer = ({ children }) => <div className="w-full h-[300px] bg-gray-100 flex items-center justify-center text-gray-400 italic rounded border border-gray-200">{children}</div>;\r\n        const LineChart = ({ children, data }) => <div className="p-4">Line Chart Placeholder - Data: {data?.length} points</div>;\r\n        const BarChartComponent = ({ children, data }) => <div className="p-4">Bar Chart Placeholder - Data: {data?.length} points</div>;\r\n        const Line = (props) => null; const Bar = (props) => null; const XAxis = (props) => null; const YAxis = (props) => null; const CartesianGrid = (props) => null; const Tooltip = (props) => null; const Legend = (props) => null;\r\n\r\n        // Utility function\r\n        const getStatusBadgeVariant = (status) => { status = status?.toLowerCase() || \'\'; if (status.includes(\'complete\') || status.includes(\'paid\') || status.includes(\'in stock\') || status.includes(\'verified\') || status.includes(\'active\') || status.includes(\'claim submitted\') || status.includes(\'received\')) return \'success\'; if (status.includes(\'pending\') || status.includes(\'low stock\') || status.includes(\'expired\')) return \'warning\'; if (status.includes(\'processing\') || status.includes(\'ready\') || status.includes(\'shipped\')) return \'info\'; if (status.includes(\'reject\') || status.includes(\'cancel\') || status.includes(\'out of stock\') || status.includes(\'invalid\')) return \'destructive\'; return \'secondary\'; };\r\n        const getClaimStatusVariant = getStatusBadgeVariant;\r\n\r\n        // --- Landing Page ---\r\n        function LandingPage({ setActiveView, login, navigateTo }) { console.log("Rendering LandingPage"); return ( <div className="space-y-12"> <section className="text-center py-16 px-4 bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-lg shadow-sm"> <h1 className="text-4xl md:text-5xl font-bold text-blue-800 mb-4">Welcome to ehutano<span className="text-green-600">+</span></h1> <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">Your trusted digital partner for pharmacy services, health management, and community wellness in Zimbabwe.</p> <div className="flex flex-wrap justify-center gap-4"> <Button size="lg" onClick={() => navigateTo(\'medicineSearch\')}><Search className="mr-2 h-5 w-5" /> Find Medicines Now</Button> <Button size="lg" variant="outline" onClick={() => setActiveView(\'wellness\')}><Activity className="mr-2 h-5 w-5" /> Explore Wellness Hub</Button> </div> </section> <section className="grid md:grid-cols-3 gap-8 text-center"> <Card><CardHeader><Pill className="mx-auto h-10 w-10 text-blue-600 mb-2"/><CardTitle>Online Pharmacy</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Search, compare prices, order medicines, upload prescriptions.</p><Button variant="link" className="mt-4" onClick={() => login(\'patient\')}>Patient Login/Register</Button></CardContent></Card> <Card><CardHeader><Building className="mx-auto h-10 w-10 text-purple-600 mb-2"/><CardTitle>Pharmacy Portal</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Manage inventory, orders, market insights & analytics.</p><Button variant="link" className="mt-4" onClick={() => login(\'pharmacy\')}>Pharmacy Login/Register</Button></CardContent></Card> <Card><CardHeader><HeartPulse className="mx-auto h-10 w-10 text-green-600 mb-2"/><CardTitle>Wellness Hub</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Book events, access health resources, read wellness blog.</p><Button variant="link" className="mt-4" onClick={() => setActiveView(\'wellness\')}>Visit Wellness Hub</Button></CardContent></Card> </section> <section className="py-12 bg-gray-50 rounded-lg"> <div className="container mx-auto px-4 text-center"> <h2 className="text-3xl font-bold text-gray-800 mb-8">How ehutano+ Works</h2> <div className="grid md:grid-cols-4 gap-8"> <div className="flex flex-col items-center p-4"><div className="bg-blue-100 rounded-full p-4 mb-4"><FileSearch className="h-8 w-8 text-blue-600" /></div><h3 className="font-semibold mb-1">1. Search/Upload</h3><p className="text-sm text-gray-600">Find medicine or Rx.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-purple-100 rounded-full p-4 mb-4"><FileCheck className="h-8 w-8 text-purple-600" /></div><h3 className="font-semibold mb-1">2. Quote/Compare</h3><p className="text-sm text-gray-600">Get quote/prices.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-yellow-100 rounded-full p-4 mb-4"><CreditCard className="h-8 w-8 text-yellow-600" /></div><h3 className="font-semibold mb-1">3. Order & Pay</h3><p className="text-sm text-gray-600">Confirm & pay.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-green-100 rounded-full p-4 mb-4"><PackageCheck className="h-8 w-8 text-green-600" /></div><h3 className="font-semibold mb-1">4. Delivery/Pickup</h3><p className="text-sm text-gray-600">Receive/collect.</p></div> </div> </div> </section> <section className="py-12 bg-white border-t border-b border-gray-200"> <div className="container mx-auto px-4"> <h2 className="text-2xl font-semibold text-center text-gray-700 mb-10">Our Trusted Partners</h2> <div className="relative w-full overflow-hidden [mask-image:_linear-gradient(to_right,transparent_0,_black_128px,_black_calc(100%-128px),transparent_100%)]"> <div className="flex w-max animate-scroll hover:paused">{[...MOCK_PARTNER_LOGOS, ...MOCK_PARTNER_LOGOS].map((logo, index) => ( <div key={index} className="flex-shrink-0 mx-8 flex items-center justify-center h-16"><img src={logo.url} alt={`${logo.name} Logo`} className="max-h-full object-contain grayscale opacity-70 hover:grayscale-0 hover:opacity-100 transition-all duration-300" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/150x60/f0f0f0/c0c0c0?text=Err"; e.target.alt = `${logo.name} Err`; }}/></div> ))}</div> </div> </div> </section> <section className="text-center py-10 px-4 bg-gray-50 rounded-lg shadow-sm border"> <h2 className="text-2xl font-semibold text-gray-800 mb-4">Are you a Doctor or Wholesaler?</h2> <p className="text-gray-600 max-w-xl mx-auto mb-6">Join our network to streamline workflows and connect.</p> <div className="flex justify-center gap-4"> <Button variant="outline" onClick={() => login(\'doctor\')}><Stethoscope className="mr-2 h-4 w-4"/> Doctor Login/Register</Button> <Button variant="outline" onClick={() => login(\'wholesaler\')}><Truck className="mr-2 h-4 w-4"/> Wholesaler Login/Register</Button> </div> </section> </div> ); }\r\n\r\n        // --- Patient Portal Components ---\r\n        function PatientPortal({ setActiveView, openVerificationModal, patientData, navigateTo }) { console.log("Rendering PatientPortal"); const [currentSubView, setCurrentSubView] = useState(\'dashboard\'); const navigatePatientView = (view) => { setCurrentSubView(view); }; const renderPatientContent = () => { switch (currentSubView) { case \'search\': return <MedicineSearchListing navigatePatientView={navigatePatientView} navigateTo={navigateTo} />; case \'upload\': return <PrescriptionUpload navigatePatientView={navigatePatientView} />; case \'quotedRx\': const quoteReadyRx = patientData.prescriptions.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quoteReadyRx?.quote} navigatePatientView={navigatePatientView} />; case \'dashboard\': default: return <PatientDashboard setActiveView={setActiveView} openVerificationModal={openVerificationModal} patientData={patientData} navigatePatientView={navigatePatientView} />; } }; return ( <div className="space-y-6"> <nav className="flex space-x-1 border-b overflow-x-auto mb-6"> <Button variant={currentSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'dashboard\')} data-state={currentSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Home className="mr-1 h-4 w-4"/> Dashboard</Button> <Button variant={currentSubView === \'search\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'search\')} data-state={currentSubView === \'search\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Search className="mr-1 h-4 w-4"/> Find Medicine</Button> <Button variant={currentSubView === \'upload\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'upload\')} data-state={currentSubView === \'upload\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><UploadCloud className="mr-1 h-4 w-4"/> Upload Rx</Button> {patientData.prescriptions.some(rx => rx.isQuoteReady) && ( <Button variant={currentSubView === \'quotedRx\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'quotedRx\')} data-state={currentSubView === \'quotedRx\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent relative"> <FileCheck className="mr-1 h-4 w-4"/> View Quote <span className="absolute top-0 right-0 block h-2 w-2 rounded-full ring-1 ring-white bg-red-500"/> </Button> )} </nav> {renderPatientContent()} </div> ); }\r\n        function PatientDashboard({ setActiveView, openVerificationModal, patientData, navigatePatientView }) { const patient = patientData; const handleScan = (mockData) => { const inventoryItem = MOCK_PHARMACY_INVENTORY.find(item => item.name === mockData.medicineName); const fullVerificationData = { ...mockData, wholesaleSource: inventoryItem?.wholesaleSource || \'N/A\', manufacturer: inventoryItem?.manufacturer || \'N/A\', }; openVerificationModal(fullVerificationData); }; const handleScanValidAntibiotic = () => handleScan(MOCK_VERIFICATION_DATA_VALID); const handleScanValidNonAntibiotic = () => handleScan({ ...MOCK_VERIFICATION_DATA_VALID, isAntibiotic: false, medicineName: \'Paracetamol 500mg Tabs\' }); const handleScanInvalid = () => handleScan(MOCK_VERIFICATION_DATA_INVALID); const handleScanExpired = () => handleScan(MOCK_VERIFICATION_DATA_EXPIRED); const quoteReadyRx = patient.prescriptions.find(rx => rx.isQuoteReady); return ( <div className="space-y-6"> {quoteReadyRx && ( <Card className="bg-gradient-to-r from-green-100 to-emerald-100 border-green-300"> <CardContent className="pt-4 flex flex-col sm:flex-row items-center justify-between gap-4"> <div className="flex items-center gap-3"> <FileCheck className="h-8 w-8 text-green-700 flex-shrink-0" /> <div> <h4 className="font-semibold text-green-800">Prescription Quote Ready!</h4> <p className="text-sm text-green-700">Quote for {quoteReadyRx.id} is available.</p> </div> </div> <Button onClick={() => navigatePatientView(\'quotedRx\')} className="bg-green-600 hover:bg-green-700 mt-2 sm:mt-0 flex-shrink-0">View Quote</Button> </CardContent> </Card> )} <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'search\')}> <Search className="mr-2 h-5 w-5 text-blue-600"/> <span>Order Medicine</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'upload\')}> <UploadCloud className="mr-2 h-5 w-5 text-green-600"/> <span>Upload Rx</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={handleScanValidAntibiotic}> <QrCode className="mr-2 h-5 w-5 text-indigo-600"/> <span>Verify Meds</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => alert(\'Pholder: Appointments\')}> <Stethoscope className="mr-2 h-5 w-5 text-purple-600"/> <span>Appointments</span> </Button> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <Card> <CardHeader> <CardTitle>Recent Orders</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>ID</TableHead> <TableHead>Date</TableHead> <TableHead>Status</TableHead> <TableHead>Total</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {patient.recentOrders.map((order) => ( <TableRow key={order.id}> <TableCell className="font-medium">{order.id}</TableCell> <TableCell>{order.date}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell>{order.total}</TableCell> <TableCell><Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View order ${order.id}`)}>View</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Orders\')}>View All Orders</Button> </CardFooter> </Card> </div> <div className="space-y-6"> <Card> <CardHeader> <CardTitle>My Prescriptions</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-60 overflow-y-auto pt-4"> {patient.prescriptions.filter(rx => !rx.isQuoteReady).map((rx) => ( <div key={rx.id} className={`text-sm p-3 rounded-lg border bg-gray-50`}> {rx.medicine ? ( <> <p className="font-semibold">{rx.medicine}</p> <p className="text-xs text-gray-600">Dr. {rx.doctor} ({rx.dateIssued})</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge> ({rx.refillsLeft} refills)</p> {rx.status === \'Active\' && rx.refillsLeft > 0 && ( <Button variant="link" size="sm" className="p-0 h-auto mt-1 text-xs" onClick={() => alert(`Pholder: Refill ${rx.medicine}`)}>Request Refill</Button> )} </> ) : ( <> <p className="font-semibold">Uploaded Rx ({rx.id})</p> <p className="text-xs text-gray-600">Uploaded: {rx.dateUploaded}</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge></p> {rx.notes && <p className="text-xs italic">Notes: "{rx.notes}"</p>} </> )} </div> ))} {patient.prescriptions.filter(rx => !rx.isQuoteReady).length === 0 && <p className="text-sm text-gray-500">No active/pending Rxs.</p>} </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Rxs\')}>View All Prescriptions</Button> </CardFooter> </Card> <Card> <CardHeader> <CardTitle>Reminders</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-48 overflow-y-auto pt-4"> {patient.reminders.map((rem) => ( <div key={rem.id} className="text-sm p-3 bg-blue-50 rounded-lg border border-blue-200 flex justify-between items-center"> <div><p className="font-semibold">{rem.type === \'Refill\' ? `Refill: ${rem.medicine}` : rem.details}</p><p className="text-xs text-gray-600">Due: {rem.dueDate}</p></div> <Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Dismiss ${rem.id}`)}>X</Button> </div> ))} {patient.reminders.length === 0 && <p className="text-sm text-gray-500">No reminders.</p>} </CardContent> </Card> </div> </div> <Card> <CardHeader> <CardTitle>Need Help?</CardTitle> </CardHeader> <CardContent className="pt-4 flex flex-wrap gap-4 justify-center"> <Button variant="outline" onClick={() => alert(\'Pholder: AI Chat\')}> <HelpCircle className="mr-2 h-4 w-4"/> Ask AI </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Live Chat\')}> <MessageSquare className="mr-2 h-4 w-4"/> Chat Pharmacist </Button> </CardContent> </Card> <Card className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200"> <CardHeader> <CardTitle className="text-green-800">Wellness Hub</CardTitle> </CardHeader> <CardContent className="pt-4 flex items-center gap-4"> <img src="https://placehold.co/100x80/a7f3d0/14532d?text=Wellness" alt="Wellness" className="rounded-lg h-20"/> <div className="flex-grow"><p className="mb-3 text-gray-700 text-sm">Book events, read articles, use tools.</p><Button onClick={() => setActiveView(\'wellness\')} className="bg-green-600 hover:bg-green-700" size="sm"> <Activity className="mr-2 h-4 w-4"/> Go to Wellness </Button></div> </CardContent> </Card> <Card className="mt-6"> <CardHeader><CardTitle>QR Scan Simulation</CardTitle></CardHeader> <CardContent className="pt-4 flex flex-wrap gap-2"> <Button variant="secondary" size="sm" onClick={handleScanValidAntibiotic}>Scan Valid ABX</Button> <Button variant="secondary" size="sm" onClick={handleScanValidNonAntibiotic}>Scan Valid Non-ABX</Button> <Button variant="destructive" size="sm" onClick={handleScanInvalid}>Scan Invalid</Button> <Button variant="warning" size="sm" onClick={handleScanExpired}>Scan Expired</Button> </CardContent> </Card> </div> ); }\r\n        function MedicineSearchListing({ navigatePatientView, navigateTo }) { const [searchTerm, setSearchTerm] = useState(\'\'); const [searchResults, setSearchResults] = useState(MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES); const handleSearch = (e) => { const term = e.target.value.toLowerCase(); setSearchTerm(e.target.value); setSearchResults( MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES.filter(med => med.name.toLowerCase().includes(term) || med.category.toLowerCase().includes(term) ) ); }; const handleAddToCart = (medId, pharmacyName, price) => { alert(`Pholder: Add ${medId} from ${pharmacyName} ($${price.toFixed(2)}) to cart.`); }; const handleViewDetails = (medId) => { alert(`Pholder: View details ${medId}.`); }; return ( <div className="space-y-6"> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /> <Input placeholder="Search medicine or category..." className="pl-12 text-base h-12" value={searchTerm} onChange={handleSearch} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {searchResults.length > 0 ? ( searchResults.map(med => ( <Card key={med.id} className="overflow-hidden flex flex-col"> <CardHeader className="flex flex-row items-start gap-4 p-4"> <img src={med.imageUrl} alt={med.name} className="w-20 h-20 object-contain rounded-md border flex-shrink-0" /> <div className="flex-grow"> <h4 className="font-semibold text-base mb-1">{med.name}</h4> <p className="text-sm text-gray-500 mb-2">{med.category}</p> {med.requiresPrescription && <Badge variant="warning">Rx</Badge>} {med.isAntibiotic && <Badge variant="destructive" className="ml-1">ABX</Badge>} </div> </CardHeader> <CardContent className="pt-0 pb-4 flex-grow flex flex-col"> <h5 className="text-sm font-medium mb-2 text-gray-700">Compare Prices:</h5> {med.pharmacies.length > 0 ? ( <div className="space-y-3"> {med.pharmacies.slice(0, 3).map(pharm => ( <div key={pharm.name} className="flex justify-between items-center p-2 bg-gray-50 rounded-md border"> <div> <span className="text-sm font-medium">{pharm.name}</span> <Badge variant={getStatusBadgeVariant(pharm.stockStatus)} className="ml-2">{pharm.stockStatus}</Badge> </div> <div className="text-right flex-shrink-0"> <p className="text-base font-semibold text-blue-700">${pharm.price.toFixed(2)}</p> <Button size="sm" variant="link" className="text-xs h-auto p-0 mt-1" onClick={() => handleAddToCart(med.id, pharm.name, pharm.price)} disabled={med.requiresPrescription} > {med.requiresPrescription ? \'Requires Rx\' : \'Add to Cart\'} </Button> </div> </div> ))} {med.pharmacies.length > 3 && ( <Button variant="link" size="sm" className="w-full mt-2" onClick={() => handleViewDetails(med.id)}> View {med.pharmacies.length - 3} more... </Button> )} </div> ) : ( <p className="text-sm text-gray-500 italic">Unavailable.</p> )} </CardContent> <CardFooter className="border-t pt-3"> <Button variant="outline" onClick={() => handleViewDetails(med.id)} className="w-full" size="sm"> View Details </Button> </CardFooter> </Card> )) ) : ( <div className="col-span-full text-center py-10 text-gray-500"> <Pill className="mx-auto h-12 w-12 text-gray-400 mb-4"/> <p>No medicines found for "{searchTerm}".</p> <p className="text-sm mt-2">Try again or <button className="text-blue-600 underline" onClick={() => navigateTo ? navigateTo(\'patientPortal\') : (navigatePatientView ? navigatePatientView(\'upload\') : alert(\'Cannot navigate\')) }>upload Rx</button>.</p> </div> )} </div> </div> ); }\r\n        function PrescriptionUpload({ navigatePatientView }) { const [selectedFile, setSelectedFile] = useState(null); const [notes, setNotes] = useState(\'\'); const [isUploading, setIsUploading] = useState(false); const [uploadStatus, setUploadStatus] = useState(\'\'); const handleFileChange = (event) => { if (event.target.files && event.target.files[0]) { setSelectedFile(event.target.files[0]); setUploadStatus(\'\'); } }; const handleSubmit = async (event) => { event.preventDefault(); if (!selectedFile) { alert("Select file."); return; } setIsUploading(true); setUploadStatus(\'\'); await new Promise(resolve => setTimeout(resolve, 1500)); const isSuccess = Math.random() > 0.2; if (isSuccess) { setUploadStatus(\'success\'); setSelectedFile(null); setNotes(\'\'); } else { setUploadStatus(\'error\'); } setIsUploading(false); }; return ( <div className="space-y-6 max-w-2xl mx-auto"> <Card> <CardHeader> <CardTitle>Upload Prescription</CardTitle> <CardDescription>Submit image/PDF for review/quote.</CardDescription> </CardHeader> <form onSubmit={handleSubmit}> <CardContent className="pt-6 space-y-4"> <div> <Label htmlFor="rx-file">File (Image/PDF)</Label> <Input id="rx-file" type="file" accept="image/*,.pdf" onChange={handleFileChange} required className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/> {selectedFile && (<p className="text-sm mt-2">Selected: {selectedFile.name}</p>)} </div> <div> <Label htmlFor="notes">Notes (Optional)</Label> <Textarea id="notes" placeholder="e.g., Brand preference, urgency..." value={notes} onChange={(e) => setNotes(e.target.value)} className="mt-1"/> </div> </CardContent> <CardFooter className="flex justify-end border-t pt-4"> <Button type="submit" disabled={isUploading || !selectedFile}> {isUploading ? \'Uploading...\' : <><UploadCloud className="mr-2 h-4 w-4" /> Submit</>} </Button> </CardFooter> </form> </Card> {uploadStatus === \'success\' && ( <div className="p-4 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm mt-4"> Upload successful! Check <button className="font-bold underline" onClick={() => navigatePatientView(\'dashboard\')}>Dashboard</button> for status/quote. </div> )} {uploadStatus === \'error\' && ( <div className="p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm mt-4"> Upload failed. Try again or contact support. </div> )} </div> ); }\r\n        function QuotedPrescriptionView({ quote, navigatePatientView }) { if (!quote) { return ( <div className="space-y-6"> <Card> <CardHeader><CardTitle>Prescription Quote</CardTitle></CardHeader> <CardContent className="pt-6 text-center text-gray-500"> No quote available. Check <button className="text-blue-600 underline" onClick={() => navigatePatientView(\'dashboard\')}>dashboard</button>. </CardContent> </Card> </div> ); } const handleAddToCart = () => { alert(`Pholder: Add quote ($${quote.total.toFixed(2)}) to cart.`); }; const handlePayment = (method) => { if (method === \'medicalAid\') { const useBio = window.confirm("Simulate MA Payment:\\nUse Biometrics?"); if (useBio) { alert("Place finger... (Sim)"); setTimeout(() => { const ok = Math.random() > 0.1; alert(ok ? "Biometric OK! Processing..." : "Biometric Failed."); if(ok){ /* TODO: Update order */ } }, 1500); } else { const pin = prompt("Enter MA PIN (Sim):"); if (pin) { alert("PIN OK. Processing..."); /* TODO: Update order */ } else { alert("PIN cancelled."); } } } else { alert(`Pholder: Proceed to ${method} ($${quote.total.toFixed(2)})...`); } }; return ( <div className="space-y-6"> <Card> <CardHeader> <CardTitle>Your Prescription Quote</CardTitle> <CardDescription>Review items & checkout.</CardDescription> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="text-center">Qty</TableHead> <TableHead className="text-right">Price</TableHead> <TableHead className="text-right">Subtotal</TableHead> </TableRow> </TableHeader> <TableBody> {quote.items.map((item, index) => ( <TableRow key={index}> <TableCell className="font-medium">{item.name}</TableCell> <TableCell className="text-center">{item.qty}</TableCell> <TableCell className="text-right">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right">${(item.qty * item.price).toFixed(2)}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3} className="text-right font-semibold text-base">Total:</TableCell> <TableCell className="text-right font-bold text-lg">${quote.total.toFixed(2)}</TableCell> </TableRow> </TableFooter> </Table> </CardContent> <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4 border-t pt-6"> <Button variant="outline" onClick={handleAddToCart}> <ShoppingCart className="mr-2 h-4 w-4"/> Add to Cart </Button> <div className="flex flex-wrap gap-2"> <Button onClick={() => handlePayment(\'medicalAid\')} className="bg-green-600 hover:bg-green-700"> <Fingerprint className="mr-2 h-4 w-4" /> Pay with MA </Button> <Button onClick={() => handlePayment(\'EcoCash\')}> Pay EcoCash </Button> <Button onClick={() => handlePayment(\'Other\')} variant="secondary"> Other </Button> </div> </CardFooter> </Card> </div> ); }\r\n        function MedicineVerificationModal({ isOpen, onClose, verificationData }) { if (!verificationData) return null; const { status, message, medicineName, batchNumber, expiryDate, pharmacySource, wholesaleSource, manufacturer, isAntibiotic } = verificationData; let statusIcon, statusColorClass, title, bgColorClass = "bg-white"; switch (status) { case \'verified\': statusIcon = <CheckCircle className="h-12 w-12 text-green-500" />; statusColorClass = "text-green-700"; title = "Verified"; bgColorClass = "bg-green-50"; break; case \'invalid\': statusIcon = <XCircle className="h-12 w-12 text-red-500" />; statusColorClass = "text-red-700"; title = "FAILED"; bgColorClass = "bg-red-50"; break; case \'expired\': statusIcon = <AlertTriangle className="h-12 w-12 text-yellow-500" />; statusColorClass = "text-yellow-700"; title = "EXPIRED"; bgColorClass = "bg-yellow-50"; break; default: statusIcon = <Info className="h-12 w-12 text-gray-500" />; statusColorClass = "text-gray-700"; title = "Info"; } return ( <Modal isOpen={isOpen} onClose={onClose} title={title} maxWidth="md"> <div className={`flex flex-col items-center text-center space-y-4 p-6 rounded-lg ${bgColorClass}`}> {statusIcon} <p className={`font-semibold text-lg ${statusColorClass}`}>{message}</p> {(status === \'verified\' || status === \'expired\') && ( <Card className="w-full mt-4 text-left bg-white shadow-md"> <CardHeader><CardTitle className="text-base">Details</CardTitle></CardHeader> <CardContent className="space-y-1 text-sm pt-2"> <div className="grid grid-cols-3 gap-x-2 gap-y-1"> <span className="font-medium text-gray-500">Med:</span> <span className="col-span-2 font-medium">{medicineName || \'N/A\'}</span> <span className="font-medium text-gray-500">Batch:</span> <span className="col-span-2 font-mono">{batchNumber || \'N/A\'}</span> <span className="font-medium text-gray-500">Expiry:</span> <span className={`col-span-2 ${status === \'expired\' ? \'text-red-600 font-bold\' : \'\'}`}>{expiryDate || \'N/A\'}</span> <span className="font-medium text-gray-500">Manuf:</span> <span className="col-span-2">{manufacturer || \'N/A\'}</span> <span className="font-medium text-gray-500">Whsle:</span> <span className="col-span-2">{wholesaleSource || \'N/A\'}</span> <span className="font-medium text-gray-500">Pharm:</span> <span className="col-span-2">{pharmacySource || \'N/A\'}</span> </div> </CardContent> </Card> )} {status === \'verified\' && isAntibiotic && ( <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 text-yellow-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>ABX Alert:</strong> Use only as prescribed.</span> </div> )} {status === \'invalid\' && ( <div className="mt-4 p-3 bg-red-100 border border-red-300 text-red-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>Action:</strong> Do not use. Report!</span> </div> )} <Button onClick={onClose} className="mt-6" variant={status === \'invalid\' ? \'destructive\' : \'default\'}>Close</Button> </div> </Modal> ); }\r\n\r\n        // --- Pharmacy Portal & Sub-Components ---\r\n        function PharmacyPortal({ setActiveView, openVerificationModal, patientData }) {\r\n            console.log("Rendering PharmacyPortal Component");\r\n            const [pharmacySubView, setPharmacySubView] = useState(\'orders\');\r\n            const [isDispensingModalOpen, setDispensingModalOpen] = useState(false);\r\n            const [isOrderDetailsModalOpen, setOrderDetailsModalOpen] = useState(false);\r\n            const [selectedOrderForModal, setSelectedOrderForModal] = useState(null);\r\n            const [orders, setOrders] = useState(() => {\r\n                 console.log("Initializing PharmacyPortal \'orders\' state with MOCK_PHARMACY_ORDERS.");\r\n                 return JSON.parse(JSON.stringify(MOCK_PHARMACY_ORDERS));\r\n            });\r\n\r\n            const updateOrderStatus = (orderId, newStatus) => {\r\n                console.log(`(updateOrderStatus) called for ID: ${orderId}, New Status: ${newStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current status: ${order.status}. Updating to ${newStatus}.`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(order.medicalAidStatus)); return { ...order, status: newStatus, requiresAction }; } return order; })); };\r\n\r\n            const updateOrderAndMAStatus = (orderId, newOrderStatus, newMAStatus) => {\r\n                console.log(`(updateOrderAndMAStatus) called for ID: ${orderId}. New Order Status: ${newOrderStatus}, New MA Status: ${newMAStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current: Status=${order.status}, MA=${order.medicalAidStatus}.`); const updatedStatus = newOrderStatus ?? order.status; const updatedMAStatus = newMAStatus ?? order.medicalAidStatus; const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(updatedStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(updatedMAStatus)); console.log(` -> Updated state: Status=${updatedStatus}, MA=${updatedMAStatus}, RequiresAction=${requiresAction}`); return { ...order, status: updatedStatus, medicalAidStatus: updatedMAStatus, requiresAction }; } return order; })); };\r\n\r\n            const openDispensingModal = () => setDispensingModalOpen(true);\r\n            const closeDispensingModal = () => setDispensingModalOpen(false);\r\n            const openOrderDetailsModalHandler = (order) => { console.log("Opening Order Details Modal for order:", order); setSelectedOrderForModal(order); setOrderDetailsModalOpen(true); };\r\n            const closeOrderDetailsModalHandler = () => { console.log("Closing Order Details Modal"); setOrderDetailsModalOpen(false); setSelectedOrderForModal(null); };\r\n\r\n            const renderSubView = () => {\r\n                 console.log("Rendering Pharmacy SubView:", pharmacySubView);\r\n                 // Wrap sub-view rendering in try-catch for better error isolation\r\n                 try {\r\n                     switch(pharmacySubView) {\r\n                        case \'inventory\':\r\n                            console.log(" -> Attempting to render PharmacyInventory...");\r\n                            return <PharmacyInventory />; // The component we are debugging\r\n                        case \'orders\': return <OrderManagementView orders={orders} updateOrderStatus={updateOrderStatus} openOrderDetailsModal={openOrderDetailsModalHandler} />;\r\n                        case \'marketWatch\': return <MarketWatchView />;\r\n                        case \'analytics\': return <PharmacyAnalytics />;\r\n                        case \'claims\': return <MedicalAidClaimsView orders={orders} />;\r\n                        default: console.warn(`Unknown pharmacySubView: ${pharmacySubView}.`); return <div className="text-center p-8 text-gray-500">Select a view from the tabs above.</div>;\r\n                     }\r\n                 } catch (error) {\r\n                     console.error(`Error rendering pharmacy subview "${pharmacySubView}":`, error);\r\n                     // Display error prominently if sub-view fails\r\n                     return (\r\n                        <div className="text-center p-8 text-red-600 bg-red-50 border border-red-300 rounded-md">\r\n                             <h3 className="text-lg font-semibold mb-2">Error Loading \'{pharmacySubView}\' View</h3>\r\n                             <p>There was a problem rendering this section.</p>\r\n                             <p className="text-sm mt-2">Please check the browser console (F12) for technical details.</p>\r\n                             <pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || error.message}</pre>\r\n                         </div>\r\n                    );\r\n                 }\r\n            };\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <nav className="flex space-x-1 border-b overflow-x-auto">\r\n                        <Button variant={pharmacySubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'orders\')} data-state={pharmacySubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button>\r\n                        <Button variant=\'ghost\' onClick={openDispensingModal} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Pill className="mr-2 h-4 w-4" /> Dispense</Button>\r\n                        <Button variant={pharmacySubView === \'inventory\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'inventory\')} data-state={pharmacySubView === \'inventory\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Package className="mr-2 h-4 w-4" /> Inventory</Button>\r\n                        <Button variant={pharmacySubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'marketWatch\')} data-state={pharmacySubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button>\r\n                        <Button variant={pharmacySubView === \'analytics\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'analytics\')} data-state={pharmacySubView === \'analytics\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BarChart className="mr-2 h-4 w-4" /> Analytics</Button>\r\n                        <Button variant={pharmacySubView === \'claims\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'claims\')} data-state={pharmacySubView === \'claims\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CreditCard className="mr-2 h-4 w-4" /> Claims</Button>\r\n                        <Button variant=\'ghost\' onClick={() => alert(\'Pholder: Walk-in Quote\')} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4" /> Quote Walk-in</Button>\r\n                    </nav>\r\n                    <div className="pt-6">\r\n                       {renderSubView()}\r\n                    </div>\r\n                    <DispensingModal isOpen={isDispensingModalOpen} onClose={closeDispensingModal} />\r\n                    <OrderDetailsModal isOpen={isOrderDetailsModalOpen} onClose={closeOrderDetailsModalHandler} order={selectedOrderForModal} updateOrderAndMAStatusCallback={updateOrderAndMAStatus} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function PharmacyInventory() {\r\n            console.log("PharmacyInventory: Component rendering started.");\r\n            const [inventory, setInventory] = useState(MOCK_PHARMACY_INVENTORY);\r\n            const [searchTerm, setSearchTerm] = useState(\'\');\r\n            const [filterCategory, setFilterCategory] = useState(\'all\');\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            console.log("PharmacyInventory: State initialized.");\r\n\r\n            const filteredInventory = useMemo(() => {\r\n                console.log("PharmacyInventory: Calculating filteredInventory memo...");\r\n                try {\r\n                    return inventory.filter(item => {\r\n                        // Added robust checks for potential null/undefined values\r\n                        const term = searchTerm.toLowerCase();\r\n                        const nameMatch = item && item.name && typeof item.name.toLowerCase === \'function\' ? item.name.toLowerCase().includes(term) : false;\r\n                        const idMatch = item && item.id && typeof item.id.toLowerCase === \'function\' ? item.id.toLowerCase().includes(term) : false;\r\n                        const categoryMatch = item && item.category && typeof item.category.toLowerCase === \'function\' ? item.category.toLowerCase().includes(term) : false;\r\n                        const matchesSearch = nameMatch || idMatch || categoryMatch;\r\n\r\n                        const matchesCategory = filterCategory === \'all\' || (item && item.category === filterCategory);\r\n                        const matchesStatus = filterStatus === \'all\' || (item && item.status === filterStatus);\r\n                        return matchesSearch && matchesCategory && matchesStatus;\r\n                    });\r\n                } catch(error) {\r\n                    console.error("PharmacyInventory: Error during filtering:", error);\r\n                    return []; // Return empty array on error\r\n                }\r\n            }, [inventory, searchTerm, filterCategory, filterStatus]);\r\n\r\n            const categories = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating categories memo...");\r\n                 try {\r\n                    const uniqueCategories = new Set(inventory.map(item => item?.category).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueCategories)].sort();\r\n                 } catch (error) {\r\n                    console.error("PharmacyInventory: Error calculating categories:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            const statuses = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating statuses memo...");\r\n                 try {\r\n                    const uniqueStatuses = new Set(inventory.map(item => item?.status).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueStatuses)];\r\n                 } catch(error) {\r\n                    console.error("PharmacyInventory: Error calculating statuses:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            console.log("PharmacyInventory: Memos calculated. Filtered count:", filteredInventory.length);\r\n\r\n            const handleAddItem = () => alert(\'Pholder: Add Item Modal\');\r\n            const handleEditItem = (itemId) => alert(`Pholder: Edit Modal ${itemId}`);\r\n            const handleOrderFromWholesaler = () => alert(\'Pholder: Wholesaler Order UI\');\r\n\r\n            console.log("PharmacyInventory: Preparing to return JSX.");\r\n\r\n            // Wrap the entire JSX return in a try-catch as a last resort for rendering errors\r\n            try {\r\n                return (\r\n                    <div className="space-y-6">\r\n                        {/* Header */}\r\n                        <header className="flex flex-wrap justify-between items-center pb-4 gap-4 border-b">\r\n                            <div> <h2 className="text-xl font-semibold">Inventory Management</h2> <p className="text-gray-500 text-sm">Manage stock & details.</p> </div>\r\n                            <div className="flex items-center space-x-2 flex-wrap gap-2"> <Button variant="outline" size="sm" onClick={handleOrderFromWholesaler}><Truck className="mr-2 h-4 w-4" /> Order Stock</Button> <Button size="sm" onClick={handleAddItem}><PlusCircle className="mr-2 h-4 w-4" /> Add Item</Button> </div>\r\n                        </header>\r\n                        {/* Filters */}\r\n                        <Card>\r\n                            <CardContent className="pt-6 flex flex-wrap items-center gap-4">\r\n                                <div className="relative flex-grow min-w-[200px]"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" /><Input placeholder="Search Name, ID, Category..." className="pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="cat-filter" className="sr-only">Category</Label><Select id="cat-filter" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full">{categories.map(cat => (<SelectItem key={cat} value={cat}>{cat === \'all\' ? \'All Categories\' : cat}</SelectItem>))}</Select></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="stat-filter" className="sr-only">Status</Label><Select id="stat-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* Table */}\r\n                        <Card>\r\n                            <CardHeader><CardTitle>Medicine Stock List</CardTitle></CardHeader>\r\n                            <CardContent className="pt-4">\r\n                                <Table>\r\n                                    <TableHeader><TableRow><TableHead>ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Stock</TableHead><TableHead className="text-right">Price</TableHead><TableHead>Status</TableHead><TableHead>Supplier</TableHead><TableHead>Updated</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                    <TableBody>\r\n                                        {filteredInventory.length > 0 ? (\r\n                                            filteredInventory.map((item) => (\r\n                                                item && item.id ? (\r\n                                                    <TableRow key={item.id} className={item.stock === 0 ? \'opacity-60 bg-gray-50\' : item.stock < 10 ? \'bg-yellow-50/70\' : \'\'}>\r\n                                                        <TableCell className="font-mono text-xs">{item.id}</TableCell>\r\n                                                        <TableCell className="font-medium">{item.name || \'N/A\'}</TableCell>\r\n                                                        <TableCell>{item.category || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right font-semibold">{typeof item.stock === \'number\' ? item.stock : \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right">{(typeof item.price === \'number\' ? item.price : 0).toFixed(2)}</TableCell>\r\n                                                        <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status || \'N/A\'}</Badge></TableCell>\r\n                                                        <TableCell>{item.supplier || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-xs">{item.lastUpdated || \'N/A\'}</TableCell>\r\n                                                        <TableCell><Button variant="ghost" size="sm" onClick={() => handleEditItem(item.id)}>Edit</Button></TableCell>\r\n                                                    </TableRow>\r\n                                                ) : null\r\n                                            ))\r\n                                        ) : (\r\n                                            <TableRow><TableCell colSpan={9} className="h-24 text-center text-gray-500">No inventory items match the current filters.</TableCell></TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </CardContent>\r\n                            <CardFooter className="pt-4 justify-between items-center border-t">\r\n                                <p className="text-sm text-gray-500">Showing {filteredInventory.length} of {inventory.length} items.</p>\r\n                                <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                );\r\n            } catch (error) {\r\n                console.error("PharmacyInventory: Error during JSX rendering:", error);\r\n                return <div className="p-4 text-red-600 bg-red-50 border border-red-300 rounded">Error rendering inventory table. Check console. <pre>{error.stack}</pre></div>;\r\n            }\r\n        }\r\n\r\n        function OrderManagementView({ orders, updateOrderStatus, openOrderDetailsModal }) {\r\n            console.log("Rendering OrderManagementView. Received orders prop:", orders);\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            const validOrders = Array.isArray(orders) ? orders : [];\r\n            if (!Array.isArray(orders)) { console.error("OrderManagementView received non-array \'orders\' prop:", orders); }\r\n            const statuses = useMemo(() => { if (!validOrders.length) return [\'all\']; const validStatuses = validOrders.map(order => order?.status).filter(Boolean); return [\'all\', ...new Set(validStatuses)].sort(); }, [validOrders]);\r\n            const filteredOrders = useMemo(() => { if (!validOrders.length) return []; if (filterStatus === \'all\') return validOrders; return validOrders.filter(order => order?.status === filterStatus); }, [validOrders, filterStatus]);\r\n            console.log(`OrderManagementView: Filter Status=\'${filterStatus}\', Filtered Orders Count=${filteredOrders.length}`);\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <header className="pb-4 flex flex-wrap justify-between items-center gap-4 border-b">\r\n                        <div><h2 className="text-xl font-semibold">Order Management</h2><p className="text-gray-500 text-sm">View and manage incoming patient orders.</p></div>\r\n                        <div className="flex items-center gap-2"><Label htmlFor="order-status-filter" className="text-sm">Filter by Status:</Label><Select id="order-status-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-40">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                    </header>\r\n                    <Card>\r\n                        <CardHeader><CardTitle>Incoming & Recent Orders</CardTitle></CardHeader>\r\n                        <CardContent className="pt-4">\r\n                            <Table>\r\n                                <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Patient</TableHead><TableHead>Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Total</TableHead><TableHead>Medical Aid</TableHead><TableHead>Payment</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                <TableBody>\r\n                                    {filteredOrders.length > 0 ? (\r\n                                        filteredOrders.map((order) => ( order && order.id ? ( <TableRow key={order.id} className={order.requiresAction ? \'bg-blue-50/70 hover:bg-blue-100/50\' : \'\'}>\r\n                                                    <TableCell className="font-mono text-xs">{order.id}</TableCell>\r\n                                                    <TableCell>{order.patientName || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.date || \'N/A\'}</TableCell>\r\n                                                    <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status || \'N/A\'}</Badge></TableCell>\r\n                                                    <TableCell className="text-right font-medium">${(typeof order.total === \'number\' ? order.total : 0).toFixed(2)}</TableCell>\r\n                                                    <TableCell>{order.medicalAidProvider ? (<Badge variant={getClaimStatusVariant(order.medicalAidStatus)}>{order.medicalAidStatus || \'N/A\'}</Badge>) : (<Badge variant="outline">N/A</Badge>)}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.paymentMethod || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="space-x-1 whitespace-nowrap">\r\n                                                        <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => openOrderDetailsModal(order)}>Details</Button>\r\n                                                        {order.status === \'Pending Approval\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Approve</Button>}\r\n                                                        {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Ready for Pickup\')}>Ready</Button>}\r\n                                                        {order.status === \'Ready for Pickup\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Completed\')}>Complete</Button>}\r\n                                                        {order.status === \'Pending Payment\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Mark Paid</Button> }\r\n                                                    </TableCell>\r\n                                                </TableRow> ) : null\r\n                                        ))\r\n                                    ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No orders match the selected filter.</TableCell></TableRow> )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                        <CardFooter className="pt-4 border-t justify-between items-center">\r\n                             <p className="text-sm text-gray-500">Showing {filteredOrders.length} of {validOrders.length} orders.</p>\r\n                             <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        function OrderDetailsModal({ isOpen, onClose, order, updateOrderAndMAStatusCallback }) {\r\n            const [internalOrderData, setInternalOrderData] = useState(null);\r\n            useEffect(() => { console.log("OrderDetailsModal Effect: Received order prop:", order); if (order && (!internalOrderData || internalOrderData.id !== order.id)) { console.log(` -> Updating internal state for order ID: ${order.id}`); setInternalOrderData({ ...order }); } else if (!order && internalOrderData) { console.log(" -> Clearing internal state as order prop is null/undefined."); setInternalOrderData(null); } }, [order]);\r\n            if (!isOpen || !internalOrderData) { return null; }\r\n            const { id, patientName, date, status, total, items, medicalAidStatus, amountCovered, medicalAidProvider, paymentMethod } = internalOrderData;\r\n            console.log(`OrderDetailsModal Rendering content for Order ID: ${id}`);\r\n            const showClaimButton = medicalAidProvider && (medicalAidStatus === \'Received\' || medicalAidStatus === \'Pending Patient Auth\');\r\n            const showMarkPaidButton = status === \'Pending Payment\';\r\n            const showApproveButton = status === \'Pending Approval\';\r\n            const showReadyButton = status === \'Processing\';\r\n            const showCompleteButton = status === \'Ready for Pickup\' || status === \'Out for Delivery\';\r\n            const handleClaimSubmit = () => { const newMAStatus = \'Claim Submitted\'; console.log(`Modal action: Submitting claim for ${id}, setting MA status to ${newMAStatus}`); setInternalOrderData(prev => prev ? { ...prev, medicalAidStatus: newMAStatus, requiresAction: false } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, null, newMAStatus); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Claim Submitted for ${id}`); };\r\n            const handleStatusUpdate = (newStatus) => { console.log(`Modal action: Updating status for ${id} to ${newStatus}`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(medicalAidStatus)); setInternalOrderData(prev => prev ? { ...prev, status: newStatus, requiresAction } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, newStatus, null); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Order ${id} updated to ${newStatus}.`); };\r\n            const orderItems = Array.isArray(items) ? items : [];\r\n\r\n            return (\r\n                <Modal isOpen={isOpen} onClose={onClose} title={`Order Details: ${id}`} maxWidth="xl">\r\n                    <div className="space-y-4">\r\n                        <Card><CardHeader><CardTitle className="text-base">Order Information</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Patient:</span> <span className="font-medium">{patientName || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Date:</span> <span>{date || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Status:</span> <span><Badge variant={getStatusBadgeVariant(status)}>{status || \'N/A\'}</Badge></span></div><div><span className="text-gray-500 mr-2">Total:</span> <span className="font-semibold">${(typeof total === \'number\' ? total : 0).toFixed(2)}</span></div><div><span className="text-gray-500 mr-2">Payment Method:</span> <span>{paymentMethod || \'N/A\'}</span></div></CardContent></Card>\r\n                        <Card><CardHeader><CardTitle className="text-base">Items in Order</CardTitle></CardHeader><CardContent className="pt-4">{orderItems.length > 0 ? (<ul className="space-y-1 text-sm">{orderItems.map((item, index) => ( <li key={item.id || index} className="flex justify-between border-b py-1 last:border-0"><span>{item.qty || 0} x {item.name || \'Unknown Item\'}</span></li> ))}</ul>) : (<p className="text-sm text-gray-500 italic">No items listed for this order.</p>)}</CardContent></Card>\r\n                        {medicalAidProvider && ( <Card><CardHeader><CardTitle className="text-base">Medical Aid Details</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Provider:</span> <span>{medicalAidProvider}</span></div><div><span className="text-gray-500 mr-2">Claim Status:</span> <Badge variant={getClaimStatusVariant(medicalAidStatus)}>{medicalAidStatus || \'N/A\'}</Badge></div><div><span className="text-gray-500 mr-2">Amount Covered:</span> <span className="font-semibold">${(typeof amountCovered === \'number\' ? amountCovered : 0).toFixed(2)}</span></div>{showClaimButton && ( <div className="md:col-span-2 mt-2"><Button onClick={handleClaimSubmit} size="sm" variant="success"><FileCheck className="mr-2 h-4 w-4" /> Submit Claim Now</Button></div> )}</CardContent></Card> )}\r\n                        <div className="flex flex-wrap justify-between items-center gap-3 border-t pt-4 mt-4">\r\n                            <div className="flex flex-wrap gap-2">{showApproveButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm">Approve Order</Button>}{showReadyButton && <Button onClick={() => handleStatusUpdate(\'Ready for Pickup\')} size="sm">Mark Ready for Pickup</Button>}{showCompleteButton && <Button onClick={() => handleStatusUpdate(\'Completed\')} size="sm" variant="success">Mark as Completed</Button>}{showMarkPaidButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm" variant="success">Mark as Paid</Button> }</div>\r\n                            <Button variant="outline" onClick={onClose}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n        function DispensingModal({ isOpen, onClose }) { const [patientSearchTerm, setPatientSearchTerm] = useState(\'\'); const [selectedPatient, setSelectedPatient] = useState(null); const [medicineSearchTerm, setMedicineSearchTerm] = useState(\'\'); const [dispensingCart, setDispensingCart] = useState([]); const [inventory] = useState(MOCK_PHARMACY_INVENTORY); const handlePatientSearch = () => { const term = patientSearchTerm.toLowerCase(); const foundPatient = MOCK_PHARMACY_ORDERS.find(o => o.patientName.toLowerCase().includes(term) || o.patientId?.toLowerCase() === term); if (foundPatient) { setSelectedPatient({ id: foundPatient.patientId, name: foundPatient.patientName }); setPatientSearchTerm(\'\'); } else { setSelectedPatient(null); alert(\'Patient not found.\'); } }; const filteredInventory = useMemo(() => { if (!medicineSearchTerm) return []; return inventory.filter(item => item.name.toLowerCase().includes(medicineSearchTerm.toLowerCase()) && item.stock > 0); }, [medicineSearchTerm, inventory]); const addToCart = (medItem) => { const existingItemIndex = dispensingCart.findIndex(item => item.id === medItem.id); if (existingItemIndex > -1) { const currentQty = dispensingCart[existingItemIndex].qty; if (currentQty < medItem.stock) { setDispensingCart(prevCart => prevCart.map((item, index) => index === existingItemIndex ? { ...item, qty: item.qty + 1 } : item)); } else { alert(`Max stock (${medItem.stock}) reached for ${medItem.name}`); } } else { if (medItem.stock > 0) { setDispensingCart(prevCart => [...prevCart, { id: medItem.id, name: medItem.name, qty: 1, price: medItem.price, stock: medItem.stock }]); } else { alert(`${medItem.name} is out of stock.`); } } setMedicineSearchTerm(\'\'); }; const updateQty = (itemId, newQtyStr) => { const newQty = parseInt(newQtyStr, 10); if (isNaN(newQty)) return; const itemInCart = dispensingCart.find(item => item.id === itemId); if (!itemInCart) return; if (newQty <= 0) { setDispensingCart(prevCart => prevCart.filter(item => item.id !== itemId)); } else if (newQty <= itemInCart.stock) { setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: newQty } : item)); } else { alert(`Quantity (${newQty}) exceeds stock (${itemInCart.stock}). Maximum quantity set.`); setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: itemInCart.stock } : item)); } }; const calculateTotal = () => dispensingCart.reduce((total, item) => total + (item.qty * item.price), 0); const handleDispenseAndSendToPOS = () => { if (!selectedPatient && !window.confirm("No patient selected. Proceed as Walk-in Sale?")) return; if (dispensingCart.length === 0) { alert("Cart is empty."); return; } const patientInfo = selectedPatient || { id: \'WALK-IN\', name: \'Walk-in Customer\' }; const saleData = { patient: patientInfo, items: dispensingCart, total: calculateTotal(), timestamp: new Date().toISOString(), type: \'Dispensed\' }; console.log("-> Sending to POS:", saleData); alert(`Dispensed for ${patientInfo.name}. Total: $${saleData.total.toFixed(2)}. (Simulated POS send)`); handleReset(); onClose(); }; const handleReset = () => { setPatientSearchTerm(\'\'); setSelectedPatient(null); setMedicineSearchTerm(\'\'); setDispensingCart([]); }; return ( <Modal isOpen={isOpen} onClose={onClose} title="Dispense / Walk-in Sale" maxWidth="4xl"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[70vh]"> <div className="lg:col-span-1 space-y-4 flex flex-col"> <Card className="flex-shrink-0"> <CardHeader><CardTitle className="text-base">1. Select Patient</CardTitle></CardHeader> <CardContent className="pt-2 space-y-2"> <div className="flex gap-2 items-center"> <Input placeholder="Search Name/ID or leave blank..." value={patientSearchTerm} onChange={(e) => setPatientSearchTerm(e.target.value)}/> <Button onClick={handlePatientSearch} size="sm" variant="outline">Find</Button> </div> {selectedPatient ? ( <div className="p-2 bg-green-100 rounded text-sm font-medium text-green-800">Selected: {selectedPatient.name}</div> ) : ( <div className="p-2 bg-yellow-100 rounded text-sm text-yellow-800">Default: Walk-in Sale</div> )} </CardContent> </Card> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">2. Add Medicines</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow flex flex-col"> <Input placeholder="Search Medicine Name..." value={medicineSearchTerm} onChange={(e) => setMedicineSearchTerm(e.target.value)} className="mb-2"/> <div className="mt-1 border rounded-md overflow-y-auto flex-grow bg-gray-50 min-h-[150px]"> {medicineSearchTerm && filteredInventory.length > 0 ? ( filteredInventory.map(item => ( <div key={item.id} className="p-2 hover:bg-blue-100 cursor-pointer flex justify-between items-center border-b" onClick={() => addToCart(item)}> <span className="text-sm">{item.name} <span className="text-xs text-gray-500">(Stock: {item.stock})</span></span> <span className="text-sm font-semibold">${item.price.toFixed(2)}</span> </div> )) ) : medicineSearchTerm ? ( <p className="text-sm text-red-500 p-4 text-center italic">No matching medicine found in stock.</p> ) : ( <p className="text-sm text-gray-400 p-4 text-center italic">Type above to search medicines...</p> )} </div> </CardContent> </Card> </div> <div className="lg:col-span-2 space-y-4 flex flex-col"> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">3. Review Cart</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow overflow-y-auto"> {dispensingCart.length > 0 ? ( <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="w-24 text-center">Qty</TableHead> <TableHead className="w-20 text-right">Price</TableHead> <TableHead className="w-24 text-right">Subtotal</TableHead> <TableHead className="w-10 text-center">Rem</TableHead> </TableRow> </TableHeader> <TableBody> {dispensingCart.map(item => ( <TableRow key={item.id}> <TableCell className="text-sm">{item.name}</TableCell> <TableCell> <Input type="number" min="1" max={item.stock} value={item.qty} onChange={(e) => updateQty(item.id, e.target.value)} className="h-8 w-16 text-center p-1"/> </TableCell> <TableCell className="text-right text-sm">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right text-sm font-medium">${(item.qty * item.price).toFixed(2)}</TableCell> <TableCell className="text-center"> <button onClick={() => updateQty(item.id, 0)} className="text-red-500 hover:text-red-700 p-1 font-bold" title="Remove">&times;</button> </TableCell> </TableRow> ))} </TableBody> </Table> ) : ( <p className="text-center text-gray-500 py-10 italic">Cart is currently empty. Add medicines from the left.</p> )} </CardContent> {dispensingCart.length > 0 && ( <CardFooter className="border-t pt-3 flex justify-end items-center"> <span className="text-sm font-semibold mr-2">Total Amount:</span> <span className="font-bold text-xl text-blue-700">${calculateTotal().toFixed(2)}</span> </CardFooter> )} </Card> <div className="flex justify-between gap-3 pt-4 border-t flex-shrink-0"> <Button variant="outline" onClick={handleReset}>Clear Cart</Button> <div className="flex gap-3"> <Button variant="secondary" onClick={onClose}>Cancel</Button> <Button onClick={handleDispenseAndSendToPOS} disabled={dispensingCart.length === 0}> <MonitorSmartphone className="mr-2 h-4 w-4" /> Dispense & Send to POS </Button> </div> </div> </div> </div> </Modal> ); }\r\n        function PharmacyAnalytics() { return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Analytics & Reports</h2> <p className="text-gray-500 text-sm">Performance insights.</p> </header> <Card> <CardHeader><CardTitle>Key Performance Indicators (KPIs)</CardTitle></CardHeader> <CardContent className="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Sales (Today)</p><p className="text-2xl font-bold text-blue-800">$1,234</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Orders (Today)</p><p className="text-2xl font-bold text-green-800">42</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Low Stock Items</p><p className="text-2xl font-bold text-yellow-900">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Low Stock\').length}</p></div> <div className="p-4 bg-red-50 rounded border border-red-200"><p className="text-xs uppercase text-red-600 font-medium">Out of Stock</p><p className="text-2xl font-bold text-red-800">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Out of Stock\').length}</p></div> </CardContent> </Card> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader><CardTitle>Monthly Sales Trend</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><BarChartComponent data={MOCK_SALES_DATA} /></ResponsiveContainer></CardContent> </Card> <Card> <CardHeader><CardTitle>Top Selling Categories</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><LineChart data={[{name:\'Pain\', v:40}, {name:\'ABX\', v:30}, {name:\'Vit\', v:25}]} /></ResponsiveContainer></CardContent> </Card> </div> <Card> <CardHeader><CardTitle>Generate Custom Reports</CardTitle></CardHeader> <CardContent className="pt-4 space-y-3"> <p className="text-sm text-gray-600">Select report type and date range to generate.</p> <div className="flex flex-wrap gap-4 items-end"> <div className="flex-grow min-w-[150px]"> <Label htmlFor="report-type">Report Type</Label> <Select id="report-type" className="mt-1"> <SelectItem value="daily_sales">Daily Sales Summary</SelectItem> <SelectItem value="monthly_sales">Monthly Sales Report</SelectItem> <SelectItem value="sales_tender">Sales by Tender Type</SelectItem> <SelectItem value="sales_user">Sales by User</SelectItem> <SelectItem value="stock_level">Current Stock Levels</SelectItem> <SelectItem value="stock_usage">Stock Usage Report</SelectItem> <SelectItem value="stock_expiry">Stock Expiry Report</SelectItem> <SelectItem value="debtors">Debtors List</SelectItem> <SelectItem value="inv_valuation">Inventory Valuation</SelectItem> </Select> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="start-date">Start Date</Label> <Input id="start-date" type="date" className="mt-1"/> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="end-date">End Date</Label> <Input id="end-date" type="date" className="mt-1"/> </div> <Button onClick={() => alert(\'Pholder: Generate selected report\')}><FileCheck className="mr-2 h-4 w-4"/> Generate Report</Button> </div> </CardContent> </Card> </div> ); }\r\n        function MedicalAidClaimsView({ orders }) { const validOrders = Array.isArray(orders) ? orders : []; const claimsData = validOrders.filter(o => o && o.medicalAidProvider).map(o => ({ id: `CLAIM-${o.id}`, orderId: o.id, patientName: o.patientName || \'N/A\', provider: o.medicalAidProvider, date: o.date || \'N/A\', amountClaimed: (typeof o.amountCovered === \'number\' ? o.amountCovered : 0), status: o.medicalAidStatus || \'N/A\', })); return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Medical Aid Claims Management</h2> <p className="text-gray-500 text-sm">Track and manage medical aid claims.</p> </header> <Card> <CardHeader><CardTitle>Claim Status Overview</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Claim ID</TableHead><TableHead>Order ID</TableHead><TableHead>Patient</TableHead> <TableHead>Provider</TableHead><TableHead>Date</TableHead> <TableHead className="text-right">Claimed Amt</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {claimsData.length > 0 ? ( claimsData.map(claim => ( <TableRow key={claim.id}> <TableCell className="font-mono text-xs">{claim.id}</TableCell><TableCell className="font-mono text-xs">{claim.orderId}</TableCell> <TableCell>{claim.patientName}</TableCell><TableCell>{claim.provider}</TableCell> <TableCell className="text-xs">{claim.date}</TableCell><TableCell className="text-right font-medium">${claim.amountClaimed.toFixed(2)}</TableCell> <TableCell><Badge variant={getClaimStatusVariant(claim.status)}>{claim.status}</Badge></TableCell> <TableCell className="space-x-1 whitespace-nowrap"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Claim Details ${claim.id}`)}>Details</Button> {claim.status === \'Received\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Submit Claim ${claim.id}`)}>Submit</Button>} {claim.status === \'Pending Patient Auth\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Request Auth ${claim.id}`)} disabled>Req. Auth</Button>} {claim.status === \'Claim Rejected\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Resubmit Claim ${claim.id}`)}>Resubmit</Button>} {claim.status === \'Claim Submitted\' && <Badge variant="info" className="ml-2">Submitted</Badge>} {claim.status === \'Paid\' && <Badge variant="success" className="ml-2">Paid</Badge>} </TableCell> </TableRow> )) ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No medical aid claims found.</TableCell></TableRow> )} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <p className="text-sm text-gray-500">Showing {claimsData.length} claims.</p> </CardFooter> </Card> <Card> <CardHeader><CardTitle>Claims Summary & Analytics</CardTitle></CardHeader> <CardContent className="pt-4 text-center italic text-gray-400"> Placeholder: Charts visualizing claims status (Pending, Submitted, Paid, Rejected), claim amounts by provider, aging analysis, etc. </CardContent> </Card> </div> ); }\r\n        function MarketWatchView() { const data = MOCK_MARKET_WATCH_DATA; const adverts = MOCK_ADVERTS; const getTrendIcon = (trendString) => { if (!trendString) return null; if (trendString.includes(\'+\') || trendString.toLowerCase().includes(\'high\') || trendString.toLowerCase().includes(\'increase\')) return <TrendingUp className="h-4 w-4 text-green-600 inline ml-1" />; if (trendString.includes(\'-\') || trendString.toLowerCase().includes(\'low\') || trendString.toLowerCase().includes(\'decrease\')) return <TrendingDown className="h-4 w-4 text-red-600 inline ml-1" />; return null; }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <div> <h2 className="text-xl font-semibold">Market Watch Insights</h2> <p className="text-gray-500 text-sm">AI-powered intelligence on market trends, demand, and stock levels.</p> </div> </header> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <Card className="lg:col-span-3 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-blue-200"> <CardHeader> <CardTitle className="flex items-center text-blue-800"><Cpu className="mr-2 h-5 w-5" /> AI-Driven Insights</CardTitle> <CardDescription>Real-time analysis and actionable recommendations.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-3"> {data.aiInsights.map((insight, index) => ( <div key={index} className="text-sm p-3 bg-white/70 rounded border border-blue-100 shadow-sm flex items-start gap-2"> <Info className="h-4 w-4 text-blue-600 mt-0.5 shrink-0"/> <div> <p className=" text-gray-800">{insight}</p> <p className="text-xs text-blue-600 mt-1 italic">Source: ehutano+ AI Engine</p> </div> </div> ))} </CardContent> </Card> <Card className="lg:col-span-2"> <CardHeader> <CardTitle className="flex items-center"><Activity className="mr-2 h-5 w-5 text-orange-600" /> Product Trends & Demand Signals</CardTitle> <CardDescription>Monitor fast-moving items, high demand, and pricing changes.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-4"> <div> <h4 className="font-semibold mb-2 flex items-center"><TrendingUp className="mr-2 h-4 w-4 text-green-600"/> Fast Moving Items</h4> {data.fastMoving.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="trendUp">{item.trend} {getTrendIcon(item.trend)}</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><Users className="mr-2 h-4 w-4 text-red-600"/> High Demand Indicators</h4> {data.highDemand.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.reason}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="warning">High Demand</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><DollarSign className="mr-2 h-4 w-4 text-indigo-600" /> Price Change Alerts</h4> {data.priceAlerts.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.note}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant={item.change.startsWith(\'+\') ? \'trendDown\' : \'trendUp\'}>{item.change} {getTrendIcon(item.change)}</Badge> </div> ))} </div> </CardContent> </Card> <Card className="lg:col-span-1 flex flex-col space-y-4"> <div> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackageX className="mr-2 h-5 w-5 text-red-600" /> Stock Alerts</CardTitle> <CardDescription>Out-of-stock & low stock items.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 max-h-48 overflow-y-auto"> {data.stockOuts.map(item => ( <div key={item.id} className={`text-sm p-2 rounded border ${getStatusBadgeVariant(item.status)===\'destructive\' ? \'bg-red-50 border-red-200\' : \'bg-yellow-50 border-yellow-200\'}`}> <p className="font-medium">{item.name} <Badge variant={getStatusBadgeVariant(item.status)}>{item.status}</Badge></p> <p className="text-xs">Supplier: {item.supplier} | {item.note}</p> <p className="text-xs italic text-gray-500">Source: {item.source}</p> </div> ))} </CardContent> </div> <div className="border-t flex-grow flex flex-col"> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackagePlus className="mr-2 h-5 w-5 text-cyan-600" /> New Market Arrivals</CardTitle> <CardDescription>Newly registered or imported.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 flex-grow overflow-y-auto"> <h5 className="text-xs font-semibold uppercase text-gray-500">Newly Registered (via MCAZ)</h5> {data.newlyRegistered.map(item => ( <div key={item.id} className="text-sm p-2 border-b"><p>{item.name}</p><p className="text-xs">Supplier: {item.supplier} (Registered: {item.date})</p></div> ))} <h5 className="text-xs font-semibold uppercase text-gray-500 pt-2 mt-2">Recently Imported</h5> {data.recentlyImported.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0"><p>{item.name}</p><p className="text-xs">Source: {item.source} | Arrived: {item.arrival}</p><p className="text-xs">Distributor: {item.distributor}</p></div> ))} </CardContent> </div> </Card> <Card className="lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center"><Megaphone className="mr-2 h-5 w-5 text-purple-600" /> Industry Adverts (MCAZ Approved)</CardTitle> <CardDescription>Approved promotions & announcements.</CardDescription> </CardHeader> <CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {adverts.map(ad => ( <a key={ad.id} href={ad.link} target="_blank" rel="noopener noreferrer" className="block group border rounded overflow-hidden hover:shadow-md bg-white transition-shadow"> <img src={ad.imageUrl} alt={ad.title} className="w-full h-24 object-cover"/> <div className="p-3"> <p className="text-sm font-medium mb-1 group-hover:text-blue-600">{ad.title}</p> <p className="text-xs text-gray-500">{ad.type}</p> <p className="text-xs text-gray-400 mt-2">Ref: {ad.approvedBy}</p> </div> </a> ))} </CardContent> </Card> </div> </div> ); }\r\n\r\n        // --- Doctor Portal ---\r\n        function DoctorPortal({ setActiveView }) { const [activeSubView, setActiveSubView] = useState(\'dashboard\'); const mockPatients = [ { id: \'PAT101\', name: \'Tendai Moyo\', lastVisit: \'2025-03-20\', condition: \'Hypertension\' }, { id: \'PAT102\', name: \'Alice Banda\', lastVisit: \'2025-04-10\', condition: \'Diabetes Type 2\' }, { id: \'PAT103\', name: \'John Doe\', lastVisit: \'2025-04-22\', condition: \'Check-up\' }, ]; const mockAppointments = [ { id: \'APP001\', time: \'09:00\', patientName: \'Jane Smith\', reason: \'Follow-up\' }, { id: \'APP002\', time: \'09:30\', patientName: \'Peter Jones\', reason: \'New Consult\' }, { id: \'APP003\', time: \'10:00\', patientName: \'Tendai Moyo\', reason: \'BP Check\' }, ]; const renderContent = () => { switch (activeSubView) { case \'patients\': return ( <Card> <CardHeader><CardTitle>Patient Records</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Patients..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Patient ID</TableHead><TableHead>Name</TableHead><TableHead>Last Visit</TableHead><TableHead>Primary Condition</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockPatients.map(p => ( <TableRow key={p.id}> <TableCell className="font-mono text-xs">{p.id}</TableCell><TableCell>{p.name}</TableCell><TableCell>{p.lastVisit}</TableCell><TableCell>{p.condition}</TableCell> <TableCell><Button variant="link" size="sm" onClick={() => alert(`Pholder: View Patient Record ${p.name}`)}>View Record</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'prescriptions\': return ( <Card> <CardHeader><CardTitle>Electronic Prescriptions (E-Rx)</CardTitle></CardHeader> <CardContent className="pt-4 space-y-4"> <Button onClick={() => alert(\'Pholder: Open New E-Rx Form Modal\')}> <PlusCircle className="mr-2 h-4 w-4"/> Create New Prescription </Button> <div><h4 className="font-medium mb-2">Recently Issued Prescriptions</h4><p className="text-sm text-gray-500">Placeholder: List of recent Rxs with status (Sent, Filled, Pending).</p></div> <img src="https://placehold.co/600x150/e0f2f7/0891b2?text=E-Rx+List+Mockup" alt="E-Rx List Placeholder" className="mt-4 rounded border"/> </CardContent> </Card> ); case \'appointments\': return ( <Card> <CardHeader><CardTitle>Today\'s Schedule</CardTitle></CardHeader> <CardContent className="pt-4"> <Table> <TableHeader><TableRow><TableHead>Time</TableHead><TableHead>Patient</TableHead><TableHead>Reason for Visit</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockAppointments.map(a => ( <TableRow key={a.id}> <TableCell>{a.time}</TableCell><TableCell>{a.patientName}</TableCell><TableCell>{a.reason}</TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Start Consultation ${a.patientName}`)}>Start Consult</Button> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Add Notes/Record ${a.patientName}`)}>Add Record</Button> </TableCell> </TableRow> ))} </TableBody> </Table> <Button variant="outline" size="sm" className="mt-4" onClick={() => alert(\'Pholder: Open Full Calendar View\')}>View Full Calendar</Button> </CardContent> </Card> ); case \'dashboard\': default: return ( <Card> <CardHeader><CardTitle>Doctor Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-blue-50" onClick={() => setActiveSubView(\'appointments\')}> <CalendarDays className="h-6 w-6 mb-1 text-blue-600"/> <span className="font-medium">Today\'s Appointments</span> <span className="text-sm text-gray-600">({mockAppointments.length} scheduled)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-green-50" onClick={() => setActiveSubView(\'prescriptions\')}> <FileText className="h-6 w-6 mb-1 text-green-600"/> <span className="font-medium">E-Prescriptions</span> <span className="text-sm text-gray-600">(Create & Manage)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-purple-50" onClick={() => setActiveSubView(\'patients\')}> <Users className="h-6 w-6 mb-1 text-purple-600"/> <span className="font-medium">Patient Records</span> <span className="text-sm text-gray-600">(View & Search)</span> </Button> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2 flex items-center"><Bell className="mr-2 h-4 w-4"/> Notifications & Tasks</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Lab result received for Alice B.</li> <li>Placeholder: Refill request from Tendai M.</li> <li>Placeholder: Message from Pharmacy re: Rx124</li> </ul> <Button variant="link" size="sm" className="mt-2">View All Notifications</Button> </div> </CardContent> </Card> ); } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl md:text-3xl font-bold">Doctor Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage patients, electronic prescriptions, and appointments efficiently.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={activeSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'dashboard\')} data-state={activeSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4"/>Dashboard</Button> <Button variant={activeSubView === \'appointments\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'appointments\')} data-state={activeSubView === \'appointments\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CalendarDays className="mr-2 h-4 w-4"/>Appointments</Button> <Button variant={activeSubView === \'patients\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'patients\')} data-state={activeSubView === \'patients\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Users className="mr-2 h-4 w-4"/>Patients</Button> <Button variant={activeSubView === \'prescriptions\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'prescriptions\')} data-state={activeSubView === \'prescriptions\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4"/>E-Rx</Button> </nav> <div className="pt-6"> {renderContent()} </div> </div> ); }\r\n\r\n        // --- Wholesaler Portal ---\r\n        function WholesalerPortal({ setActiveView }) { const [wholesalerSubView, setWholesalerSubView] = useState(\'dashboard\'); const mockWholesalerCatalog = MOCK_PHARMACY_INVENTORY.filter(i => i.wholesaleSource?.startsWith(\'MediSupply\') || i.wholesaleSource?.startsWith(\'PharmaDistro\')); const mockWholesalerOrders = [ { id: \'W-ORD-001\', pharmacyName: \'Bonvie Pharmacy\', date: \'2025-04-24\', total: 450.00, status: \'Shipped\' }, { id: \'W-ORD-002\', pharmacyName: \'City Pharmacy\', date: \'2025-04-25\', total: 1200.50, status: \'Processing\' }, { id: \'W-ORD-003\', pharmacyName: \'Pulse Pharmacy\', date: \'2025-04-25\', total: 320.00, status: \'Pending Confirmation\' }, ]; const renderWholesalerContent = () => { switch (wholesalerSubView) { case \'dashboard\': return ( <Card> <CardHeader><CardTitle>Wholesaler Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Pending Orders</p><p className="text-2xl font-bold text-blue-800">{mockWholesalerOrders.filter(o => o.status.includes(\'Pending\') || o.status === \'Processing\').length}</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Active Catalog Items</p><p className="text-2xl font-bold text-green-800">{mockWholesalerCatalog.filter(i => i.stock > 0).length}</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Items Nearing Low Stock</p><p className="text-2xl font-bold text-yellow-900">5</p></div> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2">Recent Activity</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Order W-ORD-001 shipped to Bonvie Pharmacy.</li> <li>Placeholder: New order W-ORD-003 received from Pulse Pharmacy.</li> <li>Placeholder: Stock updated for Paracetamol 500mg.</li> </ul> <Button variant="link" size="sm" className="mt-2" onClick={() => setWholesalerSubView(\'orders\')}>View All Orders</Button> </div> </CardContent> </Card> ); case \'catalog\': return ( <Card> <CardHeader className="flex flex-row justify-between items-center"> <div><CardTitle>Product Catalog Management</CardTitle></div> <Button onClick={() => alert(\'Pholder: Open Add New Product Modal\')} size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Add New Product</Button> </CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Catalog (Name, ID, Category)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Product ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Wholesale Price</TableHead><TableHead className="text-right">Available Stock</TableHead><TableHead>Stock Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerCatalog.map(item => ( <TableRow key={item.id}> <TableCell className="font-mono text-xs">{item.id}</TableCell><TableCell>{item.name}</TableCell><TableCell>{item.category}</TableCell> <TableCell className="text-right">${(item.price * 0.8).toFixed(2)}</TableCell> <TableCell className="text-right">{item.stock * 10}</TableCell> <TableCell><Badge variant={item.stock > 0 ? \'success\' : \'destructive\'}>{item.stock > 0 ? \'In Stock\' : \'Out Of Stock\'}</Badge></TableCell> <TableCell><Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Edit Product ${item.id}`)}>Edit</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'orders\': return ( <Card> <CardHeader><CardTitle>Incoming Pharmacy Orders</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Orders (ID, Pharmacy Name)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Pharmacy Customer</TableHead><TableHead>Order Date</TableHead><TableHead className="text-right">Order Total</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerOrders.map(order => ( <TableRow key={order.id} className={order.status.includes(\'Pending\') ? \'bg-yellow-50/70\' : \'\'}> <TableCell className="font-mono text-xs">{order.id}</TableCell><TableCell>{order.pharmacyName}</TableCell><TableCell className="text-xs">{order.date}</TableCell> <TableCell className="text-right font-medium">${order.total.toFixed(2)}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Order Details ${order.id}`)}>Details</Button> {order.status === \'Pending Confirmation\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Confirm Order ${order.id}`)}>Confirm</Button>} {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Mark as Shipped ${order.id}`)}>Mark Shipped</Button>} {order.status === \'Shipped\' && <Badge variant="info" className="ml-2">Shipped</Badge>} </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'marketWatch\': return <MarketWatchView />; default: return <div className="text-center p-8 text-gray-500">Select a section.</div>; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Wholesaler Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage your product catalog, process pharmacy orders, and view market insights.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={wholesalerSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'dashboard\')} data-state={wholesalerSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4" /> Dashboard</Button> <Button variant={wholesalerSubView === \'catalog\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'catalog\')} data-state={wholesalerSubView === \'catalog\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BookOpen className="mr-2 h-4 w-4" /> Catalog</Button> <Button variant={wholesalerSubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'orders\')} data-state={wholesalerSubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button> <Button variant={wholesalerSubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'marketWatch\')} data-state={wholesalerSubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button> </nav> <div className="pt-6"> {renderWholesalerContent()} </div> </div> ); }\r\n\r\n        // --- Community Wellness Hub ---\r\n        function CommunityWellnessHub({setActiveView}) { const [activeTab, setActiveTab] = useState(\'activities\'); const [activities, setActivities] = useState(MOCK_WELLNESS_ACTIVITIES); const [selectedDay, setSelectedDay] = useState(\'Monday\'); const [blogCategory, setBlogCategory] = useState(\'All\'); const handleBooking = (activityId) => { setActivities(prevActivities => prevActivities.map(act => { if (act.id === activityId && act.slots > 0 && !act.booked) { alert(`Successfully booked ${act.name}!`); return { ...act, slots: act.slots - 1, booked: true }; } else if (act.id === activityId && act.booked) { alert(`You have already booked ${act.name}.`); return act; } else if (act.id === activityId && act.slots === 0) { alert(`Sorry, ${act.name} is currently full.`); return act; } return act; }) ); }; const filteredActivities = activities.filter(act => act.day === selectedDay); const daysOfWeek = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'].filter(day => MOCK_WELLNESS_ACTIVITIES.some(a => a.day === day)); const blogCategories = [\'All\', ...new Set(MOCK_BLOG_POSTS.map(p => p.category))]; const filteredBlogPosts = blogCategory === \'All\' ? MOCK_BLOG_POSTS : MOCK_BLOG_POSTS.filter(p => p.category === blogCategory); const renderTabContent = () => { switch (activeTab) { case \'activities\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Community Activities & Event Schedule</h2> <p className="text-sm text-gray-600">Book sports sessions, fitness classes, support groups, and other wellness events.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">View Schedule For:</span> {daysOfWeek.map(day => ( <Button key={day} variant={selectedDay === day ? \'default\' : \'outline\'} size="sm" onClick={() => setSelectedDay(day)}> {day} </Button> ))} </div> <Card> <CardHeader> <CardTitle>Available Activities for {selectedDay}</CardTitle> </CardHeader> <CardContent className="pt-4 space-y-4"> {filteredActivities.length > 0 ? ( filteredActivities.map(act => ( <div key={act.id} className={`flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border rounded-lg gap-4 ${act.booked ? \'bg-green-50 border-green-200\' : act.slots === 0 ? \'bg-red-50 border-red-200 opacity-70\' : \'bg-white hover:bg-gray-50\'}`}> <div className="flex items-center gap-3 flex-grow"> <span className="text-3xl">{act.icon}</span> <div> <p className="font-semibold">{act.name}</p> <p className="text-sm text-gray-600">{act.time} @ {act.location}</p> <p className="text-xs mt-1"> {act.slots > 0 ? <span className="text-green-700">{`${act.slots} slots available`}</span> : <span className="font-medium text-red-600">Fully Booked</span>} </p> </div> </div> <Button size="sm" onClick={() => handleBooking(act.id)} disabled={act.slots === 0 || act.booked} className={`mt-2 sm:mt-0 flex-shrink-0 ${act.booked ? \'bg-green-600 hover:bg-green-700 cursor-default\' : act.slots === 0 ? \'bg-gray-400 cursor-not-allowed\' : \'bg-blue-600 hover:bg-blue-700\'}`}> {act.booked ? (<><CheckCircle className="mr-1 h-4 w-4"/> You\'re Booked</>) : (act.slots > 0 ? \'Book Your Slot\' : \'Full\')} </Button> </div> )) ) : ( <p className="text-center py-6 text-gray-500 italic">No activities scheduled for {selectedDay}.</p> )} </CardContent> </Card> </div> ); case \'blog\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Wellness Blog & Articles</h2> <p className="text-sm text-gray-600">Read the latest health tips, lifestyle advice, and expert insights.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">Filter by Category:</span> {blogCategories.map(cat => ( <Button key={cat} variant={blogCategory === cat ? \'default\' : \'outline\'} size="sm" onClick={() => setBlogCategory(cat)}> {cat} </Button> ))} </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredBlogPosts.map(post => ( <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-200"> <img src={post.imageUrl} alt={post.title} className="h-40 w-full object-cover"/> <CardHeader> <Badge variant="secondary" className="w-fit mb-2">{post.category}</Badge> <CardTitle className="text-lg">{post.title}</CardTitle> <CardDescription>By {post.author} - {post.date}</CardDescription> </CardHeader> <CardContent className="pt-2 flex-grow"> <p className="text-sm text-gray-700">{post.snippet}</p> </CardContent> <CardFooter className="pt-2 border-t"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Navigate to full blog post ${post.id}`)}>Read Full Article</Button> </CardFooter> </Card> ))} {filteredBlogPosts.length === 0 && ( <p className="md:col-span-2 lg:col-span-3 text-center py-10 text-gray-500 italic">No blog posts found in the "{blogCategory}" category.</p> )} </div> </div> ); case \'resources\': return ( <div className="space-y-8"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Health Resources & Interactive Tools</h2> <p className="text-sm text-gray-600">Access guides, calculators, and information on various health topics.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-gradient-to-br from-orange-50 to-amber-100 border border-orange-200"> <CardHeader> <CardTitle className="flex items-center text-orange-800"><Utensils className="mr-2 h-5 w-5"/> Diabetes Management</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-orange-700">Resources for managing diabetes effectively.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Downloadable Meal Plans</li> <li>Video Guide: Using Your Meter</li> <li>Article: Importance of Foot Care</li> <li>Find Local Support Groups</li> </ul> <Button size="sm" className="bg-orange-500 hover:bg-orange-600 text-white" onClick={() => alert(\'Pholder: Navigate to Diabetes Resource Page\')}>Explore Diabetes Section</Button> </CardContent> </Card> <Card className="bg-gradient-to-br from-red-50 to-rose-100 border border-red-200"> <CardHeader> <CardTitle className="flex items-center text-red-800"><Heart className="mr-2 h-5 w-5"/> Hypertension Control</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-red-700">Tips for managing high blood pressure.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Low Sodium Recipe Book (PDF)</li> <li>Audio Guide: Stress Reduction Techniques</li> <li>Interactive Blood Pressure Log Tool</li> <li>Understanding Your Readings</li> </ul> <Button size="sm" className="bg-red-500 hover:bg-red-600 text-white" onClick={() => alert(\'Pholder: Navigate to Hypertension Page\')}>View BP Management Tips</Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Scale className="mr-2 h-5 w-5"/> BMI Calculator</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Calculate your Body Mass Index.</p> <div className="flex gap-2 mt-2"> <div className="flex-1"><Label htmlFor="height-input">Height (cm)</Label><Input id="height-input" placeholder="e.g., 175" type="number"/></div> <div className="flex-1"><Label htmlFor="weight-input">Weight (kg)</Label><Input id="weight-input" placeholder="e.g., 70" type="number"/></div> </div> <Button size="sm" className="mt-3" onClick={() => alert(\'Pholder: Calculate BMI based on inputs\')}>Calculate BMI</Button> <p className="text-sm mt-3">Your BMI: <span className="font-semibold">[Result Placeholder]</span></p> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Brain className="mr-2 h-5 w-5"/> Mental Wellness Corner</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Resources for mental health and well-being.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Guided Mindfulness Exercises (Audio)</li> <li>Recognizing Signs of Burnout</li> <li>Directory of Local Mental Health Professionals</li> <li>Tips for Improving Sleep Quality</li> </ul> <Button size="sm" variant="link" onClick={() => alert(\'Pholder: Navigate to Mental Wellness Page\')}>Explore Mental Wellness</Button> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-3 text-gray-700">Quick Health Links</h4> <div className="grid grid-cols-1 sm:grid-cols-3 gap-3"> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Ministry of Health & Child Care (MoHCC)</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Common Colds & Flu Information</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Basic First Aid Guide</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">National Vaccination Schedules</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Find a Clinic Near You</a> </div> </div> </div> ); case \'antibiotic\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold flex items-center text-blue-800"><Pill className="mr-2 h-5 w-5"/> Antibiotic Stewardship: Be Antibiotic Wise</h2> <p className="text-sm text-gray-600">Learn about the responsible use of antibiotics to combat resistance.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-blue-50 border border-blue-200"> <CardHeader><CardTitle>Why is Responsible Use Important?</CardTitle></CardHeader> <CardContent className="pt-2 text-sm text-blue-800"><p>Antibiotic resistance is a major global health threat. When bacteria become resistant, antibiotics may not work when needed most. Using antibiotics only when necessary and as prescribed helps preserve their effectiveness for everyone.</p></CardContent> </Card> <Card> <CardHeader><CardTitle>Key Principles of Antibiotic Use</CardTitle></CardHeader> <CardContent className="pt-2"> <ul className="list-disc list-inside text-sm space-y-2 text-gray-700"> <li><strong>Viruses vs. Bacteria:</strong> Antibiotics ONLY treat bacterial infections, not viruses like colds or flu.</li> <li><strong>Complete the Full Course:</strong> Always finish your prescribed antibiotics, even if you start feeling better. Stopping early can allow resistant bacteria to survive.</li> <li><strong>Do Not Share:</strong> Never use antibiotics prescribed for someone else or share yours.</li> <li><strong>Trust Your Doctor:</strong> Don\'t pressure your doctor for antibiotics if they say you don\'t need them.</li> <li><strong>Prevent Infections:</strong> Practice good hygiene (like handwashing) and stay up-to-date on vaccinations to prevent infections in the first place.</li> </ul> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6 bg-yellow-50 p-4 rounded border border-yellow-200"> <h4 className="font-semibold mb-2 text-yellow-800 flex items-center"><AlertTriangle className="mr-2 h-4 w-4"/> Patient Advisory</h4> <p className="text-sm text-yellow-900">Always consult your doctor or pharmacist before taking any medication, including antibiotics. Ensure you understand the instructions and potential side effects. Report any adverse reactions immediately.</p> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-2">Further Information</h4> <div className="space-y-1"> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">World Health Organization (WHO) - Antimicrobial Resistance</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Africa CDC - Antimicrobial Resistance Programme</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Local Resources on Antibiotic Use (Placeholder Link)</a> </div> </div> </div> ); default: return null; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Community Wellness Hub</h1> <p className="text-sm mt-1 text-gray-600">Explore activities, health information, and resources for a healthier you.</p> </header> <div className="border-b border-gray-200"> <nav className="-mb-px flex space-x-4 overflow-x-auto"> <button onClick={() => setActiveTab(\'activities\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'activities\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'activities\' ? \'active\' : \'\'}> <CalendarDays className="inline mr-1 h-4 w-4" /> Activities & Events </button> <button onClick={() => setActiveTab(\'blog\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'blog\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'blog\' ? \'active\' : \'\'}> <BookOpen className="inline mr-1 h-4 w-4" /> Wellness Blog </button> <button onClick={() => setActiveTab(\'resources\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'resources\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'resources\' ? \'active\' : \'\'}> <Settings className="inline mr-1 h-4 w-4" /> Health Resources & Tools </button> <button onClick={() => setActiveTab(\'antibiotic\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'antibiotic\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'antibiotic\' ? \'active\' : \'\'}> <Pill className="inline mr-1 h-4 w-4" /> Be Antibiotic Wise </button> </nav> </div> <div className="mt-6"> {renderTabContent()} </div> </div> ); }\r\n\r\n        // --- Main App Component ---\r\n        function App() {\r\n            console.log("App Component: Initial Render");\r\n            const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n            const [userRole, setUserRole] = useState(null);\r\n            const [userName, setUserName] = useState(\'\');\r\n            const [userData, setUserData] = useState(null);\r\n            const [activeView, setActiveView] = useState(\'landing\');\r\n            const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n            const [verificationData, setVerificationData] = useState(null);\r\n\r\n            const openVerificationModal = (data) => { setVerificationData(data); setIsVerificationModalOpen(true); };\r\n            const closeVerificationModal = () => setIsVerificationModalOpen(false);\r\n\r\n            const handleLogin = (role) => {\r\n                console.log(`App Component: handleLogin called with role: ${role}`);\r\n                let defaultView = \'landing\'; let currentUserName = \'\'; let currentUserData = null; let authStatus = false;\r\n                switch (role) {\r\n                    case \'patient\': defaultView = \'patientPortal\'; currentUserName = MOCK_PATIENT_DATA.name; currentUserData = MOCK_PATIENT_DATA; authStatus = true; break;\r\n                    case \'pharmacy\': defaultView = \'pharmacyPortal\'; currentUserName = \'City Pharmacy Staff\'; currentUserData = { id: \'PHARM001\', name: \'City Pharmacy\'}; authStatus = true; break;\r\n                    case \'doctor\': defaultView = \'doctorPortal\'; currentUserName = \'Dr. Musasa\'; currentUserData = { id: \'DOC001\' }; authStatus = true; break;\r\n                    case \'wholesaler\': defaultView = \'wholesalerPortal\'; currentUserName = \'MediSupply Inc.\'; currentUserData = { id: \'WH001\' }; authStatus = true; break;\r\n                    default: console.warn(`App Component: Unknown role "${role}" passed to handleLogin. Staying on landing page.`); role = null; defaultView = \'landing\'; authStatus = false; break;\r\n                }\r\n                setIsAuthenticated(authStatus); setUserRole(role); setActiveView(defaultView); setUserName(currentUserName); setUserData(currentUserData); console.log(`App Component: Login state updated. Auth=${authStatus}, Role=${role}, View=${defaultView}`);\r\n            };\r\n\r\n            const handleLogout = () => { console.log("App Component: handleLogout called."); setIsAuthenticated(false); setUserRole(null); setUserName(\'\'); setUserData(null); setActiveView(\'landing\'); console.log("App Component: Logout state updated. Redirecting to landing."); };\r\n\r\n            const navigateTo = (view) => {\r\n                console.log(`App Component: navigateTo called for view: ${view}. Current auth: ${isAuthenticated}, role: ${userRole}`);\r\n                const publicViews = [\'landing\', \'wellness\']; const semiPublicViews = [\'medicineSearch\']; const allowedViews = { patient: [\'patientPortal\', \'wellness\', \'medicineSearch\', \'prescriptionUpload\', \'quotedRx\'], pharmacy: [\'pharmacyPortal\', \'wellness\'], doctor: [\'doctorPortal\', \'wellness\'], wholesaler: [\'wholesalerPortal\', \'wellness\'], };\r\n                if (publicViews.includes(view)) { console.log(` -> Navigating to public view: ${view}`); setActiveView(view); return; }\r\n                if (semiPublicViews.includes(view) && !isAuthenticated) { console.log(` -> Navigating to semi-public view (unauthenticated): ${view}`); setActiveView(view); return; }\r\n                if (!isAuthenticated) { console.log(` -> Navigation to "${view}" denied (not authenticated). Redirecting to landing.`); setActiveView(\'landing\'); return; }\r\n                if (allowedViews[userRole]?.includes(view)) { console.log(` -> Navigation allowed for role "${userRole}" to view "${view}".`); setActiveView(view); }\r\n                else if (view === \'wellness\') { console.log(` -> Navigation allowed for authenticated user ("${userRole}") to wellness.`); setActiveView(view); }\r\n                else { console.warn(` -> Access denied for role "${userRole}" attempting to navigate to view "${view}". Redirecting to user\'s default portal.`); const defaultPortal = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(allowedViews[userRole]?.includes(defaultPortal) ? defaultPortal : \'landing\'); alert(`Access Denied: You do not have permission to view \'${view}\'. Redirecting to your dashboard.`); }\r\n            };\r\n\r\n            const renderMainContent = () => {\r\n                console.log(`App Component: renderMainContent triggered. Active View: ${activeView}, Role: ${userRole}, Auth: ${isAuthenticated}`);\r\n                if (!isAuthenticated) { switch (activeView) { case \'wellness\': return <CommunityWellnessHub setActiveView={navigateTo}/>; case \'medicineSearch\': return <MedicineSearchListing navigateTo={navigateTo} />; case \'landing\': default: console.log(" -> Rendering LandingPage (unauthenticated)."); return <LandingPage setActiveView={navigateTo} login={handleLogin} navigateTo={navigateTo}/>; } }\r\n\r\n                console.log(` -> Rendering authenticated content for view: ${activeView}`);\r\n                try {\r\n                    const renderPortal = (PortalComponent, requiredRole, props = {}) => { if (userRole === requiredRole) { console.log(` -> Rendering ${requiredRole} portal.`); return <PortalComponent setActiveView={navigateTo} openVerificationModal={openVerificationModal} patientData={userData} {...props} />; } else { console.warn(`Role mismatch: Trying to render ${requiredRole} portal for user role ${userRole}. Rendering Access Denied.`); return renderAccessDenied(); } };\r\n\r\n                    switch (activeView) {\r\n                        case \'patientPortal\': return renderPortal(PatientPortal, \'patient\', { navigateTo });\r\n                        case \'pharmacyPortal\': return renderPortal(PharmacyPortal, \'pharmacy\');\r\n                        case \'doctorPortal\': return renderPortal(DoctorPortal, \'doctor\');\r\n                        case \'wholesalerPortal\': return renderPortal(WholesalerPortal, \'wholesaler\');\r\n                        case \'wellness\': console.log(" -> Rendering CommunityWellnessHub (authenticated)."); return <CommunityWellnessHub setActiveView={navigateTo}/>;\r\n                        case \'medicineSearch\': if (userRole === \'patient\') return <MedicineSearchListing navigateTo={navigateTo} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'prescriptionUpload\': if (userRole === \'patient\') return <PrescriptionUpload navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'quotedRx\': if (userRole === \'patient\') { const quote = userData?.prescriptions?.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quote?.quote} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; } else return renderAccessDenied();\r\n                        default: console.warn(` -> Unhandled authenticated view route: "${activeView}". Resetting to user\'s default portal.`); const defaultPortalView = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(defaultPortalView); return null;\r\n                    }\r\n                } catch (error) {\r\n                     console.error(`CRITICAL ERROR rendering authenticated view "${activeView}" for role "${userRole}":`, error);\r\n                     return ( <div className="text-center p-8 text-red-600 bg-red-50 border border-red-200 rounded-md"><h2 className="text-xl font-semibold mb-2">Oops! Something went wrong.</h2><p>We encountered an error while loading this part of the application.</p><p className="mt-2">Please try refreshing the page. If the problem persists, contact support.</p><p className="mt-4 text-xs text-red-500"><i>Error details (for support): {error.message}</i></p><p className="text-xs text-red-500"><i>(Check browser console (F12) for more info)</i></p><pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || \'No stack trace available.\'}</pre></div> );\r\n                }\r\n            };\r\n\r\n            const renderAccessDenied = () => ( <div className="text-center py-10 px-4"> <Card className="max-w-md mx-auto bg-red-50 border-red-200"> <CardHeader> <CardTitle className="text-red-700 flex items-center justify-center"><AlertTriangle className="h-6 w-6 mr-2"/> Access Denied</CardTitle> </CardHeader> <CardContent className="pt-4 text-red-800"> <p>You do not have permission to access this page (\'{activeView}\') with your current role (\'{userRole || \'None\'}\').</p> <Button onClick={() => navigateTo(userRole ? `${userRole}Portal` : \'landing\')} className="mt-6 bg-red-600 hover:bg-red-700 text-white">Go to My Dashboard / Home</Button> </CardContent> </Card> </div> );\r\n\r\n            const renderNavigation = () => {\r\n                console.log(`App Component: renderNavigation. Auth=${isAuthenticated}, Role=${userRole}, View=${activeView}`);\r\n                if (!isAuthenticated) { return ( <div className="flex items-center space-x-2 sm:space-x-4"> <Button variant="ghost" onClick={() => navigateTo(\'medicineSearch\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Search className="mr-1 h-4 w-4" /> Search Meds </Button> <Button variant="ghost" onClick={() => navigateTo(\'wellness\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Activity className="mr-1 h-4 w-4" /> Wellness </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Show Login Options/Modal\')} size="sm"> <LogIn className="mr-1 h-4 w-4" /> Login </Button> <Button onClick={() => alert(\'Pholder: Show Registration Options/Modal\')} size="sm"> Register </Button> </div> ); }\r\n                else {\r\n                     const portalButtons = { patient: <Button variant={activeView === \'patientPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'patientPortal\')} size="sm" data-state={activeView === \'patientPortal\' ? \'active\' : \'\'}><Home className="mr-1 h-4 w-4" /> Dashboard</Button>, pharmacy: <Button variant={activeView === \'pharmacyPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'pharmacyPortal\')} size="sm" data-state={activeView === \'pharmacyPortal\' ? \'active\' : \'\'}><Building className="mr-1 h-4 w-4" /> Pharmacy Portal</Button>, doctor: <Button variant={activeView === \'doctorPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'doctorPortal\')} size="sm" data-state={activeView === \'doctorPortal\' ? \'active\' : \'\'}><Stethoscope className="mr-1 h-4 w-4" /> Doctor Portal</Button>, wholesaler: <Button variant={activeView === \'wholesalerPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wholesalerPortal\')} size="sm" data-state={activeView === \'wholesalerPortal\' ? \'active\' : \'\'}><Truck className="mr-1 h-4 w-4" /> Wholesaler Portal</Button>, };\r\n                    return ( <div className="flex items-center space-x-2 sm:space-x-4 overflow-x-auto py-1 flex-grow justify-end">\r\n                            {portalButtons[userRole]}\r\n                            <Button variant={activeView === \'wellness\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wellness\')} size="sm" data-state={activeView === \'wellness\' ? \'active\' : \'\'}><Activity className="mr-1 h-4 w-4" /> Wellness</Button>\r\n                            <div className="flex items-center space-x-3 pl-3 border-l border-gray-200 ml-2 flex-shrink-0">\r\n                                <Button variant="ghost" size="icon" className="relative hover:bg-gray-100 rounded-full" onClick={() => alert(\'Placeholder: Show Notifications Panel\')}> <Bell className="h-5 w-5 text-gray-600" /> <span className="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full ring-1 ring-white bg-red-500"/> </Button>\r\n                                <span className="text-sm font-medium text-gray-700 hidden sm:inline" title={`Logged in as: ${userRole}`}>Welcome, {userName}</span>\r\n                                <Button variant="outline" onClick={handleLogout} size="sm"> <LogOut className="mr-1 h-4 w-4" /> Logout </Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            };\r\n\r\n\r\n            // Ensure NO HTML comments are inside this return block\r\n            return (\r\n                <div className="min-h-screen bg-gray-100 flex flex-col">\r\n                    {/* Sticky Navigation Bar */}\r\n                    <nav className="bg-white shadow-md sticky top-0 z-40">\r\n                        <div className="container mx-auto px-4 py-2 flex flex-wrap justify-between items-center gap-4">\r\n                             <span\r\n                                className="text-2xl font-bold text-blue-700 cursor-pointer shrink-0 mr-6"\r\n                                onClick={() => navigateTo(isAuthenticated ? `${userRole}Portal` : \'landing\')}\r\n                                title="Go to Home/Dashboard"\r\n                             >\r\n                                ehutano<span className="text-green-600">+</span>\r\n                             </span>\r\n                             {renderNavigation()}\r\n                         </div>\r\n                    </nav>\r\n\r\n                    {/* Main Content Area */}\r\n                    <main className="container mx-auto p-4 md:p-6 lg:p-8 flex-grow">\r\n                        {renderMainContent()}\r\n                    </main>\r\n\r\n                    {/* Footer */}\r\n                    <footer className="bg-gray-800 text-gray-400 text-sm py-10 mt-16">\r\n                        <div className="container mx-auto px-4">\r\n                             <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 mb-8">\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Company</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">About Us</a></li> <li><a href="#" className="hover:text-white hover:underline">Careers</a></li> <li><a href="#" className="hover:text-white hover:underline">Contact</a></li> <li><a href="#" className="hover:text-white hover:underline" onClick={(e) => { e.preventDefault(); navigateTo(\'wellness\'); }}>Blog</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Legal</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Privacy Policy</a></li> <li><a href="#" className="hover:text-white hover:underline">Terms of Service</a></li> <li><a href="#" className="hover:text-white hover:underline">Compliance</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Resources</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Help Center</a></li> <li><a href="#" className="hover:text-white hover:underline">API Documentation</a></li> <li><a href="#" className="hover:text-white hover:underline">System Status</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Connect</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Facebook</a></li> <li><a href="#" className="hover:text-white hover:underline">Twitter / X</a></li> <li><a href="#" className="hover:text-white hover:underline">LinkedIn</a></li> <li><a href="#" className="hover:text-white hover:underline">WhatsApp Support</a></li> </ul> </div>\r\n                                <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right mt-8 lg:mt-0"> <span className="text-3xl font-bold text-white"> ehutano<span className="text-green-400">+</span> </span> <p className="text-xs mt-2">Digital Health Solutions</p> </div>\r\n                             </div>\r\n                             <div className="border-t border-gray-700 pt-6 text-center text-xs"> &copy; {new Date().getFullYear()} ehutano+. A division of Health Futures Ltd. All rights reserved. </div>\r\n                        </div>\r\n                    </footer>\r\n\r\n                     {/* Centralized Modals */}\r\n                    <MedicineVerificationModal isOpen={isVerificationModalOpen} onClose={closeVerificationModal} verificationData={verificationData} />\r\n                    {/* OrderDetailsModal & DispensingModal are rendered within PharmacyPortal */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        // --- Render the App ---\r\n        try {\r\n            console.log("Attempting ReactDOM.render...");\r\n            ReactDOM.render(<App />, document.getElementById(\'root\'));\r\n            console.log("React app rendered successfully.");\r\n        } catch (error) {\r\n             console.error("CRITICAL ERROR DURING REACT RENDERING:", error);\r\n             const rootElement = document.getElementById(\'root\');\r\n             if (rootElement) {\r\n                rootElement.innerHTML = `<div style="padding: 2rem; border: 2px solid red; background-color: #fee; color: #a00; font-family: sans-serif; text-align: center;">\r\n                                            <h2>Application Initialization Error</h2>\r\n                                            <p>We\'re sorry, but the application failed to load correctly.</p>\r\n                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>\r\n                                            <p style="margin-top: 1em; font-size: 0.9em; color: #500;"><i>Technical Details (for support): ${error.message}</i></p>\r\n                                            <p style="font-size: 0.8em;">(Check the browser\'s developer console (F12) for more detailed error information)</p>\r\n                                            <pre style="margin-top: 1em; text-align: left; background: #fff; border: 1px solid #ccc; padding: 1em; overflow-x: auto; font-size: 0.8em;">${error.stack || \'No stack trace available.\'}</pre>\r\n                                         </div>`;\r\n             }\r\n        }\r\n\r\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\r\n        // ***********************************************************************\r\n        // ehutano+ React Frontend Components (Structured Portals & Auth) - v6 - CORRECTED v6\r\n        // ***********************************************************************\r\n        // Final check: Ensuring no stray HTML comments are within the React JSX.\r\n        // ***********************************************************************\r\n\r\n        const { useState, useMemo, useEffect } = React;\r\n\r\n        // --- Mock Data ---\r\n        const MOCK_PATIENT_DATA = { name: \'Tendai Moyo\', medicalAid: { provider: \'Cimas\', memberId: \'CIM123456789\', verified: true }, recentOrders: [ { id: \'ORD789\', date: \'2025-04-18\', status: \'Delivered\', total: \'$15.50\', items: [\'Paracetamol 500mg\', \'Vitamin C Tabs\'] }, { id: \'ORD788\', date: \'2025-04-15\', status: \'Delivered\', total: \'$22.00\', items: [\'Amoxicillin 250mg (Script)\'] }, { id: \'ORD785\', date: \'2025-04-10\', status: \'Cancelled\', total: \'$8.75\', items: [\'Cough Syrup\'] }, ], prescriptions: [ { id: \'RX123\', medicine: \'Amoxicillin 250mg\', doctor: \'Dr. Chipo Musasa\', dateIssued: \'2025-04-14\', status: \'Filled\', refillsLeft: 0, uploadId: \'UPL001\' }, { id: \'RX124\', medicine: \'Lisinopril 10mg\', doctor: \'Dr. David Chen\', dateIssued: \'2025-03-20\', status: \'Active\', refillsLeft: 2, uploadId: \'UPL002\' }, { id: \'UPL003\', status: \'Pending Review\', dateUploaded: \'2025-04-25\', notes: \'Need urgently please\', isQuoteReady: false }, { id: \'UPL004\', status: \'Quote Ready\', dateUploaded: \'2025-04-24\', isQuoteReady: true, quote: { total: 35.50, items: [{ name: \'Metformin 500mg\', price: 9.50, qty: 1 }, { name: \'Amlodipine 5mg\', price: 13.00, qty: 2 }] } } ], reminders: [ { id: \'REM01\', type: \'Refill\', medicine: \'Lisinopril 10mg\', dueDate: \'2025-05-15\' }, { id: \'REM02\', type: \'Appointment\', details: \'Check-up with Dr. Chen\', dueDate: \'2025-05-01\' }, ], healthMetrics: { bloodPressure: \'120/80 mmHg\', lastCheckup: \'2025-03-20\', } };\r\n        const MOCK_PHARMACY_INVENTORY = [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', category: \'Pain Relief\', stock: 150, price: 2.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot A\' }, { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', category: \'Antibiotics\', stock: 45, price: 8.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot B\' }, { id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', category: \'Vitamins\', stock: 80, price: 5.75, supplier: \'HealthWell\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot C\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', category: \'Allergy\', stock: 5, price: 4.20, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-18\', status: \'Low Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'MediSupply Lot D\' }, { id: \'MED005\', name: \'Cough Syrup XYZ\', category: \'Cold & Flu\', stock: 0, price: 6.50, supplier: \'MediSupply\', lastUpdated: \'2025-04-15\', status: \'Out of Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'LocalChem\', wholesaleSource: \'MediSupply Lot E\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', category: \'Digestive Health\', stock: 60, price: 7.10, supplier: \'HealthWell\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'HealthWell\', wholesaleSource: \'PharmaDistro Lot F\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', category: \'Pain Relief\', stock: 200, price: 3.10, supplier: \'MediSupply\', lastUpdated: \'2025-04-20\', status: \'In Stock\', requiresPrescription: false, isAntibiotic: false, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot G\' }, { id: \'MED008\', name: \'Metformin 500mg\', category: \'Diabetes\', stock: 70, price: 9.50, supplier: \'PharmaDistro\', lastUpdated: \'2025-04-19\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: false, manufacturer: \'PharmaCo\', wholesaleSource: \'PharmaDistro Lot H\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', category: \'Antibiotics\', stock: 30, price: 12.00, supplier: \'MediSupply\', lastUpdated: \'2025-04-21\', status: \'In Stock\', requiresPrescription: true, isAntibiotic: true, manufacturer: \'GenericMed\', wholesaleSource: \'MediSupply Lot I\' }, ];\r\n        const MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES = MOCK_PHARMACY_INVENTORY.map(item => ({ id: item.id, name: item.name, category: item.category, requiresPrescription: item.requiresPrescription, isAntibiotic: item.isAntibiotic, imageUrl: `https://placehold.co/150x150/e2e8f0/334155?text=${item.name.split(\' \')[0]}`, pharmacies: [ { name: \'Bonvie Pharmacy\', price: item.price, stockStatus: item.stock > 10 ? \'In Stock\' : (item.stock > 0 ? \'Low Stock\' : \'Out of Stock\') }, { name: \'Pulse Pharmacy\', price: item.price * 1.05, stockStatus: Math.random() > 0.2 ? \'In Stock\' : \'Low Stock\' }, { name: \'City Pharmacy\', price: item.price * 0.98, stockStatus: Math.random() > 0.1 ? \'In Stock\' : \'Out of Stock\' }, ].filter(p => p.stockStatus !== \'Out of Stock\'), }));\r\n        const MOCK_SALES_DATA = [ { name: \'Jan\', sales: 4000 }, { name: \'Feb\', sales: 3000 }, { name: \'Mar\', sales: 5000 }, { name: \'Apr\', sales: 4500 }, { name: \'May\', sales: 6000 }, { name: \'Jun\', sales: 5500 }, ];\r\n        const MOCK_PARTNER_LOGOS = [ { name: \'Cimas MedAid\', url: \'https://placehold.co/150x60/a5f3fc/0e7490?text=Cimas+Logo\' }, { name: \'Bonvie Pharmacy\', url: \'https://placehold.co/150x60/d8b4fe/581c87?text=Bonvie+Pharmacy\' }, { name: \'MediSupply Wholesalers\', url: \'https://placehold.co/150x60/fecaca/991b1b?text=MediSupply\' }, { name: \'Wellness Hub ZW\', url: \'https://placehold.co/150x60/a7f3d0/14532d?text=Wellness+Hub\' }, { name: \'Dr. Moyo Clinic\', url: \'https://placehold.co/150x60/bfdbfe/1e40af?text=Dr.+Moyo\' }, { name: \'First Mutual Health\', url: \'https://placehold.co/150x60/fed7aa/9a3412?text=FMH+Logo\' }, { name: \'Pulse Pharmacy\', url: \'https://placehold.co/150x60/fbcfe8/9d174d?text=Pulse+Pharmacy\' }, { name: \'PharmaDistro Ltd\', url: \'https://placehold.co/150x60/e0e7ff/3730a3?text=PharmaDistro\' }, ];\r\n        const MOCK_PHARMACY_ORDERS = [ { id: \'ORD-PHARM-001\', patientName: \'Alice Banda\', date: \'2025-04-23\', status: \'Pending Payment\', total: 35.50, items: [{ id: \'MED002\', name: \'Amoxicillin 250mg Caps\', qty: 1 }, { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', qty: 2 }], medicalAidStatus: \'Pending Patient Auth\', amountCovered: 0.00, medicalAidProvider: \'Cimas\', requiresAction: true, paymentMethod: \'Medical Aid\', patientId: \'PAT001\' }, { id: \'ORD-PHARM-002\', patientName: \'Tendai Moyo\', date: \'2025-04-22\', status: \'Ready for Pickup\', total: 12.00, items: [{ id: \'MED009\', name: \'Ciprofloxacin 500mg\', qty: 1 }], medicalAidStatus: \'Received\', amountCovered: 10.00, medicalAidProvider: \'First Mutual Health\', requiresAction: true, paymentMethod: \'Medical Aid / Co-Pay\', patientId: \'PAT002\' }, { id: \'ORD-PHARM-003\', patientName: \'John Doe\', date: \'2025-04-21\', status: \'Completed\', total: 5.75, items: [{ id: \'MED003\', name: \'Vitamin C 1000mg Effervescent\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: false, paymentMethod: \'EcoCash\', patientId: \'PAT003\' }, { id: \'ORD-PHARM-004\', patientName: \'Jane Smith\', date: \'2025-04-24\', status: \'Processing\', total: 9.50, items: [{ id: \'MED008\', name: \'Metformin 500mg\', qty: 1 }], medicalAidStatus: \'Claim Submitted\', amountCovered: 7.50, medicalAidProvider: \'Cimas\', requiresAction: false, paymentMethod: \'Medical Aid\', patientId: \'PAT004\' }, { id: \'ORD-PHARM-005\', patientName: \'Blessing R\', date: \'2025-04-25\', status: \'Pending Approval\', total: 25.00, items: [{ id: \'MED006\', name: \'Omeprazole 20mg Caps\', qty: 2 }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', qty: 1 }], medicalAidStatus: \'Not Applicable\', amountCovered: 0.00, medicalAidProvider: null, requiresAction: true, paymentMethod: \'Cash on Delivery\', patientId: \'PAT005\' }, ];\r\n        const MOCK_VERIFICATION_DATA_VALID = { status: \'verified\', medicineName: \'Amoxicillin 250mg Caps\', batchNumber: \'BCH12345\', expiryDate: \'2026-12-31\', pharmacySource: \'Bonvie Pharmacy\', wholesaleSource: \'MediSupply Lot B\', manufacturer: \'GenericMed\', isAntibiotic: true, message: \'Medicine verified successfully. Genuine product.\' };\r\n        const MOCK_VERIFICATION_DATA_INVALID = { status: \'invalid\', message: \'Verification Failed! Product may be falsified. Report to pharmacy/MCAZ.\', isAntibiotic: false, };\r\n        const MOCK_VERIFICATION_DATA_EXPIRED = { status: \'expired\', medicineName: \'Paracetamol 500mg Tabs\', batchNumber: \'BCH67890\', expiryDate: \'2024-03-31\', pharmacySource: \'Pulse Pharmacy\', wholesaleSource: \'PharmaDistro Lot C\', manufacturer: \'PharmaCo\', isAntibiotic: false, message: \'Warning: This medicine has EXPIRED. Do not use.\' };\r\n        const MOCK_MARKET_WATCH_DATA = { fastMoving: [ { id: \'MED001\', name: \'Paracetamol 500mg Tabs\', trend: \'+25% sales WoW\', source: \'Aggregated POS\' }, { id: \'MED007\', name: \'Ibuprofen 200mg Tabs\', trend: \'High seasonal demand\', source: \'AI Model\' }, { id: \'MED003\', name: \'Vitamin C 1000mg\', trend: \'+15% sales WoW\', source: \'Wholesaler Volume\' }, ], highDemand: [ { id: \'MED002\', name: \'Amoxicillin 250mg Caps\', reason: \'Increased Rx volume\', source: \'E-Rx Trends\' }, { id: \'MED009\', name: \'Ciprofloxacin 500mg\', reason: \'UTI treatment spike\', source: \'Clinic Data\' }, { id: \'MEDXXX\', name: \'Salbutamol Inhalers\', reason: \'Allergy season onset\', source: \'AI Model\' }, ], stockOuts: [ { id: \'MED005\', name: \'Cough Syrup XYZ\', supplier: \'MediSupply\', note: \'ETA 3 days\', status: \'Out of Stock\', source: \'Wholesaler Feed\' }, { id: \'MEDXYZ\', name: \'Salbutamol Inhaler\', supplier: \'PharmaDistro\', note: \'Manufacturing delay\', status: \'Out of Stock\', source: \'Supplier Comms\' }, { id: \'MED004\', name: \'Loratadine 10mg Tabs\', supplier: \'PharmaDistro\', note: \'Multiple low levels\', status: \'Low Stock\', source: \'Aggregated Inventory\' }, ], priceAlerts: [ { id: \'MED008\', name: \'Metformin 500mg\', change: \'+5% supplier price\', note: \'Effective next cycle\', source: \'PharmaDistro Update\' }, { id: \'MED006\', name: \'Omeprazole 20mg Caps\', change: \'-3% promotion\', note: \'Limited time offer\', source: \'Supplier Bulletin\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', change: \'+8% import cost\', note: \'FX fluctuation\', source: \'Import Agent\' }, ], newlyRegistered: [ { id: \'MED101\', name: \'Generic Lisinopril 5mg\', supplier: \'NewGen Pharma\', date: \'2025-04-15\', source: \'MCAZ Registry\' }, { id: \'MED102\', name: \'Adv. Allergy Spray\', supplier: \'HealthWell\', date: \'2025-04-10\', source: \'MCAZ Registry\' }, ], recentlyImported: [ { id: \'MEDIMP01\', name: \'Vaccine Batch X\', source: \'WHO\', arrival: \'2025-04-20\', distributor: \'Govt Stores\' }, { id: \'MEDIMP02\', name: \'Insulin Pens (Y)\', source: \'EU Supplier\', arrival: \'2025-04-18\', distributor: \'PharmaDistro\' }, ], aiInsights: [ "AI Trend: Potential shortage of pediatric Paracetamol Syrup expected in 2 weeks based on consumption & low regional stock. Check inventory.", "Demand Forecast: 30%+ increase predicted for allergy meds next month (pollen). Consider early stocking.", "Opportunity: Promote Vitamin D based on seasonal patterns & low recent sales velocity.", "Pricing Anomaly: Ciprofloxacin wholesale price shows higher variance. Cross-check quotes.", ], };\r\n        const MOCK_ADVERTS = [ { id: \'AD001\', title: \'Bonvie Pharmacy: Flu Shots Available Now!\', imageUrl: \'https://placehold.co/300x100/d8b4fe/581c87?text=Bonvie+Flu+Shots\', link: \'#\', approvedBy: \'MCAZ Ref: AD/FLU/25/001\', type: \'Pharmacy Promotion\' }, { id: \'AD002\', title: \'MediSupply: Reliable Partner for Bulk Orders\', imageUrl: \'https://placehold.co/300x100/fecaca/991b1b?text=MediSupply+Wholesale\', link: \'#\', approvedBy: \'MCAZ Ref: AD/WS/25/003\', type: \'Wholesaler Service\' }, { id: \'AD003\', title: \'Stay Healthy with BrandX Vitamins\', imageUrl: \'https://placehold.co/300x100/a7f3d0/14532d?text=BrandX+Vitamins\', link: \'#\', approvedBy: \'MCAZ Ref: AD/PROD/25/015\', type: \'Product Promotion\' }, ];\r\n        const MOCK_WELLNESS_ACTIVITIES = [ { id: \'ACT001\', name: \'5-a-side Soccer\', day: \'Monday\', time: \'18:00\', location: \'Field A\', slots: 3, booked: false, icon: \'⚽\' }, { id: \'ACT002\', name: \'Yoga Class\', day: \'Tuesday\', time: \'07:00\', location: \'Studio 1\', slots: 5, booked: false, icon: \'🧘\' }, { id: \'ACT003\', name: \'Basketball Pickup\', day: \'Tuesday\', time: \'19:00\', location: \'Court 1\', slots: 8, booked: false, icon: \'🏀\' }, { id: \'ACT004\', name: \'Tennis Singles\', day: \'Wednesday\', time: \'10:00\', location: \'Court 2\', slots: 1, booked: true, icon: \'🎾\' }, { id: \'ACT005\', name: \'Health Walk\', day: \'Thursday\', time: \'06:30\', location: \'Park Entrance\', slots: 15, booked: false, icon: \'🚶\u200d♀️\' }, { id: \'ACT006\', name: \'Zumba Fitness\', day: \'Friday\', time: \'17:30\', location: \'Studio 2\', slots: 0, booked: false, icon: \'💃\' }, { id: \'ACT007\', name: \'Diabetes Support\', day: \'Wednesday\', time: \'14:00\', location: \'Room 1\', slots: 10, booked: false, icon: \'💬\' }, { id: \'ACT008\', name: \'Healthy Cooking\', day: \'Thursday\', time: \'12:00\', location: \'Demo Kitchen\', slots: 6, booked: false, icon: \'🧑\u200d🍳\' }, ];\r\n        const MOCK_BLOG_POSTS = [ { id: \'BLOG001\', title: \'Seasonal Allergies in Zim\', date: \'2025-04-20\', author: \'Dr. Musasa\', snippet: \'Manage symptoms with local tips...\', imageUrl: \'https://placehold.co/300x150/a7f3d0/14532d?text=Allergies\', category: \'General Health\' }, { id: \'BLOG002\', title: \'Importance of Hydration\', date: \'2025-04-15\', author: \'Wellness Team\', snippet: \'Crucial for health in warmer climates...\', imageUrl: \'https://placehold.co/300x150/bfdbfe/1e40af?text=Hydration\', category: \'Lifestyle\' }, { id: \'BLOG003\', title: \'Simple Home Exercises\', date: \'2025-04-10\', author: \'Coach Themba\', snippet: \'Stay active without leaving home...\', imageUrl: \'https://placehold.co/300x150/fecaca/991b1b?text=Home+Exercise\', category: \'Fitness\' }, { id: \'BLOG004\', title: \'Healthy Eating on Budget\', date: \'2025-04-05\', author: \'Nutritionist N.\', snippet: \'Affordable & nutritious local options...\', imageUrl: \'https://placehold.co/300x150/fed7aa/9a3412?text=Healthy+Eating\', category: \'Nutrition\' }, { id: \'BLOG005\', title: \'Managing Type 2 Diabetes\', date: \'2025-04-22\', author: \'Diabetes Educator\', snippet: \'Lifestyle changes are vital...\', imageUrl: \'https://placehold.co/300x150/fde68a/ca8a04?text=Diabetes+Mgmt\', category: \'Diabetes\' }, { id: \'BLOG006\', title: \'Managing High Blood Pressure\', date: \'2025-04-18\', author: \'Dr. Chen\', snippet: \'Learn risks & management steps...\', imageUrl: \'https://placehold.co/300x150/fda4af/be123c?text=Hypertension\', category: \'Heart Health\' }, ];\r\n\r\n        // --- UI Components ---\r\n        const Button = ({ children, variant = \'default\', size = \'default\', className = \'\', disabled, ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"; const variants = { default: "bg-blue-600 text-white hover:bg-blue-700/90", destructive: "bg-red-600 text-white hover:bg-red-700/90", outline: "border border-gray-300 bg-white hover:bg-gray-100 hover:text-gray-900", secondary: "bg-gray-100 text-gray-900 hover:bg-gray-200/80", ghost: "hover:bg-gray-100 hover:text-gray-900", link: "text-blue-600 underline-offset-4 hover:underline", success: "bg-green-600 text-white hover:bg-green-700/90", warning: "bg-yellow-400 text-yellow-900 hover:bg-yellow-500/90", }; const sizes = { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }; const variantStyle = variants[variant] || variants.default; return <button disabled={disabled} className={`${baseStyle} ${variantStyle} ${sizes[size]} ${className}`} {...props}>{children}</button>; };\r\n        const Card = ({ children, className = \'\', ...props }) => ( <div className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`} {...props}>{children}</div> );\r\n        const CardHeader = ({ children, className = \'\', ...props }) => <div className={`flex flex-col space-y-1.5 p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardTitle = ({ children, className = \'\', ...props }) => <h3 className={`text-lg md:text-xl font-semibold leading-none tracking-tight ${className}`} {...props}>{children}</h3>;\r\n        const CardDescription = ({ children, className = \'\', ...props }) => <p className={`text-sm text-gray-500 ${className}`} {...props}>{children}</p>;\r\n        const CardContent = ({ children, className = \'\', ...props }) => <div className={`p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const CardFooter = ({ children, className = \'\', ...props }) => <div className={`flex items-center p-4 md:p-6 ${className}`} {...props}>{children}</div>;\r\n        const Table = ({ children, className = \'\', ...props }) => <div className="w-full overflow-auto"><table className={`w-full caption-bottom text-sm ${className}`} {...props}>{children}</table></div>;\r\n        const TableHeader = ({ children, className = \'\', ...props }) => <thead className={`[&_tr]:border-b bg-gray-50 ${className}`} {...props}>{children}</thead>;\r\n        const TableBody = ({ children, className = \'\', ...props }) => <tbody className={`[&_tr:last-child]:border-0 divide-y divide-gray-200 ${className}`} {...props}>{children}</tbody>;\r\n        const TableFooter = ({ children, className = \'\', ...props }) => <tfoot className={`border-t bg-gray-100/50 font-medium ${className}`} {...props}>{children}</tfoot>;\r\n        const TableRow = ({ children, className = \'\', ...props }) => <tr className={`border-b border-gray-200 transition-colors hover:bg-gray-100/50 data-[state=selected]:bg-blue-50 ${className}`} {...props}>{children}</tr>;\r\n        const TableHead = ({ children, className = \'\', ...props }) => <th className={`h-12 px-4 text-left align-middle font-medium text-gray-500 ${className}`} {...props}>{children}</th>;\r\n        const TableCell = ({ children, className = \'\', ...props }) => <td className={`p-4 align-middle ${className}`} {...props}>{children}</td>;\r\n        const TableCaption = ({ children, className = \'\', ...props }) => <caption className={`mt-4 text-sm text-gray-500 ${className}`} {...props}>{children}</caption>;\r\n        const Input = ({ className = \'\', type = \'text\', ...props }) => ( <input type={type} className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Select = ({ children, className = \'\', ...props }) => ( <select className={`flex h-10 w-full items-center justify-between rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 appearance-none pr-8 bg-no-repeat bg-right bg-[url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="%236b7280" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m6 8 4 4 4-4"/></svg>\')] ${className}`} {...props}> {children} </select> );\r\n        const SelectItem = ({ children, value, ...props }) => <option value={value} {...props}>{children}</option>;\r\n        const Badge = ({ children, variant = \'default\', className = \'\', ...props }) => { const baseStyle = "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"; const variants = { default: "border-transparent bg-blue-600 text-blue-50", secondary: "border-transparent bg-gray-200 text-gray-800", destructive: "border-transparent bg-red-600 text-red-50", outline: "text-gray-900 border-gray-300", success: "border-transparent bg-green-500 text-white", warning: "border-transparent bg-yellow-400 text-yellow-900", info: "border-transparent bg-sky-500 text-white", trendUp: "border-transparent bg-emerald-100 text-emerald-800", trendDown: "border-transparent bg-rose-100 text-rose-800", }; const variantStyle = variants[variant] || variants.default; return <span className={`${baseStyle} ${variantStyle} ${className}`} {...props}>{children}</span>; };\r\n        const Label = ({ children, className = \'\', ...props }) => ( <label className={`block text-sm font-medium text-gray-700 leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`} {...props}> {children} </label> );\r\n        const Textarea = ({ className = \'\', ...props }) => ( <textarea className={`flex min-h-[80px] w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`} {...props} /> );\r\n        const Modal = ({ isOpen, onClose, title, children, maxWidth = \'lg\' }) => { if (!isOpen) return null; const widthClasses = { sm: \'max-w-sm\', md: \'max-w-md\', lg: \'max-w-lg\', xl: \'max-w-xl\', \'2xl\': \'max-w-2xl\', \'3xl\': \'max-w-3xl\', \'4xl\': \'max-w-4xl\' }; return ( <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 backdrop-blur-sm animate-fade-in" onClick={onClose}> <div className={`bg-white rounded-lg shadow-xl w-full ${widthClasses[maxWidth] || widthClasses.lg} max-h-[90vh] flex flex-col overflow-hidden transform transition-all animate-scale-in`} onClick={e => e.stopPropagation()} > <div className="flex justify-between items-center p-4 border-b sticky top-0 bg-white z-10"> <h3 className="text-lg font-semibold text-gray-800">{title}</h3> <button onClick={onClose} className="text-gray-400 hover:text-gray-700 text-2xl leading-none p-1 rounded-full hover:bg-gray-100">&times;</button> </div> <div className="p-4 md:p-6 overflow-y-auto flex-grow"> {children} </div> </div> </div> ); };\r\n\r\n        // --- Icons ---\r\n        const ShoppingCart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="9" cy="21" r="1"/><circle cx="20" cy="21" r="1"/><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"/></svg>;\r\n        const Pill = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"/><path d="m8.5 8.5 7 7"/></svg>;\r\n        const Bell = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"/><path d="M13.73 21a2 2 0 0 1-3.46 0"/></svg>;\r\n        const FileText = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><line x1="16" x2="8" y1="13" y2="13"/><line x1="16" x2="8" y1="17" y2="17"/><line x1="10" x2="8" y1="9" y2="9"/></svg>;\r\n        const User = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>;\r\n        const Search = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" x2="16.65" y1="21" y2="16.65"/></svg>;\r\n        const PlusCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="8" y2="16"/><line x1="8" x2="16" y1="12" y2="12"/></svg>;\r\n        const Filter = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"/></svg>;\r\n        const BarChart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="20" y2="10"/><line x1="18" x2="18" y1="20" y2="4"/><line x1="6" x2="6" y1="20" y2="16"/></svg>;\r\n        const Settings = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 0 2l-.15.1a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1 0 2l.15-.1a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const UploadCloud = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M12 12v9"/><path d="m16 16-4-4-4 4"/></svg>;\r\n        const Stethoscope = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3"/><path d="M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4"/><circle cx="20" cy="10" r="2"/></svg>;\r\n        const Truck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"/><path d="M15 18H9"/><path d="M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"/><circle cx="17" cy="18" r="2"/><circle cx="7" cy="18" r="2"/></svg>;\r\n        const Building = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"/><path d="M9 22v-4h6v4"/><path d="M8 6h.01"/><path d="M16 6h.01"/><path d="M12 6h.01"/><path d="M12 10h.01"/><path d="M12 14h.01"/><path d="M16 10h.01"/><path d="M16 14h.01"/><path d="M8 10h.01"/><path d="M8 14h.01"/></svg>;\r\n        const Activity = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"/></svg>;\r\n        const Home = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/><polyline points="9 22 9 12 15 12 15 22"/></svg>;\r\n        const Users = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;\r\n        const MapPin = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"/><circle cx="12" cy="10" r="3"/></svg>;\r\n        const LogIn = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"/><polyline points="10 17 15 12 10 7"/><line x1="15" x2="3" y1="12" y2="12"/></svg>;\r\n        const LogOut = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" x2="9" y1="12" y2="12"/></svg>;\r\n        const HeartPulse = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/><path d="M3.22 12H9.5l.7-1 2.1 2.1.8-1 1.9 1.9h5.27"/></svg>;\r\n        const FileSearch = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3"/><path d="M14 2v6h6"/><circle cx="5" cy="14" r="3"/><path d="m9 18-1.5-1.5"/></svg>;\r\n        const FileCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/><polyline points="14 2 14 8 20 8"/><path d="m9 15 2 2 4-4"/></svg>;\r\n        const CreditCard = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="14" x="2" y="5" rx="2"/><line x1="2" x2="22" y1="10" y2="10"/></svg>;\r\n        const PackageCheck = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16.19 11.26-4.19 4.19-1.53-1.53"/><path d="M22 11.16V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1.17"/><path d="m16 4 3 3H4"/><path d="M18 7.84V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12.17"/><path d="M21 10.84v.32a2 2 0 0 1-2 2H17"/><path d="M7 16h10"/></svg>;\r\n        const QrCode = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="5" height="5" x="3" y="3" rx="1"/><rect width="5" height="5" x="16" y="3" rx="1"/><rect width="5" height="5" x="3" y="16" rx="1"/><path d="M21 16h-3a2 2 0 0 0-2 2v3"/><path d="M21 21v.01"/><path d="M12 7v3a2 2 0 0 1-2 2H7"/><path d="M3 12h.01"/><path d="M12 3h.01"/><path d="M12 16v.01"/><path d="M16 12h1"/><path d="M21 12v.01"/><path d="M12 21v-1"/></svg>;\r\n        const AlertTriangle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>;\r\n        const CheckCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><path d="m9 11 3 3L22 4"/></svg>;\r\n        const XCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="m15 9-6 6"/><path d="m9 9 6 6"/></svg>;\r\n        const BookOpen = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>;\r\n        const ClipboardList = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/><path d="M12 11h4"/><path d="M12 16h4"/><path d="M8 11h.01"/><path d="M8 16h.01"/></svg>;\r\n        const Info = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>;\r\n        const TrendingUp = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"/><polyline points="16 7 22 7 22 13"/></svg>;\r\n        const PackageX = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"/><path d="m7.5 4.27 9 5.15"/><polyline points="3.29 7 12 12 20.71 7"/><line x1="12" x2="12" y1="22" y2="12"/><path d="m17 13 5 5"/><path d="m22 13-5 5"/></svg>;\r\n        const DollarSign = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="12" x2="12" y1="2" y2="22"/><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>;\r\n        const PackagePlus = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M16.5 9.4a7 7 0 1 1-9 0"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><line x1="12" x2="12" y1="12" y2="22"/><polyline points="7 12 12 14.5 17 12"/><line x1="3.29" x2="12" y1="7" y2="12"/><line x1="20.71" x2="12" y1="7" y2="12"/><line x1="12" x2="12" y1="8" y2="10"/><line x1="10" x2="14" y1="9" y2="9"/></svg>;\r\n        const Cpu = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="16" height="16" x="4" y="4" rx="2"/><rect width="6" height="6" x="9" y="9" rx="1"/><path d="M15 2v2"/><path d="M15 20v2"/><path d="M9 2v2"/><path d="M9 20v2"/><path d="M2 9h2"/><path d="M2 15h2"/><path d="M20 9h2"/><path d="M20 15h2"/><path d="M9 4V2"/><path d="M15 4V2"/><path d="M9 20v2"/><path d="M15 20v2"/></svg>;\r\n        const Megaphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m3 11 18-5v12L3 14v-3z"/><path d="M11.6 16.8a3 3 0 1 1-5.8-1.6"/></svg>;\r\n        const Eye = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/><circle cx="12" cy="12" r="3"/></svg>;\r\n        const CalendarDays = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="18" height="18" x="3" y="4" rx="2" ry="2"/><line x1="16" x2="16" y1="2" y2="6"/><line x1="8" x2="8" y1="2" y2="6"/><line x1="3" x2="21" y1="10" y2="10"/></svg>;\r\n        const Utensils = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2"/><path d="M7 2v20"/><path d="M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3z"/></svg>;\r\n        const Heart = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"/></svg>;\r\n        const Scale = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z"/><path d="M7 21h10"/><path d="M12 3v18"/><path d="M3 7h2"/><path d="M19 7h2"/></svg>;\r\n        const Brain = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44 2.5 2.5 0 0 1-2.96-3.08 3 3 0 0 1-.34-5.58 2.5 2.5 0 0 1 1.32-4.24 2.5 2.5 0 0 1 1.98-3.06Z"/><path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44 2.5 2.5 0 0 0 2.96-3.08 3 3 0 0 0 .34-5.58 2.5 2.5 0 0 0-1.32-4.24 2.5 2.5 0 0 0-1.98-3.06Z"/></svg>;\r\n        const Package = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="16.5" x2="7.5" y1="9.4" y2="9.4"/><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/><polyline points="3.27 6.96 12 12.01 20.73 6.96"/><line x1="12" x2="12" y1="22.08" y2="12"/></svg>;\r\n        const MonitorSmartphone = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"/><path d="M10 19v-3.96 3.15"/><path d="M7 19h5"/><rect width="6" height="10" x="16" y="12" rx="2"/></svg>;\r\n        const Receipt = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"/><path d="M8 8h8"/><path d="M8 12h8"/><path d="M10 16h4"/></svg>;\r\n        const HelpCircle = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/><path d="M12 17h.01"/></svg>;\r\n        const MessageSquare = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>;\r\n        const Fingerprint = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4"/><path d="M5 19.5A8.5 8.5 0 0 1 12 11a8.5 8.5 0 0 1 7 8.5"/><path d="M10 16.5c0 .8.7 1.5 1.5 1.5S13 17.3 13 16.5"/><path d="M16 14a1 1 0 0 1 1 1v1.5c0 .8-.7 1.5-1.5 1.5S14 17.3 14 16.5V15a1 1 0 0 1 1-1z"/><path d="M8 14a1 1 0 0 0-1 1v1.5c0 .8.7 1.5 1.5 1.5S10 17.3 10 16.5V15a1 1 0 0 0-1-1z"/><path d="M18 19.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z"/><path d="M6 19.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/><path d="M12 5.5c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5"/><path d="M15 8.5c0 .8-.7 1.5-1.5 1.5S12 9.3 12 8.5"/><path d="M12 11.5a2.5 2.5 0 0 0 0 5 2.5 2.5 0 0 0 0-5z"/></svg>;\r\n        const TrendingDown = (props) => <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><polyline points="22 17 13.5 8.5 8.5 13.5 2 7"/><polyline points="16 17 22 17 22 11"/></svg>;\r\n\r\n        // --- Recharts Placeholder ---\r\n        const ResponsiveContainer = ({ children }) => <div className="w-full h-[300px] bg-gray-100 flex items-center justify-center text-gray-400 italic rounded border border-gray-200">{children}</div>;\r\n        const LineChart = ({ children, data }) => <div className="p-4">Line Chart Placeholder - Data: {data?.length} points</div>;\r\n        const BarChartComponent = ({ children, data }) => <div className="p-4">Bar Chart Placeholder - Data: {data?.length} points</div>;\r\n        const Line = (props) => null; const Bar = (props) => null; const XAxis = (props) => null; const YAxis = (props) => null; const CartesianGrid = (props) => null; const Tooltip = (props) => null; const Legend = (props) => null;\r\n\r\n        // Utility function\r\n        const getStatusBadgeVariant = (status) => { status = status?.toLowerCase() || \'\'; if (status.includes(\'complete\') || status.includes(\'paid\') || status.includes(\'in stock\') || status.includes(\'verified\') || status.includes(\'active\') || status.includes(\'claim submitted\') || status.includes(\'received\')) return \'success\'; if (status.includes(\'pending\') || status.includes(\'low stock\') || status.includes(\'expired\')) return \'warning\'; if (status.includes(\'processing\') || status.includes(\'ready\') || status.includes(\'shipped\')) return \'info\'; if (status.includes(\'reject\') || status.includes(\'cancel\') || status.includes(\'out of stock\') || status.includes(\'invalid\')) return \'destructive\'; return \'secondary\'; };\r\n        const getClaimStatusVariant = getStatusBadgeVariant;\r\n\r\n        // --- Landing Page ---\r\n        function LandingPage({ setActiveView, login, navigateTo }) { console.log("Rendering LandingPage"); return ( <div className="space-y-12"> <section className="text-center py-16 px-4 bg-gradient-to-br from-blue-50 via-white to-green-50 rounded-lg shadow-sm"> <h1 className="text-4xl md:text-5xl font-bold text-blue-800 mb-4">Welcome to ehutano<span className="text-green-600">+</span></h1> <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">Your trusted digital partner for pharmacy services, health management, and community wellness in Zimbabwe.</p> <div className="flex flex-wrap justify-center gap-4"> <Button size="lg" onClick={() => navigateTo(\'medicineSearch\')}><Search className="mr-2 h-5 w-5" /> Find Medicines Now</Button> <Button size="lg" variant="outline" onClick={() => setActiveView(\'wellness\')}><Activity className="mr-2 h-5 w-5" /> Explore Wellness Hub</Button> </div> </section> <section className="grid md:grid-cols-3 gap-8 text-center"> <Card><CardHeader><Pill className="mx-auto h-10 w-10 text-blue-600 mb-2"/><CardTitle>Online Pharmacy</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Search, compare prices, order medicines, upload prescriptions.</p><Button variant="link" className="mt-4" onClick={() => login(\'patient\')}>Patient Login/Register</Button></CardContent></Card> <Card><CardHeader><Building className="mx-auto h-10 w-10 text-purple-600 mb-2"/><CardTitle>Pharmacy Portal</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Manage inventory, orders, market insights & analytics.</p><Button variant="link" className="mt-4" onClick={() => login(\'pharmacy\')}>Pharmacy Login/Register</Button></CardContent></Card> <Card><CardHeader><HeartPulse className="mx-auto h-10 w-10 text-green-600 mb-2"/><CardTitle>Wellness Hub</CardTitle></CardHeader><CardContent className="pt-2"><p className="text-sm text-gray-600">Book events, access health resources, read wellness blog.</p><Button variant="link" className="mt-4" onClick={() => setActiveView(\'wellness\')}>Visit Wellness Hub</Button></CardContent></Card> </section> <section className="py-12 bg-gray-50 rounded-lg"> <div className="container mx-auto px-4 text-center"> <h2 className="text-3xl font-bold text-gray-800 mb-8">How ehutano+ Works</h2> <div className="grid md:grid-cols-4 gap-8"> <div className="flex flex-col items-center p-4"><div className="bg-blue-100 rounded-full p-4 mb-4"><FileSearch className="h-8 w-8 text-blue-600" /></div><h3 className="font-semibold mb-1">1. Search/Upload</h3><p className="text-sm text-gray-600">Find medicine or Rx.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-purple-100 rounded-full p-4 mb-4"><FileCheck className="h-8 w-8 text-purple-600" /></div><h3 className="font-semibold mb-1">2. Quote/Compare</h3><p className="text-sm text-gray-600">Get quote/prices.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-yellow-100 rounded-full p-4 mb-4"><CreditCard className="h-8 w-8 text-yellow-600" /></div><h3 className="font-semibold mb-1">3. Order & Pay</h3><p className="text-sm text-gray-600">Confirm & pay.</p></div> <div className="flex flex-col items-center p-4"><div className="bg-green-100 rounded-full p-4 mb-4"><PackageCheck className="h-8 w-8 text-green-600" /></div><h3 className="font-semibold mb-1">4. Delivery/Pickup</h3><p className="text-sm text-gray-600">Receive/collect.</p></div> </div> </div> </section> <section className="py-12 bg-white border-t border-b border-gray-200"> <div className="container mx-auto px-4"> <h2 className="text-2xl font-semibold text-center text-gray-700 mb-10">Our Trusted Partners</h2> <div className="relative w-full overflow-hidden [mask-image:_linear-gradient(to_right,transparent_0,_black_128px,_black_calc(100%-128px),transparent_100%)]"> <div className="flex w-max animate-scroll hover:paused">{[...MOCK_PARTNER_LOGOS, ...MOCK_PARTNER_LOGOS].map((logo, index) => ( <div key={index} className="flex-shrink-0 mx-8 flex items-center justify-center h-16"><img src={logo.url} alt={`${logo.name} Logo`} className="max-h-full object-contain grayscale opacity-70 hover:grayscale-0 hover:opacity-100 transition-all duration-300" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/150x60/f0f0f0/c0c0c0?text=Err"; e.target.alt = `${logo.name} Err`; }}/></div> ))}</div> </div> </div> </section> <section className="text-center py-10 px-4 bg-gray-50 rounded-lg shadow-sm border"> <h2 className="text-2xl font-semibold text-gray-800 mb-4">Are you a Doctor or Wholesaler?</h2> <p className="text-gray-600 max-w-xl mx-auto mb-6">Join our network to streamline workflows and connect.</p> <div className="flex justify-center gap-4"> <Button variant="outline" onClick={() => login(\'doctor\')}><Stethoscope className="mr-2 h-4 w-4"/> Doctor Login/Register</Button> <Button variant="outline" onClick={() => login(\'wholesaler\')}><Truck className="mr-2 h-4 w-4"/> Wholesaler Login/Register</Button> </div> </section> </div> ); }\r\n\r\n        // --- Patient Portal Components ---\r\n        function PatientPortal({ setActiveView, openVerificationModal, patientData, navigateTo }) { console.log("Rendering PatientPortal"); const [currentSubView, setCurrentSubView] = useState(\'dashboard\'); const navigatePatientView = (view) => { setCurrentSubView(view); }; const renderPatientContent = () => { switch (currentSubView) { case \'search\': return <MedicineSearchListing navigatePatientView={navigatePatientView} navigateTo={navigateTo} />; case \'upload\': return <PrescriptionUpload navigatePatientView={navigatePatientView} />; case \'quotedRx\': const quoteReadyRx = patientData.prescriptions.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quoteReadyRx?.quote} navigatePatientView={navigatePatientView} />; case \'dashboard\': default: return <PatientDashboard setActiveView={setActiveView} openVerificationModal={openVerificationModal} patientData={patientData} navigatePatientView={navigatePatientView} />; } }; return ( <div className="space-y-6"> <nav className="flex space-x-1 border-b overflow-x-auto mb-6"> <Button variant={currentSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'dashboard\')} data-state={currentSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Home className="mr-1 h-4 w-4"/> Dashboard</Button> <Button variant={currentSubView === \'search\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'search\')} data-state={currentSubView === \'search\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><Search className="mr-1 h-4 w-4"/> Find Medicine</Button> <Button variant={currentSubView === \'upload\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'upload\')} data-state={currentSubView === \'upload\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent"><UploadCloud className="mr-1 h-4 w-4"/> Upload Rx</Button> {patientData.prescriptions.some(rx => rx.isQuoteReady) && ( <Button variant={currentSubView === \'quotedRx\' ? \'secondary\' : \'ghost\'} onClick={() => navigatePatientView(\'quotedRx\')} data-state={currentSubView === \'quotedRx\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent relative"> <FileCheck className="mr-1 h-4 w-4"/> View Quote <span className="absolute top-0 right-0 block h-2 w-2 rounded-full ring-1 ring-white bg-red-500"/> </Button> )} </nav> {renderPatientContent()} </div> ); }\r\n        function PatientDashboard({ setActiveView, openVerificationModal, patientData, navigatePatientView }) { const patient = patientData; const handleScan = (mockData) => { const inventoryItem = MOCK_PHARMACY_INVENTORY.find(item => item.name === mockData.medicineName); const fullVerificationData = { ...mockData, wholesaleSource: inventoryItem?.wholesaleSource || \'N/A\', manufacturer: inventoryItem?.manufacturer || \'N/A\', }; openVerificationModal(fullVerificationData); }; const handleScanValidAntibiotic = () => handleScan(MOCK_VERIFICATION_DATA_VALID); const handleScanValidNonAntibiotic = () => handleScan({ ...MOCK_VERIFICATION_DATA_VALID, isAntibiotic: false, medicineName: \'Paracetamol 500mg Tabs\' }); const handleScanInvalid = () => handleScan(MOCK_VERIFICATION_DATA_INVALID); const handleScanExpired = () => handleScan(MOCK_VERIFICATION_DATA_EXPIRED); const quoteReadyRx = patient.prescriptions.find(rx => rx.isQuoteReady); return ( <div className="space-y-6"> {quoteReadyRx && ( <Card className="bg-gradient-to-r from-green-100 to-emerald-100 border-green-300"> <CardContent className="pt-4 flex flex-col sm:flex-row items-center justify-between gap-4"> <div className="flex items-center gap-3"> <FileCheck className="h-8 w-8 text-green-700 flex-shrink-0" /> <div> <h4 className="font-semibold text-green-800">Prescription Quote Ready!</h4> <p className="text-sm text-green-700">Quote for {quoteReadyRx.id} is available.</p> </div> </div> <Button onClick={() => navigatePatientView(\'quotedRx\')} className="bg-green-600 hover:bg-green-700 mt-2 sm:mt-0 flex-shrink-0">View Quote</Button> </CardContent> </Card> )} <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'search\')}> <Search className="mr-2 h-5 w-5 text-blue-600"/> <span>Order Medicine</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => navigatePatientView(\'upload\')}> <UploadCloud className="mr-2 h-5 w-5 text-green-600"/> <span>Upload Rx</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={handleScanValidAntibiotic}> <QrCode className="mr-2 h-5 w-5 text-indigo-600"/> <span>Verify Meds</span> </Button> <Button className="w-full justify-start text-left h-auto py-3 px-4" variant="outline" onClick={() => alert(\'Pholder: Appointments\')}> <Stethoscope className="mr-2 h-5 w-5 text-purple-600"/> <span>Appointments</span> </Button> </div> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <Card> <CardHeader> <CardTitle>Recent Orders</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>ID</TableHead> <TableHead>Date</TableHead> <TableHead>Status</TableHead> <TableHead>Total</TableHead> <TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {patient.recentOrders.map((order) => ( <TableRow key={order.id}> <TableCell className="font-medium">{order.id}</TableCell> <TableCell>{order.date}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell>{order.total}</TableCell> <TableCell><Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View order ${order.id}`)}>View</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Orders\')}>View All Orders</Button> </CardFooter> </Card> </div> <div className="space-y-6"> <Card> <CardHeader> <CardTitle>My Prescriptions</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-60 overflow-y-auto pt-4"> {patient.prescriptions.filter(rx => !rx.isQuoteReady).map((rx) => ( <div key={rx.id} className={`text-sm p-3 rounded-lg border bg-gray-50`}> {rx.medicine ? ( <> <p className="font-semibold">{rx.medicine}</p> <p className="text-xs text-gray-600">Dr. {rx.doctor} ({rx.dateIssued})</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge> ({rx.refillsLeft} refills)</p> {rx.status === \'Active\' && rx.refillsLeft > 0 && ( <Button variant="link" size="sm" className="p-0 h-auto mt-1 text-xs" onClick={() => alert(`Pholder: Refill ${rx.medicine}`)}>Request Refill</Button> )} </> ) : ( <> <p className="font-semibold">Uploaded Rx ({rx.id})</p> <p className="text-xs text-gray-600">Uploaded: {rx.dateUploaded}</p> <p className="text-xs">Status: <Badge variant={getStatusBadgeVariant(rx.status)}>{rx.status}</Badge></p> {rx.notes && <p className="text-xs italic">Notes: "{rx.notes}"</p>} </> )} </div> ))} {patient.prescriptions.filter(rx => !rx.isQuoteReady).length === 0 && <p className="text-sm text-gray-500">No active/pending Rxs.</p>} </CardContent> <CardFooter className="pt-4 border-t"> <Button variant="outline" size="sm" onClick={() => alert(\'Pholder: All Rxs\')}>View All Prescriptions</Button> </CardFooter> </Card> <Card> <CardHeader> <CardTitle>Reminders</CardTitle> </CardHeader> <CardContent className="space-y-3 max-h-48 overflow-y-auto pt-4"> {patient.reminders.map((rem) => ( <div key={rem.id} className="text-sm p-3 bg-blue-50 rounded-lg border border-blue-200 flex justify-between items-center"> <div><p className="font-semibold">{rem.type === \'Refill\' ? `Refill: ${rem.medicine}` : rem.details}</p><p className="text-xs text-gray-600">Due: {rem.dueDate}</p></div> <Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Dismiss ${rem.id}`)}>X</Button> </div> ))} {patient.reminders.length === 0 && <p className="text-sm text-gray-500">No reminders.</p>} </CardContent> </Card> </div> </div> <Card> <CardHeader> <CardTitle>Need Help?</CardTitle> </CardHeader> <CardContent className="pt-4 flex flex-wrap gap-4 justify-center"> <Button variant="outline" onClick={() => alert(\'Pholder: AI Chat\')}> <HelpCircle className="mr-2 h-4 w-4"/> Ask AI </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Live Chat\')}> <MessageSquare className="mr-2 h-4 w-4"/> Chat Pharmacist </Button> </CardContent> </Card> <Card className="mt-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200"> <CardHeader> <CardTitle className="text-green-800">Wellness Hub</CardTitle> </CardHeader> <CardContent className="pt-4 flex items-center gap-4"> <img src="https://placehold.co/100x80/a7f3d0/14532d?text=Wellness" alt="Wellness" className="rounded-lg h-20"/> <div className="flex-grow"><p className="mb-3 text-gray-700 text-sm">Book events, read articles, use tools.</p><Button onClick={() => setActiveView(\'wellness\')} className="bg-green-600 hover:bg-green-700" size="sm"> <Activity className="mr-2 h-4 w-4"/> Go to Wellness </Button></div> </CardContent> </Card> <Card className="mt-6"> <CardHeader><CardTitle>QR Scan Simulation</CardTitle></CardHeader> <CardContent className="pt-4 flex flex-wrap gap-2"> <Button variant="secondary" size="sm" onClick={handleScanValidAntibiotic}>Scan Valid ABX</Button> <Button variant="secondary" size="sm" onClick={handleScanValidNonAntibiotic}>Scan Valid Non-ABX</Button> <Button variant="destructive" size="sm" onClick={handleScanInvalid}>Scan Invalid</Button> <Button variant="warning" size="sm" onClick={handleScanExpired}>Scan Expired</Button> </CardContent> </Card> </div> ); }\r\n        function MedicineSearchListing({ navigatePatientView, navigateTo }) { const [searchTerm, setSearchTerm] = useState(\'\'); const [searchResults, setSearchResults] = useState(MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES); const handleSearch = (e) => { const term = e.target.value.toLowerCase(); setSearchTerm(e.target.value); setSearchResults( MOCK_MEDICINE_SEARCH_RESULTS_WITH_PHARMACIES.filter(med => med.name.toLowerCase().includes(term) || med.category.toLowerCase().includes(term) ) ); }; const handleAddToCart = (medId, pharmacyName, price) => { alert(`Pholder: Add ${medId} from ${pharmacyName} ($${price.toFixed(2)}) to cart.`); }; const handleViewDetails = (medId) => { alert(`Pholder: View details ${medId}.`); }; return ( <div className="space-y-6"> <div className="relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /> <Input placeholder="Search medicine or category..." className="pl-12 text-base h-12" value={searchTerm} onChange={handleSearch} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {searchResults.length > 0 ? ( searchResults.map(med => ( <Card key={med.id} className="overflow-hidden flex flex-col"> <CardHeader className="flex flex-row items-start gap-4 p-4"> <img src={med.imageUrl} alt={med.name} className="w-20 h-20 object-contain rounded-md border flex-shrink-0" /> <div className="flex-grow"> <h4 className="font-semibold text-base mb-1">{med.name}</h4> <p className="text-sm text-gray-500 mb-2">{med.category}</p> {med.requiresPrescription && <Badge variant="warning">Rx</Badge>} {med.isAntibiotic && <Badge variant="destructive" className="ml-1">ABX</Badge>} </div> </CardHeader> <CardContent className="pt-0 pb-4 flex-grow flex flex-col"> <h5 className="text-sm font-medium mb-2 text-gray-700">Compare Prices:</h5> {med.pharmacies.length > 0 ? ( <div className="space-y-3"> {med.pharmacies.slice(0, 3).map(pharm => ( <div key={pharm.name} className="flex justify-between items-center p-2 bg-gray-50 rounded-md border"> <div> <span className="text-sm font-medium">{pharm.name}</span> <Badge variant={getStatusBadgeVariant(pharm.stockStatus)} className="ml-2">{pharm.stockStatus}</Badge> </div> <div className="text-right flex-shrink-0"> <p className="text-base font-semibold text-blue-700">${pharm.price.toFixed(2)}</p> <Button size="sm" variant="link" className="text-xs h-auto p-0 mt-1" onClick={() => handleAddToCart(med.id, pharm.name, pharm.price)} disabled={med.requiresPrescription} > {med.requiresPrescription ? \'Requires Rx\' : \'Add to Cart\'} </Button> </div> </div> ))} {med.pharmacies.length > 3 && ( <Button variant="link" size="sm" className="w-full mt-2" onClick={() => handleViewDetails(med.id)}> View {med.pharmacies.length - 3} more... </Button> )} </div> ) : ( <p className="text-sm text-gray-500 italic">Unavailable.</p> )} </CardContent> <CardFooter className="border-t pt-3"> <Button variant="outline" onClick={() => handleViewDetails(med.id)} className="w-full" size="sm"> View Details </Button> </CardFooter> </Card> )) ) : ( <div className="col-span-full text-center py-10 text-gray-500"> <Pill className="mx-auto h-12 w-12 text-gray-400 mb-4"/> <p>No medicines found for "{searchTerm}".</p> <p className="text-sm mt-2">Try again or <button className="text-blue-600 underline" onClick={() => navigateTo ? navigateTo(\'patientPortal\') : (navigatePatientView ? navigatePatientView(\'upload\') : alert(\'Cannot navigate\')) }>upload Rx</button>.</p> </div> )} </div> </div> ); }\r\n        function PrescriptionUpload({ navigatePatientView }) { const [selectedFile, setSelectedFile] = useState(null); const [notes, setNotes] = useState(\'\'); const [isUploading, setIsUploading] = useState(false); const [uploadStatus, setUploadStatus] = useState(\'\'); const handleFileChange = (event) => { if (event.target.files && event.target.files[0]) { setSelectedFile(event.target.files[0]); setUploadStatus(\'\'); } }; const handleSubmit = async (event) => { event.preventDefault(); if (!selectedFile) { alert("Select file."); return; } setIsUploading(true); setUploadStatus(\'\'); await new Promise(resolve => setTimeout(resolve, 1500)); const isSuccess = Math.random() > 0.2; if (isSuccess) { setUploadStatus(\'success\'); setSelectedFile(null); setNotes(\'\'); } else { setUploadStatus(\'error\'); } setIsUploading(false); }; return ( <div className="space-y-6 max-w-2xl mx-auto"> <Card> <CardHeader> <CardTitle>Upload Prescription</CardTitle> <CardDescription>Submit image/PDF for review/quote.</CardDescription> </CardHeader> <form onSubmit={handleSubmit}> <CardContent className="pt-6 space-y-4"> <div> <Label htmlFor="rx-file">File (Image/PDF)</Label> <Input id="rx-file" type="file" accept="image/*,.pdf" onChange={handleFileChange} required className="mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"/> {selectedFile && (<p className="text-sm mt-2">Selected: {selectedFile.name}</p>)} </div> <div> <Label htmlFor="notes">Notes (Optional)</Label> <Textarea id="notes" placeholder="e.g., Brand preference, urgency..." value={notes} onChange={(e) => setNotes(e.target.value)} className="mt-1"/> </div> </CardContent> <CardFooter className="flex justify-end border-t pt-4"> <Button type="submit" disabled={isUploading || !selectedFile}> {isUploading ? \'Uploading...\' : <><UploadCloud className="mr-2 h-4 w-4" /> Submit</>} </Button> </CardFooter> </form> </Card> {uploadStatus === \'success\' && ( <div className="p-4 bg-green-100 border border-green-300 text-green-800 rounded-md text-sm mt-4"> Upload successful! Check <button className="font-bold underline" onClick={() => navigatePatientView(\'dashboard\')}>Dashboard</button> for status/quote. </div> )} {uploadStatus === \'error\' && ( <div className="p-4 bg-red-100 border border-red-300 text-red-800 rounded-md text-sm mt-4"> Upload failed. Try again or contact support. </div> )} </div> ); }\r\n        function QuotedPrescriptionView({ quote, navigatePatientView }) { if (!quote) { return ( <div className="space-y-6"> <Card> <CardHeader><CardTitle>Prescription Quote</CardTitle></CardHeader> <CardContent className="pt-6 text-center text-gray-500"> No quote available. Check <button className="text-blue-600 underline" onClick={() => navigatePatientView(\'dashboard\')}>dashboard</button>. </CardContent> </Card> </div> ); } const handleAddToCart = () => { alert(`Pholder: Add quote ($${quote.total.toFixed(2)}) to cart.`); }; const handlePayment = (method) => { if (method === \'medicalAid\') { const useBio = window.confirm("Simulate MA Payment:\\nUse Biometrics?"); if (useBio) { alert("Place finger... (Sim)"); setTimeout(() => { const ok = Math.random() > 0.1; alert(ok ? "Biometric OK! Processing..." : "Biometric Failed."); if(ok){ /* TODO: Update order */ } }, 1500); } else { const pin = prompt("Enter MA PIN (Sim):"); if (pin) { alert("PIN OK. Processing..."); /* TODO: Update order */ } else { alert("PIN cancelled."); } } } else { alert(`Pholder: Proceed to ${method} ($${quote.total.toFixed(2)})...`); } }; return ( <div className="space-y-6"> <Card> <CardHeader> <CardTitle>Your Prescription Quote</CardTitle> <CardDescription>Review items & checkout.</CardDescription> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="text-center">Qty</TableHead> <TableHead className="text-right">Price</TableHead> <TableHead className="text-right">Subtotal</TableHead> </TableRow> </TableHeader> <TableBody> {quote.items.map((item, index) => ( <TableRow key={index}> <TableCell className="font-medium">{item.name}</TableCell> <TableCell className="text-center">{item.qty}</TableCell> <TableCell className="text-right">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right">${(item.qty * item.price).toFixed(2)}</TableCell> </TableRow> ))} </TableBody> <TableFooter> <TableRow> <TableCell colSpan={3} className="text-right font-semibold text-base">Total:</TableCell> <TableCell className="text-right font-bold text-lg">${quote.total.toFixed(2)}</TableCell> </TableRow> </TableFooter> </Table> </CardContent> <CardFooter className="flex flex-col md:flex-row justify-between items-center gap-4 border-t pt-6"> <Button variant="outline" onClick={handleAddToCart}> <ShoppingCart className="mr-2 h-4 w-4"/> Add to Cart </Button> <div className="flex flex-wrap gap-2"> <Button onClick={() => handlePayment(\'medicalAid\')} className="bg-green-600 hover:bg-green-700"> <Fingerprint className="mr-2 h-4 w-4" /> Pay with MA </Button> <Button onClick={() => handlePayment(\'EcoCash\')}> Pay EcoCash </Button> <Button onClick={() => handlePayment(\'Other\')} variant="secondary"> Other </Button> </div> </CardFooter> </Card> </div> ); }\r\n        function MedicineVerificationModal({ isOpen, onClose, verificationData }) { if (!verificationData) return null; const { status, message, medicineName, batchNumber, expiryDate, pharmacySource, wholesaleSource, manufacturer, isAntibiotic } = verificationData; let statusIcon, statusColorClass, title, bgColorClass = "bg-white"; switch (status) { case \'verified\': statusIcon = <CheckCircle className="h-12 w-12 text-green-500" />; statusColorClass = "text-green-700"; title = "Verified"; bgColorClass = "bg-green-50"; break; case \'invalid\': statusIcon = <XCircle className="h-12 w-12 text-red-500" />; statusColorClass = "text-red-700"; title = "FAILED"; bgColorClass = "bg-red-50"; break; case \'expired\': statusIcon = <AlertTriangle className="h-12 w-12 text-yellow-500" />; statusColorClass = "text-yellow-700"; title = "EXPIRED"; bgColorClass = "bg-yellow-50"; break; default: statusIcon = <Info className="h-12 w-12 text-gray-500" />; statusColorClass = "text-gray-700"; title = "Info"; } return ( <Modal isOpen={isOpen} onClose={onClose} title={title} maxWidth="md"> <div className={`flex flex-col items-center text-center space-y-4 p-6 rounded-lg ${bgColorClass}`}> {statusIcon} <p className={`font-semibold text-lg ${statusColorClass}`}>{message}</p> {(status === \'verified\' || status === \'expired\') && ( <Card className="w-full mt-4 text-left bg-white shadow-md"> <CardHeader><CardTitle className="text-base">Details</CardTitle></CardHeader> <CardContent className="space-y-1 text-sm pt-2"> <div className="grid grid-cols-3 gap-x-2 gap-y-1"> <span className="font-medium text-gray-500">Med:</span> <span className="col-span-2 font-medium">{medicineName || \'N/A\'}</span> <span className="font-medium text-gray-500">Batch:</span> <span className="col-span-2 font-mono">{batchNumber || \'N/A\'}</span> <span className="font-medium text-gray-500">Expiry:</span> <span className={`col-span-2 ${status === \'expired\' ? \'text-red-600 font-bold\' : \'\'}`}>{expiryDate || \'N/A\'}</span> <span className="font-medium text-gray-500">Manuf:</span> <span className="col-span-2">{manufacturer || \'N/A\'}</span> <span className="font-medium text-gray-500">Whsle:</span> <span className="col-span-2">{wholesaleSource || \'N/A\'}</span> <span className="font-medium text-gray-500">Pharm:</span> <span className="col-span-2">{pharmacySource || \'N/A\'}</span> </div> </CardContent> </Card> )} {status === \'verified\' && isAntibiotic && ( <div className="mt-4 p-3 bg-yellow-100 border border-yellow-300 text-yellow-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>ABX Alert:</strong> Use only as prescribed.</span> </div> )} {status === \'invalid\' && ( <div className="mt-4 p-3 bg-red-100 border border-red-300 text-red-800 rounded text-sm font-semibold w-full flex items-center"> <AlertTriangle className="mr-2 h-5 w-5 shrink-0" /> <span><strong>Action:</strong> Do not use. Report!</span> </div> )} <Button onClick={onClose} className="mt-6" variant={status === \'invalid\' ? \'destructive\' : \'default\'}>Close</Button> </div> </Modal> ); }\r\n\r\n        // --- Pharmacy Portal & Sub-Components ---\r\n        function PharmacyPortal({ setActiveView, openVerificationModal, patientData }) {\r\n            console.log("Rendering PharmacyPortal Component");\r\n            const [pharmacySubView, setPharmacySubView] = useState(\'orders\');\r\n            const [isDispensingModalOpen, setDispensingModalOpen] = useState(false);\r\n            const [isOrderDetailsModalOpen, setOrderDetailsModalOpen] = useState(false);\r\n            const [selectedOrderForModal, setSelectedOrderForModal] = useState(null);\r\n            const [orders, setOrders] = useState(() => {\r\n                 console.log("Initializing PharmacyPortal \'orders\' state with MOCK_PHARMACY_ORDERS.");\r\n                 return JSON.parse(JSON.stringify(MOCK_PHARMACY_ORDERS));\r\n            });\r\n\r\n            const updateOrderStatus = (orderId, newStatus) => {\r\n                console.log(`(updateOrderStatus) called for ID: ${orderId}, New Status: ${newStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current status: ${order.status}. Updating to ${newStatus}.`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(order.medicalAidStatus)); return { ...order, status: newStatus, requiresAction }; } return order; })); };\r\n\r\n            const updateOrderAndMAStatus = (orderId, newOrderStatus, newMAStatus) => {\r\n                console.log(`(updateOrderAndMAStatus) called for ID: ${orderId}. New Order Status: ${newOrderStatus}, New MA Status: ${newMAStatus}`);\r\n                setOrders(prevOrders => prevOrders.map(order => { if (order.id === orderId) { console.log(` -> Found order ${orderId}. Current: Status=${order.status}, MA=${order.medicalAidStatus}.`); const updatedStatus = newOrderStatus ?? order.status; const updatedMAStatus = newMAStatus ?? order.medicalAidStatus; const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(updatedStatus) || (order.medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(updatedMAStatus)); console.log(` -> Updated state: Status=${updatedStatus}, MA=${updatedMAStatus}, RequiresAction=${requiresAction}`); return { ...order, status: updatedStatus, medicalAidStatus: updatedMAStatus, requiresAction }; } return order; })); };\r\n\r\n            const openDispensingModal = () => setDispensingModalOpen(true);\r\n            const closeDispensingModal = () => setDispensingModalOpen(false);\r\n            const openOrderDetailsModalHandler = (order) => { console.log("Opening Order Details Modal for order:", order); setSelectedOrderForModal(order); setOrderDetailsModalOpen(true); };\r\n            const closeOrderDetailsModalHandler = () => { console.log("Closing Order Details Modal"); setOrderDetailsModalOpen(false); setSelectedOrderForModal(null); };\r\n\r\n            const renderSubView = () => {\r\n                 console.log("Rendering Pharmacy SubView:", pharmacySubView);\r\n                 // Wrap sub-view rendering in try-catch for better error isolation\r\n                 try {\r\n                     switch(pharmacySubView) {\r\n                        case \'inventory\':\r\n                            console.log(" -> Attempting to render PharmacyInventory...");\r\n                            return <PharmacyInventory />; // The component we are debugging\r\n                        case \'orders\': return <OrderManagementView orders={orders} updateOrderStatus={updateOrderStatus} openOrderDetailsModal={openOrderDetailsModalHandler} />;\r\n                        case \'marketWatch\': return <MarketWatchView />;\r\n                        case \'analytics\': return <PharmacyAnalytics />;\r\n                        case \'claims\': return <MedicalAidClaimsView orders={orders} />;\r\n                        default: console.warn(`Unknown pharmacySubView: ${pharmacySubView}.`); return <div className="text-center p-8 text-gray-500">Select a view from the tabs above.</div>;\r\n                     }\r\n                 } catch (error) {\r\n                     console.error(`Error rendering pharmacy subview "${pharmacySubView}":`, error);\r\n                     // Display error prominently if sub-view fails\r\n                     return (\r\n                        <div className="text-center p-8 text-red-600 bg-red-50 border border-red-300 rounded-md">\r\n                             <h3 className="text-lg font-semibold mb-2">Error Loading \'{pharmacySubView}\' View</h3>\r\n                             <p>There was a problem rendering this section.</p>\r\n                             <p className="text-sm mt-2">Please check the browser console (F12) for technical details.</p>\r\n                             <pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || error.message}</pre>\r\n                         </div>\r\n                    );\r\n                 }\r\n            };\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <nav className="flex space-x-1 border-b overflow-x-auto">\r\n                        <Button variant={pharmacySubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'orders\')} data-state={pharmacySubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button>\r\n                        <Button variant=\'ghost\' onClick={openDispensingModal} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Pill className="mr-2 h-4 w-4" /> Dispense</Button>\r\n                        <Button variant={pharmacySubView === \'inventory\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'inventory\')} data-state={pharmacySubView === \'inventory\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Package className="mr-2 h-4 w-4" /> Inventory</Button>\r\n                        <Button variant={pharmacySubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'marketWatch\')} data-state={pharmacySubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button>\r\n                        <Button variant={pharmacySubView === \'analytics\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'analytics\')} data-state={pharmacySubView === \'analytics\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BarChart className="mr-2 h-4 w-4" /> Analytics</Button>\r\n                        <Button variant={pharmacySubView === \'claims\' ? \'secondary\' : \'ghost\'} onClick={() => setPharmacySubView(\'claims\')} data-state={pharmacySubView === \'claims\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CreditCard className="mr-2 h-4 w-4" /> Claims</Button>\r\n                        <Button variant=\'ghost\' onClick={() => alert(\'Pholder: Walk-in Quote\')} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4" /> Quote Walk-in</Button>\r\n                    </nav>\r\n                    <div className="pt-6">\r\n                       {renderSubView()}\r\n                    </div>\r\n                    <DispensingModal isOpen={isDispensingModalOpen} onClose={closeDispensingModal} />\r\n                    <OrderDetailsModal isOpen={isOrderDetailsModalOpen} onClose={closeOrderDetailsModalHandler} order={selectedOrderForModal} updateOrderAndMAStatusCallback={updateOrderAndMAStatus} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        function PharmacyInventory() {\r\n            console.log("PharmacyInventory: Component rendering started.");\r\n            const [inventory, setInventory] = useState(MOCK_PHARMACY_INVENTORY);\r\n            const [searchTerm, setSearchTerm] = useState(\'\');\r\n            const [filterCategory, setFilterCategory] = useState(\'all\');\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            console.log("PharmacyInventory: State initialized.");\r\n\r\n            const filteredInventory = useMemo(() => {\r\n                console.log("PharmacyInventory: Calculating filteredInventory memo...");\r\n                try {\r\n                    return inventory.filter(item => {\r\n                        // Added robust checks for potential null/undefined values\r\n                        const term = searchTerm.toLowerCase();\r\n                        const nameMatch = item && item.name && typeof item.name.toLowerCase === \'function\' ? item.name.toLowerCase().includes(term) : false;\r\n                        const idMatch = item && item.id && typeof item.id.toLowerCase === \'function\' ? item.id.toLowerCase().includes(term) : false;\r\n                        const categoryMatch = item && item.category && typeof item.category.toLowerCase === \'function\' ? item.category.toLowerCase().includes(term) : false;\r\n                        const matchesSearch = nameMatch || idMatch || categoryMatch;\r\n\r\n                        const matchesCategory = filterCategory === \'all\' || (item && item.category === filterCategory);\r\n                        const matchesStatus = filterStatus === \'all\' || (item && item.status === filterStatus);\r\n                        return matchesSearch && matchesCategory && matchesStatus;\r\n                    });\r\n                } catch(error) {\r\n                    console.error("PharmacyInventory: Error during filtering:", error);\r\n                    return []; // Return empty array on error\r\n                }\r\n            }, [inventory, searchTerm, filterCategory, filterStatus]);\r\n\r\n            const categories = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating categories memo...");\r\n                 try {\r\n                    const uniqueCategories = new Set(inventory.map(item => item?.category).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueCategories)].sort();\r\n                 } catch (error) {\r\n                    console.error("PharmacyInventory: Error calculating categories:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            const statuses = useMemo(() => {\r\n                 console.log("PharmacyInventory: Calculating statuses memo...");\r\n                 try {\r\n                    const uniqueStatuses = new Set(inventory.map(item => item?.status).filter(Boolean));\r\n                    return [\'all\', ...Array.from(uniqueStatuses)];\r\n                 } catch(error) {\r\n                    console.error("PharmacyInventory: Error calculating statuses:", error);\r\n                    return [\'all\'];\r\n                 }\r\n            }, [inventory]);\r\n\r\n            console.log("PharmacyInventory: Memos calculated. Filtered count:", filteredInventory.length);\r\n\r\n            const handleAddItem = () => alert(\'Pholder: Add Item Modal\');\r\n            const handleEditItem = (itemId) => alert(`Pholder: Edit Modal ${itemId}`);\r\n            const handleOrderFromWholesaler = () => alert(\'Pholder: Wholesaler Order UI\');\r\n\r\n            console.log("PharmacyInventory: Preparing to return JSX.");\r\n\r\n            // Wrap the entire JSX return in a try-catch as a last resort for rendering errors\r\n            try {\r\n                return (\r\n                    <div className="space-y-6">\r\n                        {/* Header */}\r\n                        <header className="flex flex-wrap justify-between items-center pb-4 gap-4 border-b">\r\n                            <div> <h2 className="text-xl font-semibold">Inventory Management</h2> <p className="text-gray-500 text-sm">Manage stock & details.</p> </div>\r\n                            <div className="flex items-center space-x-2 flex-wrap gap-2"> <Button variant="outline" size="sm" onClick={handleOrderFromWholesaler}><Truck className="mr-2 h-4 w-4" /> Order Stock</Button> <Button size="sm" onClick={handleAddItem}><PlusCircle className="mr-2 h-4 w-4" /> Add Item</Button> </div>\r\n                        </header>\r\n                        {/* Filters */}\r\n                        <Card>\r\n                            <CardContent className="pt-6 flex flex-wrap items-center gap-4">\r\n                                <div className="relative flex-grow min-w-[200px]"><Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400" /><Input placeholder="Search Name, ID, Category..." className="pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="cat-filter" className="sr-only">Category</Label><Select id="cat-filter" value={filterCategory} onChange={(e) => setFilterCategory(e.target.value)} className="w-full">{categories.map(cat => (<SelectItem key={cat} value={cat}>{cat === \'all\' ? \'All Categories\' : cat}</SelectItem>))}</Select></div>\r\n                                <div className="flex items-center gap-2 min-w-[150px] flex-grow sm:flex-grow-0"><Label htmlFor="stat-filter" className="sr-only">Status</Label><Select id="stat-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-full">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                            </CardContent>\r\n                        </Card>\r\n                        {/* Table */}\r\n                        <Card>\r\n                            <CardHeader><CardTitle>Medicine Stock List</CardTitle></CardHeader>\r\n                            <CardContent className="pt-4">\r\n                                <Table>\r\n                                    <TableHeader><TableRow><TableHead>ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Stock</TableHead><TableHead className="text-right">Price</TableHead><TableHead>Status</TableHead><TableHead>Supplier</TableHead><TableHead>Updated</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                    <TableBody>\r\n                                        {filteredInventory.length > 0 ? (\r\n                                            filteredInventory.map((item) => (\r\n                                                item && item.id ? (\r\n                                                    <TableRow key={item.id} className={item.stock === 0 ? \'opacity-60 bg-gray-50\' : item.stock < 10 ? \'bg-yellow-50/70\' : \'\'}>\r\n                                                        <TableCell className="font-mono text-xs">{item.id}</TableCell>\r\n                                                        <TableCell className="font-medium">{item.name || \'N/A\'}</TableCell>\r\n                                                        <TableCell>{item.category || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right font-semibold">{typeof item.stock === \'number\' ? item.stock : \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-right">{(typeof item.price === \'number\' ? item.price : 0).toFixed(2)}</TableCell>\r\n                                                        <TableCell><Badge variant={getStatusBadgeVariant(item.status)}>{item.status || \'N/A\'}</Badge></TableCell>\r\n                                                        <TableCell>{item.supplier || \'N/A\'}</TableCell>\r\n                                                        <TableCell className="text-xs">{item.lastUpdated || \'N/A\'}</TableCell>\r\n                                                        <TableCell><Button variant="ghost" size="sm" onClick={() => handleEditItem(item.id)}>Edit</Button></TableCell>\r\n                                                    </TableRow>\r\n                                                ) : null\r\n                                            ))\r\n                                        ) : (\r\n                                            <TableRow><TableCell colSpan={9} className="h-24 text-center text-gray-500">No inventory items match the current filters.</TableCell></TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </CardContent>\r\n                            <CardFooter className="pt-4 justify-between items-center border-t">\r\n                                <p className="text-sm text-gray-500">Showing {filteredInventory.length} of {inventory.length} items.</p>\r\n                                <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                            </CardFooter>\r\n                        </Card>\r\n                    </div>\r\n                );\r\n            } catch (error) {\r\n                console.error("PharmacyInventory: Error during JSX rendering:", error);\r\n                return <div className="p-4 text-red-600 bg-red-50 border border-red-300 rounded">Error rendering inventory table. Check console. <pre>{error.stack}</pre></div>;\r\n            }\r\n        }\r\n\r\n        function OrderManagementView({ orders, updateOrderStatus, openOrderDetailsModal }) {\r\n            console.log("Rendering OrderManagementView. Received orders prop:", orders);\r\n            const [filterStatus, setFilterStatus] = useState(\'all\');\r\n            const validOrders = Array.isArray(orders) ? orders : [];\r\n            if (!Array.isArray(orders)) { console.error("OrderManagementView received non-array \'orders\' prop:", orders); }\r\n            const statuses = useMemo(() => { if (!validOrders.length) return [\'all\']; const validStatuses = validOrders.map(order => order?.status).filter(Boolean); return [\'all\', ...new Set(validStatuses)].sort(); }, [validOrders]);\r\n            const filteredOrders = useMemo(() => { if (!validOrders.length) return []; if (filterStatus === \'all\') return validOrders; return validOrders.filter(order => order?.status === filterStatus); }, [validOrders, filterStatus]);\r\n            console.log(`OrderManagementView: Filter Status=\'${filterStatus}\', Filtered Orders Count=${filteredOrders.length}`);\r\n\r\n            return (\r\n                <div className="space-y-6">\r\n                    <header className="pb-4 flex flex-wrap justify-between items-center gap-4 border-b">\r\n                        <div><h2 className="text-xl font-semibold">Order Management</h2><p className="text-gray-500 text-sm">View and manage incoming patient orders.</p></div>\r\n                        <div className="flex items-center gap-2"><Label htmlFor="order-status-filter" className="text-sm">Filter by Status:</Label><Select id="order-status-filter" value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)} className="w-40">{statuses.map(stat => (<SelectItem key={stat} value={stat}>{stat === \'all\' ? \'All Statuses\' : stat}</SelectItem>))}</Select></div>\r\n                    </header>\r\n                    <Card>\r\n                        <CardHeader><CardTitle>Incoming & Recent Orders</CardTitle></CardHeader>\r\n                        <CardContent className="pt-4">\r\n                            <Table>\r\n                                <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Patient</TableHead><TableHead>Date</TableHead><TableHead>Status</TableHead><TableHead className="text-right">Total</TableHead><TableHead>Medical Aid</TableHead><TableHead>Payment</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\r\n                                <TableBody>\r\n                                    {filteredOrders.length > 0 ? (\r\n                                        filteredOrders.map((order) => ( order && order.id ? ( <TableRow key={order.id} className={order.requiresAction ? \'bg-blue-50/70 hover:bg-blue-100/50\' : \'\'}>\r\n                                                    <TableCell className="font-mono text-xs">{order.id}</TableCell>\r\n                                                    <TableCell>{order.patientName || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.date || \'N/A\'}</TableCell>\r\n                                                    <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status || \'N/A\'}</Badge></TableCell>\r\n                                                    <TableCell className="text-right font-medium">${(typeof order.total === \'number\' ? order.total : 0).toFixed(2)}</TableCell>\r\n                                                    <TableCell>{order.medicalAidProvider ? (<Badge variant={getClaimStatusVariant(order.medicalAidStatus)}>{order.medicalAidStatus || \'N/A\'}</Badge>) : (<Badge variant="outline">N/A</Badge>)}</TableCell>\r\n                                                    <TableCell className="text-xs">{order.paymentMethod || \'N/A\'}</TableCell>\r\n                                                    <TableCell className="space-x-1 whitespace-nowrap">\r\n                                                        <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => openOrderDetailsModal(order)}>Details</Button>\r\n                                                        {order.status === \'Pending Approval\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Approve</Button>}\r\n                                                        {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => updateOrderStatus(order.id, \'Ready for Pickup\')}>Ready</Button>}\r\n                                                        {order.status === \'Ready for Pickup\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Completed\')}>Complete</Button>}\r\n                                                        {order.status === \'Pending Payment\' && <Button variant="success" size="sm" onClick={() => updateOrderStatus(order.id, \'Processing\')}>Mark Paid</Button> }\r\n                                                    </TableCell>\r\n                                                </TableRow> ) : null\r\n                                        ))\r\n                                    ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No orders match the selected filter.</TableCell></TableRow> )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </CardContent>\r\n                        <CardFooter className="pt-4 border-t justify-between items-center">\r\n                             <p className="text-sm text-gray-500">Showing {filteredOrders.length} of {validOrders.length} orders.</p>\r\n                             <div className="flex space-x-1"><Button variant="outline" size="sm" disabled>Previous</Button><Button variant="outline" size="sm" disabled>Next</Button></div>\r\n                        </CardFooter>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        }\r\n        function OrderDetailsModal({ isOpen, onClose, order, updateOrderAndMAStatusCallback }) {\r\n            const [internalOrderData, setInternalOrderData] = useState(null);\r\n            useEffect(() => { console.log("OrderDetailsModal Effect: Received order prop:", order); if (order && (!internalOrderData || internalOrderData.id !== order.id)) { console.log(` -> Updating internal state for order ID: ${order.id}`); setInternalOrderData({ ...order }); } else if (!order && internalOrderData) { console.log(" -> Clearing internal state as order prop is null/undefined."); setInternalOrderData(null); } }, [order]);\r\n            if (!isOpen || !internalOrderData) { return null; }\r\n            const { id, patientName, date, status, total, items, medicalAidStatus, amountCovered, medicalAidProvider, paymentMethod } = internalOrderData;\r\n            console.log(`OrderDetailsModal Rendering content for Order ID: ${id}`);\r\n            const showClaimButton = medicalAidProvider && (medicalAidStatus === \'Received\' || medicalAidStatus === \'Pending Patient Auth\');\r\n            const showMarkPaidButton = status === \'Pending Payment\';\r\n            const showApproveButton = status === \'Pending Approval\';\r\n            const showReadyButton = status === \'Processing\';\r\n            const showCompleteButton = status === \'Ready for Pickup\' || status === \'Out for Delivery\';\r\n            const handleClaimSubmit = () => { const newMAStatus = \'Claim Submitted\'; console.log(`Modal action: Submitting claim for ${id}, setting MA status to ${newMAStatus}`); setInternalOrderData(prev => prev ? { ...prev, medicalAidStatus: newMAStatus, requiresAction: false } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, null, newMAStatus); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Claim Submitted for ${id}`); };\r\n            const handleStatusUpdate = (newStatus) => { console.log(`Modal action: Updating status for ${id} to ${newStatus}`); const requiresAction = [\'Pending Approval\', \'Pending Payment\'].includes(newStatus) || (medicalAidProvider && [\'Received\', \'Pending Patient Auth\'].includes(medicalAidStatus)); setInternalOrderData(prev => prev ? { ...prev, status: newStatus, requiresAction } : null); if (typeof updateOrderAndMAStatusCallback === \'function\') { updateOrderAndMAStatusCallback(id, newStatus, null); } else { console.warn("updateOrderAndMAStatusCallback function is missing in OrderDetailsModal"); } alert(`Pholder: Order ${id} updated to ${newStatus}.`); };\r\n            const orderItems = Array.isArray(items) ? items : [];\r\n\r\n            return (\r\n                <Modal isOpen={isOpen} onClose={onClose} title={`Order Details: ${id}`} maxWidth="xl">\r\n                    <div className="space-y-4">\r\n                        <Card><CardHeader><CardTitle className="text-base">Order Information</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Patient:</span> <span className="font-medium">{patientName || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Date:</span> <span>{date || \'N/A\'}</span></div><div><span className="text-gray-500 mr-2">Status:</span> <span><Badge variant={getStatusBadgeVariant(status)}>{status || \'N/A\'}</Badge></span></div><div><span className="text-gray-500 mr-2">Total:</span> <span className="font-semibold">${(typeof total === \'number\' ? total : 0).toFixed(2)}</span></div><div><span className="text-gray-500 mr-2">Payment Method:</span> <span>{paymentMethod || \'N/A\'}</span></div></CardContent></Card>\r\n                        <Card><CardHeader><CardTitle className="text-base">Items in Order</CardTitle></CardHeader><CardContent className="pt-4">{orderItems.length > 0 ? (<ul className="space-y-1 text-sm">{orderItems.map((item, index) => ( <li key={item.id || index} className="flex justify-between border-b py-1 last:border-0"><span>{item.qty || 0} x {item.name || \'Unknown Item\'}</span></li> ))}</ul>) : (<p className="text-sm text-gray-500 italic">No items listed for this order.</p>)}</CardContent></Card>\r\n                        {medicalAidProvider && ( <Card><CardHeader><CardTitle className="text-base">Medical Aid Details</CardTitle></CardHeader><CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2 text-sm"><div><span className="text-gray-500 mr-2">Provider:</span> <span>{medicalAidProvider}</span></div><div><span className="text-gray-500 mr-2">Claim Status:</span> <Badge variant={getClaimStatusVariant(medicalAidStatus)}>{medicalAidStatus || \'N/A\'}</Badge></div><div><span className="text-gray-500 mr-2">Amount Covered:</span> <span className="font-semibold">${(typeof amountCovered === \'number\' ? amountCovered : 0).toFixed(2)}</span></div>{showClaimButton && ( <div className="md:col-span-2 mt-2"><Button onClick={handleClaimSubmit} size="sm" variant="success"><FileCheck className="mr-2 h-4 w-4" /> Submit Claim Now</Button></div> )}</CardContent></Card> )}\r\n                        <div className="flex flex-wrap justify-between items-center gap-3 border-t pt-4 mt-4">\r\n                            <div className="flex flex-wrap gap-2">{showApproveButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm">Approve Order</Button>}{showReadyButton && <Button onClick={() => handleStatusUpdate(\'Ready for Pickup\')} size="sm">Mark Ready for Pickup</Button>}{showCompleteButton && <Button onClick={() => handleStatusUpdate(\'Completed\')} size="sm" variant="success">Mark as Completed</Button>}{showMarkPaidButton && <Button onClick={() => handleStatusUpdate(\'Processing\')} size="sm" variant="success">Mark as Paid</Button> }</div>\r\n                            <Button variant="outline" onClick={onClose}>Close</Button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            );\r\n        }\r\n        function DispensingModal({ isOpen, onClose }) { const [patientSearchTerm, setPatientSearchTerm] = useState(\'\'); const [selectedPatient, setSelectedPatient] = useState(null); const [medicineSearchTerm, setMedicineSearchTerm] = useState(\'\'); const [dispensingCart, setDispensingCart] = useState([]); const [inventory] = useState(MOCK_PHARMACY_INVENTORY); const handlePatientSearch = () => { const term = patientSearchTerm.toLowerCase(); const foundPatient = MOCK_PHARMACY_ORDERS.find(o => o.patientName.toLowerCase().includes(term) || o.patientId?.toLowerCase() === term); if (foundPatient) { setSelectedPatient({ id: foundPatient.patientId, name: foundPatient.patientName }); setPatientSearchTerm(\'\'); } else { setSelectedPatient(null); alert(\'Patient not found.\'); } }; const filteredInventory = useMemo(() => { if (!medicineSearchTerm) return []; return inventory.filter(item => item.name.toLowerCase().includes(medicineSearchTerm.toLowerCase()) && item.stock > 0); }, [medicineSearchTerm, inventory]); const addToCart = (medItem) => { const existingItemIndex = dispensingCart.findIndex(item => item.id === medItem.id); if (existingItemIndex > -1) { const currentQty = dispensingCart[existingItemIndex].qty; if (currentQty < medItem.stock) { setDispensingCart(prevCart => prevCart.map((item, index) => index === existingItemIndex ? { ...item, qty: item.qty + 1 } : item)); } else { alert(`Max stock (${medItem.stock}) reached for ${medItem.name}`); } } else { if (medItem.stock > 0) { setDispensingCart(prevCart => [...prevCart, { id: medItem.id, name: medItem.name, qty: 1, price: medItem.price, stock: medItem.stock }]); } else { alert(`${medItem.name} is out of stock.`); } } setMedicineSearchTerm(\'\'); }; const updateQty = (itemId, newQtyStr) => { const newQty = parseInt(newQtyStr, 10); if (isNaN(newQty)) return; const itemInCart = dispensingCart.find(item => item.id === itemId); if (!itemInCart) return; if (newQty <= 0) { setDispensingCart(prevCart => prevCart.filter(item => item.id !== itemId)); } else if (newQty <= itemInCart.stock) { setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: newQty } : item)); } else { alert(`Quantity (${newQty}) exceeds stock (${itemInCart.stock}). Maximum quantity set.`); setDispensingCart(prevCart => prevCart.map(item => item.id === itemId ? { ...item, qty: itemInCart.stock } : item)); } }; const calculateTotal = () => dispensingCart.reduce((total, item) => total + (item.qty * item.price), 0); const handleDispenseAndSendToPOS = () => { if (!selectedPatient && !window.confirm("No patient selected. Proceed as Walk-in Sale?")) return; if (dispensingCart.length === 0) { alert("Cart is empty."); return; } const patientInfo = selectedPatient || { id: \'WALK-IN\', name: \'Walk-in Customer\' }; const saleData = { patient: patientInfo, items: dispensingCart, total: calculateTotal(), timestamp: new Date().toISOString(), type: \'Dispensed\' }; console.log("-> Sending to POS:", saleData); alert(`Dispensed for ${patientInfo.name}. Total: $${saleData.total.toFixed(2)}. (Simulated POS send)`); handleReset(); onClose(); }; const handleReset = () => { setPatientSearchTerm(\'\'); setSelectedPatient(null); setMedicineSearchTerm(\'\'); setDispensingCart([]); }; return ( <Modal isOpen={isOpen} onClose={onClose} title="Dispense / Walk-in Sale" maxWidth="4xl"> <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-[70vh]"> <div className="lg:col-span-1 space-y-4 flex flex-col"> <Card className="flex-shrink-0"> <CardHeader><CardTitle className="text-base">1. Select Patient</CardTitle></CardHeader> <CardContent className="pt-2 space-y-2"> <div className="flex gap-2 items-center"> <Input placeholder="Search Name/ID or leave blank..." value={patientSearchTerm} onChange={(e) => setPatientSearchTerm(e.target.value)}/> <Button onClick={handlePatientSearch} size="sm" variant="outline">Find</Button> </div> {selectedPatient ? ( <div className="p-2 bg-green-100 rounded text-sm font-medium text-green-800">Selected: {selectedPatient.name}</div> ) : ( <div className="p-2 bg-yellow-100 rounded text-sm text-yellow-800">Default: Walk-in Sale</div> )} </CardContent> </Card> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">2. Add Medicines</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow flex flex-col"> <Input placeholder="Search Medicine Name..." value={medicineSearchTerm} onChange={(e) => setMedicineSearchTerm(e.target.value)} className="mb-2"/> <div className="mt-1 border rounded-md overflow-y-auto flex-grow bg-gray-50 min-h-[150px]"> {medicineSearchTerm && filteredInventory.length > 0 ? ( filteredInventory.map(item => ( <div key={item.id} className="p-2 hover:bg-blue-100 cursor-pointer flex justify-between items-center border-b" onClick={() => addToCart(item)}> <span className="text-sm">{item.name} <span className="text-xs text-gray-500">(Stock: {item.stock})</span></span> <span className="text-sm font-semibold">${item.price.toFixed(2)}</span> </div> )) ) : medicineSearchTerm ? ( <p className="text-sm text-red-500 p-4 text-center italic">No matching medicine found in stock.</p> ) : ( <p className="text-sm text-gray-400 p-4 text-center italic">Type above to search medicines...</p> )} </div> </CardContent> </Card> </div> <div className="lg:col-span-2 space-y-4 flex flex-col"> <Card className="flex-grow flex flex-col"> <CardHeader><CardTitle className="text-base">3. Review Cart</CardTitle></CardHeader> <CardContent className="pt-2 flex-grow overflow-y-auto"> {dispensingCart.length > 0 ? ( <Table> <TableHeader> <TableRow> <TableHead>Medicine</TableHead> <TableHead className="w-24 text-center">Qty</TableHead> <TableHead className="w-20 text-right">Price</TableHead> <TableHead className="w-24 text-right">Subtotal</TableHead> <TableHead className="w-10 text-center">Rem</TableHead> </TableRow> </TableHeader> <TableBody> {dispensingCart.map(item => ( <TableRow key={item.id}> <TableCell className="text-sm">{item.name}</TableCell> <TableCell> <Input type="number" min="1" max={item.stock} value={item.qty} onChange={(e) => updateQty(item.id, e.target.value)} className="h-8 w-16 text-center p-1"/> </TableCell> <TableCell className="text-right text-sm">${item.price.toFixed(2)}</TableCell> <TableCell className="text-right text-sm font-medium">${(item.qty * item.price).toFixed(2)}</TableCell> <TableCell className="text-center"> <button onClick={() => updateQty(item.id, 0)} className="text-red-500 hover:text-red-700 p-1 font-bold" title="Remove">&times;</button> </TableCell> </TableRow> ))} </TableBody> </Table> ) : ( <p className="text-center text-gray-500 py-10 italic">Cart is currently empty. Add medicines from the left.</p> )} </CardContent> {dispensingCart.length > 0 && ( <CardFooter className="border-t pt-3 flex justify-end items-center"> <span className="text-sm font-semibold mr-2">Total Amount:</span> <span className="font-bold text-xl text-blue-700">${calculateTotal().toFixed(2)}</span> </CardFooter> )} </Card> <div className="flex justify-between gap-3 pt-4 border-t flex-shrink-0"> <Button variant="outline" onClick={handleReset}>Clear Cart</Button> <div className="flex gap-3"> <Button variant="secondary" onClick={onClose}>Cancel</Button> <Button onClick={handleDispenseAndSendToPOS} disabled={dispensingCart.length === 0}> <MonitorSmartphone className="mr-2 h-4 w-4" /> Dispense & Send to POS </Button> </div> </div> </div> </div> </Modal> ); }\r\n        function PharmacyAnalytics() { return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Analytics & Reports</h2> <p className="text-gray-500 text-sm">Performance insights.</p> </header> <Card> <CardHeader><CardTitle>Key Performance Indicators (KPIs)</CardTitle></CardHeader> <CardContent className="pt-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Sales (Today)</p><p className="text-2xl font-bold text-blue-800">$1,234</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Orders (Today)</p><p className="text-2xl font-bold text-green-800">42</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Low Stock Items</p><p className="text-2xl font-bold text-yellow-900">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Low Stock\').length}</p></div> <div className="p-4 bg-red-50 rounded border border-red-200"><p className="text-xs uppercase text-red-600 font-medium">Out of Stock</p><p className="text-2xl font-bold text-red-800">{MOCK_PHARMACY_INVENTORY.filter(i => i.status === \'Out of Stock\').length}</p></div> </CardContent> </Card> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader><CardTitle>Monthly Sales Trend</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><BarChartComponent data={MOCK_SALES_DATA} /></ResponsiveContainer></CardContent> </Card> <Card> <CardHeader><CardTitle>Top Selling Categories</CardTitle></CardHeader> <CardContent className="pt-4"><ResponsiveContainer><LineChart data={[{name:\'Pain\', v:40}, {name:\'ABX\', v:30}, {name:\'Vit\', v:25}]} /></ResponsiveContainer></CardContent> </Card> </div> <Card> <CardHeader><CardTitle>Generate Custom Reports</CardTitle></CardHeader> <CardContent className="pt-4 space-y-3"> <p className="text-sm text-gray-600">Select report type and date range to generate.</p> <div className="flex flex-wrap gap-4 items-end"> <div className="flex-grow min-w-[150px]"> <Label htmlFor="report-type">Report Type</Label> <Select id="report-type" className="mt-1"> <SelectItem value="daily_sales">Daily Sales Summary</SelectItem> <SelectItem value="monthly_sales">Monthly Sales Report</SelectItem> <SelectItem value="sales_tender">Sales by Tender Type</SelectItem> <SelectItem value="sales_user">Sales by User</SelectItem> <SelectItem value="stock_level">Current Stock Levels</SelectItem> <SelectItem value="stock_usage">Stock Usage Report</SelectItem> <SelectItem value="stock_expiry">Stock Expiry Report</SelectItem> <SelectItem value="debtors">Debtors List</SelectItem> <SelectItem value="inv_valuation">Inventory Valuation</SelectItem> </Select> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="start-date">Start Date</Label> <Input id="start-date" type="date" className="mt-1"/> </div> <div className="flex-grow min-w-[120px]"> <Label htmlFor="end-date">End Date</Label> <Input id="end-date" type="date" className="mt-1"/> </div> <Button onClick={() => alert(\'Pholder: Generate selected report\')}><FileCheck className="mr-2 h-4 w-4"/> Generate Report</Button> </div> </CardContent> </Card> </div> ); }\r\n        function MedicalAidClaimsView({ orders }) { const validOrders = Array.isArray(orders) ? orders : []; const claimsData = validOrders.filter(o => o && o.medicalAidProvider).map(o => ({ id: `CLAIM-${o.id}`, orderId: o.id, patientName: o.patientName || \'N/A\', provider: o.medicalAidProvider, date: o.date || \'N/A\', amountClaimed: (typeof o.amountCovered === \'number\' ? o.amountCovered : 0), status: o.medicalAidStatus || \'N/A\', })); return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Medical Aid Claims Management</h2> <p className="text-gray-500 text-sm">Track and manage medical aid claims.</p> </header> <Card> <CardHeader><CardTitle>Claim Status Overview</CardTitle> </CardHeader> <CardContent className="pt-4"> <Table> <TableHeader> <TableRow> <TableHead>Claim ID</TableHead><TableHead>Order ID</TableHead><TableHead>Patient</TableHead> <TableHead>Provider</TableHead><TableHead>Date</TableHead> <TableHead className="text-right">Claimed Amt</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead> </TableRow> </TableHeader> <TableBody> {claimsData.length > 0 ? ( claimsData.map(claim => ( <TableRow key={claim.id}> <TableCell className="font-mono text-xs">{claim.id}</TableCell><TableCell className="font-mono text-xs">{claim.orderId}</TableCell> <TableCell>{claim.patientName}</TableCell><TableCell>{claim.provider}</TableCell> <TableCell className="text-xs">{claim.date}</TableCell><TableCell className="text-right font-medium">${claim.amountClaimed.toFixed(2)}</TableCell> <TableCell><Badge variant={getClaimStatusVariant(claim.status)}>{claim.status}</Badge></TableCell> <TableCell className="space-x-1 whitespace-nowrap"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Claim Details ${claim.id}`)}>Details</Button> {claim.status === \'Received\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Submit Claim ${claim.id}`)}>Submit</Button>} {claim.status === \'Pending Patient Auth\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Request Auth ${claim.id}`)} disabled>Req. Auth</Button>} {claim.status === \'Claim Rejected\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Resubmit Claim ${claim.id}`)}>Resubmit</Button>} {claim.status === \'Claim Submitted\' && <Badge variant="info" className="ml-2">Submitted</Badge>} {claim.status === \'Paid\' && <Badge variant="success" className="ml-2">Paid</Badge>} </TableCell> </TableRow> )) ) : ( <TableRow><TableCell colSpan={8} className="h-24 text-center text-gray-500">No medical aid claims found.</TableCell></TableRow> )} </TableBody> </Table> </CardContent> <CardFooter className="pt-4 border-t"> <p className="text-sm text-gray-500">Showing {claimsData.length} claims.</p> </CardFooter> </Card> <Card> <CardHeader><CardTitle>Claims Summary & Analytics</CardTitle></CardHeader> <CardContent className="pt-4 text-center italic text-gray-400"> Placeholder: Charts visualizing claims status (Pending, Submitted, Paid, Rejected), claim amounts by provider, aging analysis, etc. </CardContent> </Card> </div> ); }\r\n        function MarketWatchView() { const data = MOCK_MARKET_WATCH_DATA; const adverts = MOCK_ADVERTS; const getTrendIcon = (trendString) => { if (!trendString) return null; if (trendString.includes(\'+\') || trendString.toLowerCase().includes(\'high\') || trendString.toLowerCase().includes(\'increase\')) return <TrendingUp className="h-4 w-4 text-green-600 inline ml-1" />; if (trendString.includes(\'-\') || trendString.toLowerCase().includes(\'low\') || trendString.toLowerCase().includes(\'decrease\')) return <TrendingDown className="h-4 w-4 text-red-600 inline ml-1" />; return null; }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <div> <h2 className="text-xl font-semibold">Market Watch Insights</h2> <p className="text-gray-500 text-sm">AI-powered intelligence on market trends, demand, and stock levels.</p> </div> </header> <div className="grid grid-cols-1 lg:grid-cols-3 gap-6"> <Card className="lg:col-span-3 bg-gradient-to-r from-blue-50 via-indigo-50 to-purple-50 border-blue-200"> <CardHeader> <CardTitle className="flex items-center text-blue-800"><Cpu className="mr-2 h-5 w-5" /> AI-Driven Insights</CardTitle> <CardDescription>Real-time analysis and actionable recommendations.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-3"> {data.aiInsights.map((insight, index) => ( <div key={index} className="text-sm p-3 bg-white/70 rounded border border-blue-100 shadow-sm flex items-start gap-2"> <Info className="h-4 w-4 text-blue-600 mt-0.5 shrink-0"/> <div> <p className=" text-gray-800">{insight}</p> <p className="text-xs text-blue-600 mt-1 italic">Source: ehutano+ AI Engine</p> </div> </div> ))} </CardContent> </Card> <Card className="lg:col-span-2"> <CardHeader> <CardTitle className="flex items-center"><Activity className="mr-2 h-5 w-5 text-orange-600" /> Product Trends & Demand Signals</CardTitle> <CardDescription>Monitor fast-moving items, high demand, and pricing changes.</CardDescription> </CardHeader> <CardContent className="pt-4 space-y-4"> <div> <h4 className="font-semibold mb-2 flex items-center"><TrendingUp className="mr-2 h-4 w-4 text-green-600"/> Fast Moving Items</h4> {data.fastMoving.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="trendUp">{item.trend} {getTrendIcon(item.trend)}</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><Users className="mr-2 h-4 w-4 text-red-600"/> High Demand Indicators</h4> {data.highDemand.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.reason}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant="warning">High Demand</Badge> </div> ))} </div> <div className="pt-4 border-t"> <h4 className="font-semibold mb-2 flex items-center"><DollarSign className="mr-2 h-4 w-4 text-indigo-600" /> Price Change Alerts</h4> {data.priceAlerts.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0 flex justify-between items-center hover:bg-gray-50"> <div><p>{item.name}</p><p className="text-xs text-gray-500">{item.note}</p><p className="text-xs text-gray-400 italic">{item.source}</p></div> <Badge variant={item.change.startsWith(\'+\') ? \'trendDown\' : \'trendUp\'}>{item.change} {getTrendIcon(item.change)}</Badge> </div> ))} </div> </CardContent> </Card> <Card className="lg:col-span-1 flex flex-col space-y-4"> <div> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackageX className="mr-2 h-5 w-5 text-red-600" /> Stock Alerts</CardTitle> <CardDescription>Out-of-stock & low stock items.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 max-h-48 overflow-y-auto"> {data.stockOuts.map(item => ( <div key={item.id} className={`text-sm p-2 rounded border ${getStatusBadgeVariant(item.status)===\'destructive\' ? \'bg-red-50 border-red-200\' : \'bg-yellow-50 border-yellow-200\'}`}> <p className="font-medium">{item.name} <Badge variant={getStatusBadgeVariant(item.status)}>{item.status}</Badge></p> <p className="text-xs">Supplier: {item.supplier} | {item.note}</p> <p className="text-xs italic text-gray-500">Source: {item.source}</p> </div> ))} </CardContent> </div> <div className="border-t flex-grow flex flex-col"> <CardHeader className="pb-2"> <CardTitle className="flex items-center text-base"><PackagePlus className="mr-2 h-5 w-5 text-cyan-600" /> New Market Arrivals</CardTitle> <CardDescription>Newly registered or imported.</CardDescription> </CardHeader> <CardContent className="pt-2 space-y-2 flex-grow overflow-y-auto"> <h5 className="text-xs font-semibold uppercase text-gray-500">Newly Registered (via MCAZ)</h5> {data.newlyRegistered.map(item => ( <div key={item.id} className="text-sm p-2 border-b"><p>{item.name}</p><p className="text-xs">Supplier: {item.supplier} (Registered: {item.date})</p></div> ))} <h5 className="text-xs font-semibold uppercase text-gray-500 pt-2 mt-2">Recently Imported</h5> {data.recentlyImported.map(item => ( <div key={item.id} className="text-sm p-2 border-b last:border-b-0"><p>{item.name}</p><p className="text-xs">Source: {item.source} | Arrived: {item.arrival}</p><p className="text-xs">Distributor: {item.distributor}</p></div> ))} </CardContent> </div> </Card> <Card className="lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center"><Megaphone className="mr-2 h-5 w-5 text-purple-600" /> Industry Adverts (MCAZ Approved)</CardTitle> <CardDescription>Approved promotions & announcements.</CardDescription> </CardHeader> <CardContent className="pt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {adverts.map(ad => ( <a key={ad.id} href={ad.link} target="_blank" rel="noopener noreferrer" className="block group border rounded overflow-hidden hover:shadow-md bg-white transition-shadow"> <img src={ad.imageUrl} alt={ad.title} className="w-full h-24 object-cover"/> <div className="p-3"> <p className="text-sm font-medium mb-1 group-hover:text-blue-600">{ad.title}</p> <p className="text-xs text-gray-500">{ad.type}</p> <p className="text-xs text-gray-400 mt-2">Ref: {ad.approvedBy}</p> </div> </a> ))} </CardContent> </Card> </div> </div> ); }\r\n\r\n        // --- Doctor Portal ---\r\n        function DoctorPortal({ setActiveView }) { const [activeSubView, setActiveSubView] = useState(\'dashboard\'); const mockPatients = [ { id: \'PAT101\', name: \'Tendai Moyo\', lastVisit: \'2025-03-20\', condition: \'Hypertension\' }, { id: \'PAT102\', name: \'Alice Banda\', lastVisit: \'2025-04-10\', condition: \'Diabetes Type 2\' }, { id: \'PAT103\', name: \'John Doe\', lastVisit: \'2025-04-22\', condition: \'Check-up\' }, ]; const mockAppointments = [ { id: \'APP001\', time: \'09:00\', patientName: \'Jane Smith\', reason: \'Follow-up\' }, { id: \'APP002\', time: \'09:30\', patientName: \'Peter Jones\', reason: \'New Consult\' }, { id: \'APP003\', time: \'10:00\', patientName: \'Tendai Moyo\', reason: \'BP Check\' }, ]; const renderContent = () => { switch (activeSubView) { case \'patients\': return ( <Card> <CardHeader><CardTitle>Patient Records</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Patients..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Patient ID</TableHead><TableHead>Name</TableHead><TableHead>Last Visit</TableHead><TableHead>Primary Condition</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockPatients.map(p => ( <TableRow key={p.id}> <TableCell className="font-mono text-xs">{p.id}</TableCell><TableCell>{p.name}</TableCell><TableCell>{p.lastVisit}</TableCell><TableCell>{p.condition}</TableCell> <TableCell><Button variant="link" size="sm" onClick={() => alert(`Pholder: View Patient Record ${p.name}`)}>View Record</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'prescriptions\': return ( <Card> <CardHeader><CardTitle>Electronic Prescriptions (E-Rx)</CardTitle></CardHeader> <CardContent className="pt-4 space-y-4"> <Button onClick={() => alert(\'Pholder: Open New E-Rx Form Modal\')}> <PlusCircle className="mr-2 h-4 w-4"/> Create New Prescription </Button> <div><h4 className="font-medium mb-2">Recently Issued Prescriptions</h4><p className="text-sm text-gray-500">Placeholder: List of recent Rxs with status (Sent, Filled, Pending).</p></div> <img src="https://placehold.co/600x150/e0f2f7/0891b2?text=E-Rx+List+Mockup" alt="E-Rx List Placeholder" className="mt-4 rounded border"/> </CardContent> </Card> ); case \'appointments\': return ( <Card> <CardHeader><CardTitle>Today\'s Schedule</CardTitle></CardHeader> <CardContent className="pt-4"> <Table> <TableHeader><TableRow><TableHead>Time</TableHead><TableHead>Patient</TableHead><TableHead>Reason for Visit</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockAppointments.map(a => ( <TableRow key={a.id}> <TableCell>{a.time}</TableCell><TableCell>{a.patientName}</TableCell><TableCell>{a.reason}</TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Start Consultation ${a.patientName}`)}>Start Consult</Button> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Add Notes/Record ${a.patientName}`)}>Add Record</Button> </TableCell> </TableRow> ))} </TableBody> </Table> <Button variant="outline" size="sm" className="mt-4" onClick={() => alert(\'Pholder: Open Full Calendar View\')}>View Full Calendar</Button> </CardContent> </Card> ); case \'dashboard\': default: return ( <Card> <CardHeader><CardTitle>Doctor Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-blue-50" onClick={() => setActiveSubView(\'appointments\')}> <CalendarDays className="h-6 w-6 mb-1 text-blue-600"/> <span className="font-medium">Today\'s Appointments</span> <span className="text-sm text-gray-600">({mockAppointments.length} scheduled)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-green-50" onClick={() => setActiveSubView(\'prescriptions\')}> <FileText className="h-6 w-6 mb-1 text-green-600"/> <span className="font-medium">E-Prescriptions</span> <span className="text-sm text-gray-600">(Create & Manage)</span> </Button> <Button variant="outline" className="h-auto py-4 flex-col items-center justify-center text-center hover:bg-purple-50" onClick={() => setActiveSubView(\'patients\')}> <Users className="h-6 w-6 mb-1 text-purple-600"/> <span className="font-medium">Patient Records</span> <span className="text-sm text-gray-600">(View & Search)</span> </Button> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2 flex items-center"><Bell className="mr-2 h-4 w-4"/> Notifications & Tasks</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Lab result received for Alice B.</li> <li>Placeholder: Refill request from Tendai M.</li> <li>Placeholder: Message from Pharmacy re: Rx124</li> </ul> <Button variant="link" size="sm" className="mt-2">View All Notifications</Button> </div> </CardContent> </Card> ); } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl md:text-3xl font-bold">Doctor Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage patients, electronic prescriptions, and appointments efficiently.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={activeSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'dashboard\')} data-state={activeSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4"/>Dashboard</Button> <Button variant={activeSubView === \'appointments\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'appointments\')} data-state={activeSubView === \'appointments\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><CalendarDays className="mr-2 h-4 w-4"/>Appointments</Button> <Button variant={activeSubView === \'patients\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'patients\')} data-state={activeSubView === \'patients\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Users className="mr-2 h-4 w-4"/>Patients</Button> <Button variant={activeSubView === \'prescriptions\' ? \'secondary\' : \'ghost\'} onClick={() => setActiveSubView(\'prescriptions\')} data-state={activeSubView === \'prescriptions\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><FileText className="mr-2 h-4 w-4"/>E-Rx</Button> </nav> <div className="pt-6"> {renderContent()} </div> </div> ); }\r\n\r\n        // --- Wholesaler Portal ---\r\n        function WholesalerPortal({ setActiveView }) { const [wholesalerSubView, setWholesalerSubView] = useState(\'dashboard\'); const mockWholesalerCatalog = MOCK_PHARMACY_INVENTORY.filter(i => i.wholesaleSource?.startsWith(\'MediSupply\') || i.wholesaleSource?.startsWith(\'PharmaDistro\')); const mockWholesalerOrders = [ { id: \'W-ORD-001\', pharmacyName: \'Bonvie Pharmacy\', date: \'2025-04-24\', total: 450.00, status: \'Shipped\' }, { id: \'W-ORD-002\', pharmacyName: \'City Pharmacy\', date: \'2025-04-25\', total: 1200.50, status: \'Processing\' }, { id: \'W-ORD-003\', pharmacyName: \'Pulse Pharmacy\', date: \'2025-04-25\', total: 320.00, status: \'Pending Confirmation\' }, ]; const renderWholesalerContent = () => { switch (wholesalerSubView) { case \'dashboard\': return ( <Card> <CardHeader><CardTitle>Wholesaler Dashboard</CardTitle></CardHeader> <CardContent className="pt-4 space-y-6"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center"> <div className="p-4 bg-blue-50 rounded border border-blue-200"><p className="text-xs uppercase text-blue-600 font-medium">Pending Orders</p><p className="text-2xl font-bold text-blue-800">{mockWholesalerOrders.filter(o => o.status.includes(\'Pending\') || o.status === \'Processing\').length}</p></div> <div className="p-4 bg-green-50 rounded border border-green-200"><p className="text-xs uppercase text-green-600 font-medium">Active Catalog Items</p><p className="text-2xl font-bold text-green-800">{mockWholesalerCatalog.filter(i => i.stock > 0).length}</p></div> <div className="p-4 bg-yellow-50 rounded border border-yellow-300"><p className="text-xs uppercase text-yellow-700 font-medium">Items Nearing Low Stock</p><p className="text-2xl font-bold text-yellow-900">5</p></div> </div> <div className="border-t pt-4"> <h4 className="font-medium mb-2">Recent Activity</h4> <ul className="list-disc list-inside text-sm space-y-1 text-gray-700 pl-4"> <li>Placeholder: Order W-ORD-001 shipped to Bonvie Pharmacy.</li> <li>Placeholder: New order W-ORD-003 received from Pulse Pharmacy.</li> <li>Placeholder: Stock updated for Paracetamol 500mg.</li> </ul> <Button variant="link" size="sm" className="mt-2" onClick={() => setWholesalerSubView(\'orders\')}>View All Orders</Button> </div> </CardContent> </Card> ); case \'catalog\': return ( <Card> <CardHeader className="flex flex-row justify-between items-center"> <div><CardTitle>Product Catalog Management</CardTitle></div> <Button onClick={() => alert(\'Pholder: Open Add New Product Modal\')} size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Add New Product</Button> </CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Catalog (Name, ID, Category)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Product ID</TableHead><TableHead>Name</TableHead><TableHead>Category</TableHead><TableHead className="text-right">Wholesale Price</TableHead><TableHead className="text-right">Available Stock</TableHead><TableHead>Stock Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerCatalog.map(item => ( <TableRow key={item.id}> <TableCell className="font-mono text-xs">{item.id}</TableCell><TableCell>{item.name}</TableCell><TableCell>{item.category}</TableCell> <TableCell className="text-right">${(item.price * 0.8).toFixed(2)}</TableCell> <TableCell className="text-right">{item.stock * 10}</TableCell> <TableCell><Badge variant={item.stock > 0 ? \'success\' : \'destructive\'}>{item.stock > 0 ? \'In Stock\' : \'Out Of Stock\'}</Badge></TableCell> <TableCell><Button variant="ghost" size="sm" onClick={() => alert(`Pholder: Edit Product ${item.id}`)}>Edit</Button></TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'orders\': return ( <Card> <CardHeader><CardTitle>Incoming Pharmacy Orders</CardTitle></CardHeader> <CardContent className="pt-4"> <Input placeholder="Search Orders (ID, Pharmacy Name)..." className="mb-4"/> <Table> <TableHeader><TableRow><TableHead>Order ID</TableHead><TableHead>Pharmacy Customer</TableHead><TableHead>Order Date</TableHead><TableHead className="text-right">Order Total</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader> <TableBody> {mockWholesalerOrders.map(order => ( <TableRow key={order.id} className={order.status.includes(\'Pending\') ? \'bg-yellow-50/70\' : \'\'}> <TableCell className="font-mono text-xs">{order.id}</TableCell><TableCell>{order.pharmacyName}</TableCell><TableCell className="text-xs">{order.date}</TableCell> <TableCell className="text-right font-medium">${order.total.toFixed(2)}</TableCell> <TableCell><Badge variant={getStatusBadgeVariant(order.status)}>{order.status}</Badge></TableCell> <TableCell className="space-x-1"> <Button variant="link" size="sm" className="p-0 h-auto" onClick={() => alert(`Pholder: View Order Details ${order.id}`)}>Details</Button> {order.status === \'Pending Confirmation\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Confirm Order ${order.id}`)}>Confirm</Button>} {order.status === \'Processing\' && <Button variant="outline" size="sm" onClick={() => alert(`Pholder: Mark as Shipped ${order.id}`)}>Mark Shipped</Button>} {order.status === \'Shipped\' && <Badge variant="info" className="ml-2">Shipped</Badge>} </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> ); case \'marketWatch\': return <MarketWatchView />; default: return <div className="text-center p-8 text-gray-500">Select a section.</div>; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Wholesaler Portal</h1> <p className="text-sm mt-1 text-gray-600">Manage your product catalog, process pharmacy orders, and view market insights.</p> </header> <nav className="flex space-x-1 border-b overflow-x-auto"> <Button variant={wholesalerSubView === \'dashboard\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'dashboard\')} data-state={wholesalerSubView === \'dashboard\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Home className="mr-2 h-4 w-4" /> Dashboard</Button> <Button variant={wholesalerSubView === \'catalog\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'catalog\')} data-state={wholesalerSubView === \'catalog\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><BookOpen className="mr-2 h-4 w-4" /> Catalog</Button> <Button variant={wholesalerSubView === \'orders\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'orders\')} data-state={wholesalerSubView === \'orders\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><ClipboardList className="mr-2 h-4 w-4" /> Orders</Button> <Button variant={wholesalerSubView === \'marketWatch\' ? \'secondary\' : \'ghost\'} onClick={() => setWholesalerSubView(\'marketWatch\')} data-state={wholesalerSubView === \'marketWatch\' ? \'active\' : \'\'} className="rounded-b-none border-b-2 border-transparent flex-shrink-0"><Eye className="mr-2 h-4 w-4" /> Market Watch</Button> </nav> <div className="pt-6"> {renderWholesalerContent()} </div> </div> ); }\r\n\r\n        // --- Community Wellness Hub ---\r\n        function CommunityWellnessHub({setActiveView}) { const [activeTab, setActiveTab] = useState(\'activities\'); const [activities, setActivities] = useState(MOCK_WELLNESS_ACTIVITIES); const [selectedDay, setSelectedDay] = useState(\'Monday\'); const [blogCategory, setBlogCategory] = useState(\'All\'); const handleBooking = (activityId) => { setActivities(prevActivities => prevActivities.map(act => { if (act.id === activityId && act.slots > 0 && !act.booked) { alert(`Successfully booked ${act.name}!`); return { ...act, slots: act.slots - 1, booked: true }; } else if (act.id === activityId && act.booked) { alert(`You have already booked ${act.name}.`); return act; } else if (act.id === activityId && act.slots === 0) { alert(`Sorry, ${act.name} is currently full.`); return act; } return act; }) ); }; const filteredActivities = activities.filter(act => act.day === selectedDay); const daysOfWeek = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'].filter(day => MOCK_WELLNESS_ACTIVITIES.some(a => a.day === day)); const blogCategories = [\'All\', ...new Set(MOCK_BLOG_POSTS.map(p => p.category))]; const filteredBlogPosts = blogCategory === \'All\' ? MOCK_BLOG_POSTS : MOCK_BLOG_POSTS.filter(p => p.category === blogCategory); const renderTabContent = () => { switch (activeTab) { case \'activities\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Community Activities & Event Schedule</h2> <p className="text-sm text-gray-600">Book sports sessions, fitness classes, support groups, and other wellness events.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">View Schedule For:</span> {daysOfWeek.map(day => ( <Button key={day} variant={selectedDay === day ? \'default\' : \'outline\'} size="sm" onClick={() => setSelectedDay(day)}> {day} </Button> ))} </div> <Card> <CardHeader> <CardTitle>Available Activities for {selectedDay}</CardTitle> </CardHeader> <CardContent className="pt-4 space-y-4"> {filteredActivities.length > 0 ? ( filteredActivities.map(act => ( <div key={act.id} className={`flex flex-col sm:flex-row justify-between items-start sm:items-center p-4 border rounded-lg gap-4 ${act.booked ? \'bg-green-50 border-green-200\' : act.slots === 0 ? \'bg-red-50 border-red-200 opacity-70\' : \'bg-white hover:bg-gray-50\'}`}> <div className="flex items-center gap-3 flex-grow"> <span className="text-3xl">{act.icon}</span> <div> <p className="font-semibold">{act.name}</p> <p className="text-sm text-gray-600">{act.time} @ {act.location}</p> <p className="text-xs mt-1"> {act.slots > 0 ? <span className="text-green-700">{`${act.slots} slots available`}</span> : <span className="font-medium text-red-600">Fully Booked</span>} </p> </div> </div> <Button size="sm" onClick={() => handleBooking(act.id)} disabled={act.slots === 0 || act.booked} className={`mt-2 sm:mt-0 flex-shrink-0 ${act.booked ? \'bg-green-600 hover:bg-green-700 cursor-default\' : act.slots === 0 ? \'bg-gray-400 cursor-not-allowed\' : \'bg-blue-600 hover:bg-blue-700\'}`}> {act.booked ? (<><CheckCircle className="mr-1 h-4 w-4"/> You\'re Booked</>) : (act.slots > 0 ? \'Book Your Slot\' : \'Full\')} </Button> </div> )) ) : ( <p className="text-center py-6 text-gray-500 italic">No activities scheduled for {selectedDay}.</p> )} </CardContent> </Card> </div> ); case \'blog\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Wellness Blog & Articles</h2> <p className="text-sm text-gray-600">Read the latest health tips, lifestyle advice, and expert insights.</p> </header> <div className="flex flex-wrap gap-2 pb-4 border-b items-center"> <span className="text-sm font-medium mr-2 self-center">Filter by Category:</span> {blogCategories.map(cat => ( <Button key={cat} variant={blogCategory === cat ? \'default\' : \'outline\'} size="sm" onClick={() => setBlogCategory(cat)}> {cat} </Button> ))} </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredBlogPosts.map(post => ( <Card key={post.id} className="flex flex-col overflow-hidden hover:shadow-lg transition-shadow duration-200"> <img src={post.imageUrl} alt={post.title} className="h-40 w-full object-cover"/> <CardHeader> <Badge variant="secondary" className="w-fit mb-2">{post.category}</Badge> <CardTitle className="text-lg">{post.title}</CardTitle> <CardDescription>By {post.author} - {post.date}</CardDescription> </CardHeader> <CardContent className="pt-2 flex-grow"> <p className="text-sm text-gray-700">{post.snippet}</p> </CardContent> <CardFooter className="pt-2 border-t"> <Button variant="link" size="sm" onClick={() => alert(`Pholder: Navigate to full blog post ${post.id}`)}>Read Full Article</Button> </CardFooter> </Card> ))} {filteredBlogPosts.length === 0 && ( <p className="md:col-span-2 lg:col-span-3 text-center py-10 text-gray-500 italic">No blog posts found in the "{blogCategory}" category.</p> )} </div> </div> ); case \'resources\': return ( <div className="space-y-8"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold">Health Resources & Interactive Tools</h2> <p className="text-sm text-gray-600">Access guides, calculators, and information on various health topics.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-gradient-to-br from-orange-50 to-amber-100 border border-orange-200"> <CardHeader> <CardTitle className="flex items-center text-orange-800"><Utensils className="mr-2 h-5 w-5"/> Diabetes Management</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-orange-700">Resources for managing diabetes effectively.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Downloadable Meal Plans</li> <li>Video Guide: Using Your Meter</li> <li>Article: Importance of Foot Care</li> <li>Find Local Support Groups</li> </ul> <Button size="sm" className="bg-orange-500 hover:bg-orange-600 text-white" onClick={() => alert(\'Pholder: Navigate to Diabetes Resource Page\')}>Explore Diabetes Section</Button> </CardContent> </Card> <Card className="bg-gradient-to-br from-red-50 to-rose-100 border border-red-200"> <CardHeader> <CardTitle className="flex items-center text-red-800"><Heart className="mr-2 h-5 w-5"/> Hypertension Control</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3 text-red-700">Tips for managing high blood pressure.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Low Sodium Recipe Book (PDF)</li> <li>Audio Guide: Stress Reduction Techniques</li> <li>Interactive Blood Pressure Log Tool</li> <li>Understanding Your Readings</li> </ul> <Button size="sm" className="bg-red-500 hover:bg-red-600 text-white" onClick={() => alert(\'Pholder: Navigate to Hypertension Page\')}>View BP Management Tips</Button> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Scale className="mr-2 h-5 w-5"/> BMI Calculator</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Calculate your Body Mass Index.</p> <div className="flex gap-2 mt-2"> <div className="flex-1"><Label htmlFor="height-input">Height (cm)</Label><Input id="height-input" placeholder="e.g., 175" type="number"/></div> <div className="flex-1"><Label htmlFor="weight-input">Weight (kg)</Label><Input id="weight-input" placeholder="e.g., 70" type="number"/></div> </div> <Button size="sm" className="mt-3" onClick={() => alert(\'Pholder: Calculate BMI based on inputs\')}>Calculate BMI</Button> <p className="text-sm mt-3">Your BMI: <span className="font-semibold">[Result Placeholder]</span></p> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center"><Brain className="mr-2 h-5 w-5"/> Mental Wellness Corner</CardTitle> </CardHeader> <CardContent className="pt-2"> <p className="text-sm mb-3">Resources for mental health and well-being.</p> <ul className="list-disc list-inside text-sm space-y-1 mb-4 pl-4 text-gray-700"> <li>Guided Mindfulness Exercises (Audio)</li> <li>Recognizing Signs of Burnout</li> <li>Directory of Local Mental Health Professionals</li> <li>Tips for Improving Sleep Quality</li> </ul> <Button size="sm" variant="link" onClick={() => alert(\'Pholder: Navigate to Mental Wellness Page\')}>Explore Mental Wellness</Button> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-3 text-gray-700">Quick Health Links</h4> <div className="grid grid-cols-1 sm:grid-cols-3 gap-3"> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Ministry of Health & Child Care (MoHCC)</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Common Colds & Flu Information</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Basic First Aid Guide</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">National Vaccination Schedules</a> <a href="#" className="text-blue-600 hover:underline p-2 bg-gray-50 rounded hover:bg-blue-50 text-sm">Find a Clinic Near You</a> </div> </div> </div> ); case \'antibiotic\': return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h2 className="text-xl font-semibold flex items-center text-blue-800"><Pill className="mr-2 h-5 w-5"/> Antibiotic Stewardship: Be Antibiotic Wise</h2> <p className="text-sm text-gray-600">Learn about the responsible use of antibiotics to combat resistance.</p> </header> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card className="bg-blue-50 border border-blue-200"> <CardHeader><CardTitle>Why is Responsible Use Important?</CardTitle></CardHeader> <CardContent className="pt-2 text-sm text-blue-800"><p>Antibiotic resistance is a major global health threat. When bacteria become resistant, antibiotics may not work when needed most. Using antibiotics only when necessary and as prescribed helps preserve their effectiveness for everyone.</p></CardContent> </Card> <Card> <CardHeader><CardTitle>Key Principles of Antibiotic Use</CardTitle></CardHeader> <CardContent className="pt-2"> <ul className="list-disc list-inside text-sm space-y-2 text-gray-700"> <li><strong>Viruses vs. Bacteria:</strong> Antibiotics ONLY treat bacterial infections, not viruses like colds or flu.</li> <li><strong>Complete the Full Course:</strong> Always finish your prescribed antibiotics, even if you start feeling better. Stopping early can allow resistant bacteria to survive.</li> <li><strong>Do Not Share:</strong> Never use antibiotics prescribed for someone else or share yours.</li> <li><strong>Trust Your Doctor:</strong> Don\'t pressure your doctor for antibiotics if they say you don\'t need them.</li> <li><strong>Prevent Infections:</strong> Practice good hygiene (like handwashing) and stay up-to-date on vaccinations to prevent infections in the first place.</li> </ul> </CardContent> </Card> </div> <div className="mt-6 border-t pt-6 bg-yellow-50 p-4 rounded border border-yellow-200"> <h4 className="font-semibold mb-2 text-yellow-800 flex items-center"><AlertTriangle className="mr-2 h-4 w-4"/> Patient Advisory</h4> <p className="text-sm text-yellow-900">Always consult your doctor or pharmacist before taking any medication, including antibiotics. Ensure you understand the instructions and potential side effects. Report any adverse reactions immediately.</p> </div> <div className="mt-6 border-t pt-6"> <h4 className="font-semibold mb-2">Further Information</h4> <div className="space-y-1"> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">World Health Organization (WHO) - Antimicrobial Resistance</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Africa CDC - Antimicrobial Resistance Programme</a> <a href="#" className="text-blue-600 hover:underline block text-sm" target="_blank" rel="noopener noreferrer">Local Resources on Antibiotic Use (Placeholder Link)</a> </div> </div> </div> ); default: return null; } }; return ( <div className="space-y-6"> <header className="pb-4 border-b"> <h1 className="text-2xl font-bold">Community Wellness Hub</h1> <p className="text-sm mt-1 text-gray-600">Explore activities, health information, and resources for a healthier you.</p> </header> <div className="border-b border-gray-200"> <nav className="-mb-px flex space-x-4 overflow-x-auto"> <button onClick={() => setActiveTab(\'activities\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'activities\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'activities\' ? \'active\' : \'\'}> <CalendarDays className="inline mr-1 h-4 w-4" /> Activities & Events </button> <button onClick={() => setActiveTab(\'blog\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'blog\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'blog\' ? \'active\' : \'\'}> <BookOpen className="inline mr-1 h-4 w-4" /> Wellness Blog </button> <button onClick={() => setActiveTab(\'resources\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'resources\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'resources\' ? \'active\' : \'\'}> <Settings className="inline mr-1 h-4 w-4" /> Health Resources & Tools </button> <button onClick={() => setActiveTab(\'antibiotic\')} className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === \'antibiotic\' ? \'border-blue-500 text-blue-600\' : \'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\'} flex items-center flex-shrink-0`} data-state={activeTab === \'antibiotic\' ? \'active\' : \'\'}> <Pill className="inline mr-1 h-4 w-4" /> Be Antibiotic Wise </button> </nav> </div> <div className="mt-6"> {renderTabContent()} </div> </div> ); }\r\n\r\n        // --- Main App Component ---\r\n        function App() {\r\n            console.log("App Component: Initial Render");\r\n            const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n            const [userRole, setUserRole] = useState(null);\r\n            const [userName, setUserName] = useState(\'\');\r\n            const [userData, setUserData] = useState(null);\r\n            const [activeView, setActiveView] = useState(\'landing\');\r\n            const [isVerificationModalOpen, setIsVerificationModalOpen] = useState(false);\r\n            const [verificationData, setVerificationData] = useState(null);\r\n\r\n            const openVerificationModal = (data) => { setVerificationData(data); setIsVerificationModalOpen(true); };\r\n            const closeVerificationModal = () => setIsVerificationModalOpen(false);\r\n\r\n            const handleLogin = (role) => {\r\n                console.log(`App Component: handleLogin called with role: ${role}`);\r\n                let defaultView = \'landing\'; let currentUserName = \'\'; let currentUserData = null; let authStatus = false;\r\n                switch (role) {\r\n                    case \'patient\': defaultView = \'patientPortal\'; currentUserName = MOCK_PATIENT_DATA.name; currentUserData = MOCK_PATIENT_DATA; authStatus = true; break;\r\n                    case \'pharmacy\': defaultView = \'pharmacyPortal\'; currentUserName = \'City Pharmacy Staff\'; currentUserData = { id: \'PHARM001\', name: \'City Pharmacy\'}; authStatus = true; break;\r\n                    case \'doctor\': defaultView = \'doctorPortal\'; currentUserName = \'Dr. Musasa\'; currentUserData = { id: \'DOC001\' }; authStatus = true; break;\r\n                    case \'wholesaler\': defaultView = \'wholesalerPortal\'; currentUserName = \'MediSupply Inc.\'; currentUserData = { id: \'WH001\' }; authStatus = true; break;\r\n                    default: console.warn(`App Component: Unknown role "${role}" passed to handleLogin. Staying on landing page.`); role = null; defaultView = \'landing\'; authStatus = false; break;\r\n                }\r\n                setIsAuthenticated(authStatus); setUserRole(role); setActiveView(defaultView); setUserName(currentUserName); setUserData(currentUserData); console.log(`App Component: Login state updated. Auth=${authStatus}, Role=${role}, View=${defaultView}`);\r\n            };\r\n\r\n            const handleLogout = () => { console.log("App Component: handleLogout called."); setIsAuthenticated(false); setUserRole(null); setUserName(\'\'); setUserData(null); setActiveView(\'landing\'); console.log("App Component: Logout state updated. Redirecting to landing."); };\r\n\r\n            const navigateTo = (view) => {\r\n                console.log(`App Component: navigateTo called for view: ${view}. Current auth: ${isAuthenticated}, role: ${userRole}`);\r\n                const publicViews = [\'landing\', \'wellness\']; const semiPublicViews = [\'medicineSearch\']; const allowedViews = { patient: [\'patientPortal\', \'wellness\', \'medicineSearch\', \'prescriptionUpload\', \'quotedRx\'], pharmacy: [\'pharmacyPortal\', \'wellness\'], doctor: [\'doctorPortal\', \'wellness\'], wholesaler: [\'wholesalerPortal\', \'wellness\'], };\r\n                if (publicViews.includes(view)) { console.log(` -> Navigating to public view: ${view}`); setActiveView(view); return; }\r\n                if (semiPublicViews.includes(view) && !isAuthenticated) { console.log(` -> Navigating to semi-public view (unauthenticated): ${view}`); setActiveView(view); return; }\r\n                if (!isAuthenticated) { console.log(` -> Navigation to "${view}" denied (not authenticated). Redirecting to landing.`); setActiveView(\'landing\'); return; }\r\n                if (allowedViews[userRole]?.includes(view)) { console.log(` -> Navigation allowed for role "${userRole}" to view "${view}".`); setActiveView(view); }\r\n                else if (view === \'wellness\') { console.log(` -> Navigation allowed for authenticated user ("${userRole}") to wellness.`); setActiveView(view); }\r\n                else { console.warn(` -> Access denied for role "${userRole}" attempting to navigate to view "${view}". Redirecting to user\'s default portal.`); const defaultPortal = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(allowedViews[userRole]?.includes(defaultPortal) ? defaultPortal : \'landing\'); alert(`Access Denied: You do not have permission to view \'${view}\'. Redirecting to your dashboard.`); }\r\n            };\r\n\r\n            const renderMainContent = () => {\r\n                console.log(`App Component: renderMainContent triggered. Active View: ${activeView}, Role: ${userRole}, Auth: ${isAuthenticated}`);\r\n                if (!isAuthenticated) { switch (activeView) { case \'wellness\': return <CommunityWellnessHub setActiveView={navigateTo}/>; case \'medicineSearch\': return <MedicineSearchListing navigateTo={navigateTo} />; case \'landing\': default: console.log(" -> Rendering LandingPage (unauthenticated)."); return <LandingPage setActiveView={navigateTo} login={handleLogin} navigateTo={navigateTo}/>; } }\r\n\r\n                console.log(` -> Rendering authenticated content for view: ${activeView}`);\r\n                try {\r\n                    const renderPortal = (PortalComponent, requiredRole, props = {}) => { if (userRole === requiredRole) { console.log(` -> Rendering ${requiredRole} portal.`); return <PortalComponent setActiveView={navigateTo} openVerificationModal={openVerificationModal} patientData={userData} {...props} />; } else { console.warn(`Role mismatch: Trying to render ${requiredRole} portal for user role ${userRole}. Rendering Access Denied.`); return renderAccessDenied(); } };\r\n\r\n                    switch (activeView) {\r\n                        case \'patientPortal\': return renderPortal(PatientPortal, \'patient\', { navigateTo });\r\n                        case \'pharmacyPortal\': return renderPortal(PharmacyPortal, \'pharmacy\');\r\n                        case \'doctorPortal\': return renderPortal(DoctorPortal, \'doctor\');\r\n                        case \'wholesalerPortal\': return renderPortal(WholesalerPortal, \'wholesaler\');\r\n                        case \'wellness\': console.log(" -> Rendering CommunityWellnessHub (authenticated)."); return <CommunityWellnessHub setActiveView={navigateTo}/>;\r\n                        case \'medicineSearch\': if (userRole === \'patient\') return <MedicineSearchListing navigateTo={navigateTo} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'prescriptionUpload\': if (userRole === \'patient\') return <PrescriptionUpload navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; else return renderAccessDenied();\r\n                        case \'quotedRx\': if (userRole === \'patient\') { const quote = userData?.prescriptions?.find(rx => rx.isQuoteReady); return <QuotedPrescriptionView quote={quote?.quote} navigatePatientView={(v) => navigateTo(\'patientPortal\')} />; } else return renderAccessDenied();\r\n                        default: console.warn(` -> Unhandled authenticated view route: "${activeView}". Resetting to user\'s default portal.`); const defaultPortalView = userRole ? `${userRole}Portal` : \'landing\'; setActiveView(defaultPortalView); return null;\r\n                    }\r\n                } catch (error) {\r\n                     console.error(`CRITICAL ERROR rendering authenticated view "${activeView}" for role "${userRole}":`, error);\r\n                     return ( <div className="text-center p-8 text-red-600 bg-red-50 border border-red-200 rounded-md"><h2 className="text-xl font-semibold mb-2">Oops! Something went wrong.</h2><p>We encountered an error while loading this part of the application.</p><p className="mt-2">Please try refreshing the page. If the problem persists, contact support.</p><p className="mt-4 text-xs text-red-500"><i>Error details (for support): {error.message}</i></p><p className="text-xs text-red-500"><i>(Check browser console (F12) for more info)</i></p><pre className="mt-4 text-left text-xs bg-white p-2 border overflow-auto">{error.stack || \'No stack trace available.\'}</pre></div> );\r\n                }\r\n            };\r\n\r\n            const renderAccessDenied = () => ( <div className="text-center py-10 px-4"> <Card className="max-w-md mx-auto bg-red-50 border-red-200"> <CardHeader> <CardTitle className="text-red-700 flex items-center justify-center"><AlertTriangle className="h-6 w-6 mr-2"/> Access Denied</CardTitle> </CardHeader> <CardContent className="pt-4 text-red-800"> <p>You do not have permission to access this page (\'{activeView}\') with your current role (\'{userRole || \'None\'}\').</p> <Button onClick={() => navigateTo(userRole ? `${userRole}Portal` : \'landing\')} className="mt-6 bg-red-600 hover:bg-red-700 text-white">Go to My Dashboard / Home</Button> </CardContent> </Card> </div> );\r\n\r\n            const renderNavigation = () => {\r\n                console.log(`App Component: renderNavigation. Auth=${isAuthenticated}, Role=${userRole}, View=${activeView}`);\r\n                if (!isAuthenticated) { return ( <div className="flex items-center space-x-2 sm:space-x-4"> <Button variant="ghost" onClick={() => navigateTo(\'medicineSearch\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Search className="mr-1 h-4 w-4" /> Search Meds </Button> <Button variant="ghost" onClick={() => navigateTo(\'wellness\')} size="sm" className="text-gray-600 hover:text-blue-600"> <Activity className="mr-1 h-4 w-4" /> Wellness </Button> <Button variant="outline" onClick={() => alert(\'Pholder: Show Login Options/Modal\')} size="sm"> <LogIn className="mr-1 h-4 w-4" /> Login </Button> <Button onClick={() => alert(\'Pholder: Show Registration Options/Modal\')} size="sm"> Register </Button> </div> ); }\r\n                else {\r\n                     const portalButtons = { patient: <Button variant={activeView === \'patientPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'patientPortal\')} size="sm" data-state={activeView === \'patientPortal\' ? \'active\' : \'\'}><Home className="mr-1 h-4 w-4" /> Dashboard</Button>, pharmacy: <Button variant={activeView === \'pharmacyPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'pharmacyPortal\')} size="sm" data-state={activeView === \'pharmacyPortal\' ? \'active\' : \'\'}><Building className="mr-1 h-4 w-4" /> Pharmacy Portal</Button>, doctor: <Button variant={activeView === \'doctorPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'doctorPortal\')} size="sm" data-state={activeView === \'doctorPortal\' ? \'active\' : \'\'}><Stethoscope className="mr-1 h-4 w-4" /> Doctor Portal</Button>, wholesaler: <Button variant={activeView === \'wholesalerPortal\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wholesalerPortal\')} size="sm" data-state={activeView === \'wholesalerPortal\' ? \'active\' : \'\'}><Truck className="mr-1 h-4 w-4" /> Wholesaler Portal</Button>, };\r\n                    return ( <div className="flex items-center space-x-2 sm:space-x-4 overflow-x-auto py-1 flex-grow justify-end">\r\n                            {portalButtons[userRole]}\r\n                            <Button variant={activeView === \'wellness\' ? \'secondary\' : \'ghost\'} onClick={() => navigateTo(\'wellness\')} size="sm" data-state={activeView === \'wellness\' ? \'active\' : \'\'}><Activity className="mr-1 h-4 w-4" /> Wellness</Button>\r\n                            <div className="flex items-center space-x-3 pl-3 border-l border-gray-200 ml-2 flex-shrink-0">\r\n                                <Button variant="ghost" size="icon" className="relative hover:bg-gray-100 rounded-full" onClick={() => alert(\'Placeholder: Show Notifications Panel\')}> <Bell className="h-5 w-5 text-gray-600" /> <span className="absolute top-1 right-1 block h-2.5 w-2.5 rounded-full ring-1 ring-white bg-red-500"/> </Button>\r\n                                <span className="text-sm font-medium text-gray-700 hidden sm:inline" title={`Logged in as: ${userRole}`}>Welcome, {userName}</span>\r\n                                <Button variant="outline" onClick={handleLogout} size="sm"> <LogOut className="mr-1 h-4 w-4" /> Logout </Button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }\r\n            };\r\n\r\n\r\n            // Ensure NO HTML comments are inside this return block\r\n            return (\r\n                <div className="min-h-screen bg-gray-100 flex flex-col">\r\n                    {/* Sticky Navigation Bar */}\r\n                    <nav className="bg-white shadow-md sticky top-0 z-40">\r\n                        <div className="container mx-auto px-4 py-2 flex flex-wrap justify-between items-center gap-4">\r\n                             <span\r\n                                className="text-2xl font-bold text-blue-700 cursor-pointer shrink-0 mr-6"\r\n                                onClick={() => navigateTo(isAuthenticated ? `${userRole}Portal` : \'landing\')}\r\n                                title="Go to Home/Dashboard"\r\n                             >\r\n                                ehutano<span className="text-green-600">+</span>\r\n                             </span>\r\n                             {renderNavigation()}\r\n                         </div>\r\n                    </nav>\r\n\r\n                    {/* Main Content Area */}\r\n                    <main className="container mx-auto p-4 md:p-6 lg:p-8 flex-grow">\r\n                        {renderMainContent()}\r\n                    </main>\r\n\r\n                    {/* Footer */}\r\n                    <footer className="bg-gray-800 text-gray-400 text-sm py-10 mt-16">\r\n                        <div className="container mx-auto px-4">\r\n                             <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-8 mb-8">\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Company</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">About Us</a></li> <li><a href="#" className="hover:text-white hover:underline">Careers</a></li> <li><a href="#" className="hover:text-white hover:underline">Contact</a></li> <li><a href="#" className="hover:text-white hover:underline" onClick={(e) => { e.preventDefault(); navigateTo(\'wellness\'); }}>Blog</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Legal</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Privacy Policy</a></li> <li><a href="#" className="hover:text-white hover:underline">Terms of Service</a></li> <li><a href="#" className="hover:text-white hover:underline">Compliance</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Resources</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Help Center</a></li> <li><a href="#" className="hover:text-white hover:underline">API Documentation</a></li> <li><a href="#" className="hover:text-white hover:underline">System Status</a></li> </ul> </div>\r\n                                <div> <h4 className="font-semibold text-white mb-3 uppercase tracking-wider text-xs">Connect</h4> <ul className="space-y-2"> <li><a href="#" className="hover:text-white hover:underline">Facebook</a></li> <li><a href="#" className="hover:text-white hover:underline">Twitter / X</a></li> <li><a href="#" className="hover:text-white hover:underline">LinkedIn</a></li> <li><a href="#" className="hover:text-white hover:underline">WhatsApp Support</a></li> </ul> </div>\r\n                                <div className="col-span-2 md:col-span-4 lg:col-span-1 lg:text-right mt-8 lg:mt-0"> <span className="text-3xl font-bold text-white"> ehutano<span className="text-green-400">+</span> </span> <p className="text-xs mt-2">Digital Health Solutions</p> </div>\r\n                             </div>\r\n                             <div className="border-t border-gray-700 pt-6 text-center text-xs"> &copy; {new Date().getFullYear()} ehutano+. A division of Health Futures Ltd. All rights reserved. </div>\r\n                        </div>\r\n                    </footer>\r\n\r\n                     {/* Centralized Modals */}\r\n                    <MedicineVerificationModal isOpen={isVerificationModalOpen} onClose={closeVerificationModal} verificationData={verificationData} />\r\n                    {/* OrderDetailsModal & DispensingModal are rendered within PharmacyPortal */}\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n        // --- Render the App ---\r\n        try {\r\n            console.log("Attempting ReactDOM.render...");\r\n            ReactDOM.render(<App />, document.getElementById(\'root\'));\r\n            console.log("React app rendered successfully.");\r\n        } catch (error) {\r\n             console.error("CRITICAL ERROR DURING REACT RENDERING:", error);\r\n             const rootElement = document.getElementById(\'root\');\r\n             if (rootElement) {\r\n                rootElement.innerHTML = `<div style="padding: 2rem; border: 2px solid red; background-color: #fee; color: #a00; font-family: sans-serif; text-align: center;">\r\n                                            <h2>Application Initialization Error</h2>\r\n                                            <p>We\'re sorry, but the application failed to load correctly.</p>\r\n                                            <p>Please try refreshing the page. If the problem persists, contact support.</p>\r\n                                            <p style="margin-top: 1em; font-size: 0.9em; color: #500;"><i>Technical Details (for support): ${error.message}</i></p>\r\n                                            <p style="font-size: 0.8em;">(Check the browser\'s developer console (F12) for more detailed error information)</p>\r\n                                            <pre style="margin-top: 1em; text-align: left; background: #fff; border: 1px solid #ccc; padding: 1em; overflow-x: auto; font-size: 0.8em;">${error.stack || \'No stack trace available.\'}</pre>\r\n                                         </div>`;\r\n             }\r\n        }\r\n\r\n    </script>\n', PosixPath('attached_assets/ehutano10.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 8094211dc0984c38e816cd39ab7d9a47450645f4cf44986990bb3b2b013e652347c4d58aa6e25b3b9af5721236e43adba2dfc0e8a64a08e16bb070c1b44549b1_0
2025-06-01 17:18:30,868 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ee74fd49637bebe183eca7188dbde26e386314e62cc2e7ba1ee60b377b638243fcd84e6c6fa04886198ccacfa6a711bfbcc61a28f9ddc913d5b3c53083cbc90_0
2025-06-01 17:18:30,868 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-06-01 17:18:30,869 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-06-01 17:18:30,869 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-06-01 17:18:30,871 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d77415fc531baf3fa99a56a1bd7fc6ff1699302305621a1c876e87597dccaf6014501499cd7ffd3f00003166bc6832ed6ab9283ac3d644c6576b0f4c97fd6a81_0
2025-06-01 17:18:30,871 - semgrep.rule_match - DEBUG - match_key = ('</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n     .*</?[a-zA-Z] `</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n    ${lastReceipt.total.toFixed(2)}...`\n `...${lastReceipt.total.toFixed(2)}</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n    `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 7973b4e2e7fa21e83ecb64aacefa99ad2f52aa361a88fb6b987fb29632b0dc013fd885ec3af41fcfd036160ab7d9a18238ab8640ed6fd83ee6df250e5e84e547_0
2025-06-01 17:18:30,872 - semgrep.rule_match - DEBUG - match_key = ('</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n     .*</?[a-zA-Z] `</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n    ${lastReceipt.total.toFixed(2)}...`\n `...${lastReceipt.total.toFixed(2)}</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n    `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 7973b4e2e7fa21e83ecb64aacefa99ad2f52aa361a88fb6b987fb29632b0dc013fd885ec3af41fcfd036160ab7d9a18238ab8640ed6fd83ee6df250e5e84e547_0
2025-06-01 17:18:30,873 - semgrep.rule_match - DEBUG - match_key = ('</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n     .*</?[a-zA-Z] `</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n    ${lastReceipt.total.toFixed(2)}...`\n `...${lastReceipt.total.toFixed(2)}</strong></span></div>\n          </div>\n          <p style="text-align: center; margin-top: 20px;">Thank you for your business!</p>\n        </body>\n      </html>\n    `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 7973b4e2e7fa21e83ecb64aacefa99ad2f52aa361a88fb6b987fb29632b0dc013fd885ec3af41fcfd036160ab7d9a18238ab8640ed6fd83ee6df250e5e84e547_0
2025-06-01 17:18:30,874 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d77415fc531baf3fa99a56a1bd7fc6ff1699302305621a1c876e87597dccaf6014501499cd7ffd3f00003166bc6832ed6ab9283ac3d644c6576b0f4c97fd6a81_0
2025-06-01 17:18:30,875 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Customer:</strong>  .*</?[a-zA-Z] `<p><strong>Customer:</strong> ${lastReceipt.customerName}...`\n `...${lastReceipt.customerName}<p><strong>Customer:</strong> `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 3f29409ee392cd13dac4b562f668655848e13fac4af8345d74e991e292c1caccd4ca7f3bfde77cbae5e674e978f009453698474f70726dafc2c26f6186962410_0
2025-06-01 17:18:30,875 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Customer:</strong>  .*</?[a-zA-Z] `<p><strong>Customer:</strong> ${lastReceipt.customerName}...`\n `...${lastReceipt.customerName}<p><strong>Customer:</strong> `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 3f29409ee392cd13dac4b562f668655848e13fac4af8345d74e991e292c1caccd4ca7f3bfde77cbae5e674e978f009453698474f70726dafc2c26f6186962410_0
2025-06-01 17:18:30,876 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Customer:</strong>  .*</?[a-zA-Z] `<p><strong>Customer:</strong> ${lastReceipt.customerName}...`\n `...${lastReceipt.customerName}<p><strong>Customer:</strong> `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 3f29409ee392cd13dac4b562f668655848e13fac4af8345d74e991e292c1caccd4ca7f3bfde77cbae5e674e978f009453698474f70726dafc2c26f6186962410_0
2025-06-01 17:18:30,877 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d77415fc531baf3fa99a56a1bd7fc6ff1699302305621a1c876e87597dccaf6014501499cd7ffd3f00003166bc6832ed6ab9283ac3d644c6576b0f4c97fd6a81_0
2025-06-01 17:18:30,877 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Phone:</strong>  .*</?[a-zA-Z] `<p><strong>Phone:</strong> ${lastReceipt.customerPhone}...`\n `...${lastReceipt.customerPhone}<p><strong>Phone:</strong> `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = a15ea53a6133ac8c314d2ca7e443b064f80c502207b715891344d958e3af57791d2c13ca32877ba4b3f5a7e970d7d0537686bd0e9a69d297369c790828bceef2_0
2025-06-01 17:18:30,878 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Phone:</strong>  .*</?[a-zA-Z] `<p><strong>Phone:</strong> ${lastReceipt.customerPhone}...`\n `...${lastReceipt.customerPhone}<p><strong>Phone:</strong> `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = a15ea53a6133ac8c314d2ca7e443b064f80c502207b715891344d958e3af57791d2c13ca32877ba4b3f5a7e970d7d0537686bd0e9a69d297369c790828bceef2_0
2025-06-01 17:18:30,878 - semgrep.rule_match - DEBUG - match_key = ('<p><strong>Phone:</strong>  .*</?[a-zA-Z] `<p><strong>Phone:</strong> ${lastReceipt.customerPhone}...`\n `...${lastReceipt.customerPhone}<p><strong>Phone:</strong> `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = a15ea53a6133ac8c314d2ca7e443b064f80c502207b715891344d958e3af57791d2c13ca32877ba4b3f5a7e970d7d0537686bd0e9a69d297369c790828bceef2_0
2025-06-01 17:18:30,879 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = d77415fc531baf3fa99a56a1bd7fc6ff1699302305621a1c876e87597dccaf6014501499cd7ffd3f00003166bc6832ed6ab9283ac3d644c6576b0f4c97fd6a81_0
2025-06-01 17:18:30,880 - semgrep.rule_match - DEBUG - match_key = ('</span>\n              </div>\n             .*</?[a-zA-Z] `</span>\n              </div>\n            ${item.total.toFixed(2)}...`\n `...${item.total.toFixed(2)}</span>\n              </div>\n            `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = be53f95d2817ebd22029daa9ddea157cd5ff76d47a88ed73016b7b496adc04e64fd2f6374cbb9d971459da2cc65f8f176f922a83023cf9ea7e0e493e6aa5c2fc_0
2025-06-01 17:18:30,880 - semgrep.rule_match - DEBUG - match_key = ('</span>\n              </div>\n             .*</?[a-zA-Z] `</span>\n              </div>\n            ${item.total.toFixed(2)}...`\n `...${item.total.toFixed(2)}</span>\n              </div>\n            `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = be53f95d2817ebd22029daa9ddea157cd5ff76d47a88ed73016b7b496adc04e64fd2f6374cbb9d971459da2cc65f8f176f922a83023cf9ea7e0e493e6aa5c2fc_0
2025-06-01 17:18:30,881 - semgrep.rule_match - DEBUG - match_key = ('</span>\n              </div>\n             .*</?[a-zA-Z] `</span>\n              </div>\n            ${item.total.toFixed(2)}...`\n `...${item.total.toFixed(2)}</span>\n              </div>\n            `\n', PosixPath('client/src/components/pharmacy/BillingFinancialIntegration.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = be53f95d2817ebd22029daa9ddea157cd5ff76d47a88ed73016b7b496adc04e64fd2f6374cbb9d971459da2cc65f8f176f922a83023cf9ea7e0e493e6aa5c2fc_0
2025-06-01 17:18:30,881 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 73d5db2a758158a8f93770078e5727b4870f483301443fdcf5721834a4318e438bab0312cfcae53cd8dd04ade8bf0739e728dc0e7a9f85ded527b9fe157fb545_0
2025-06-01 17:18:30,882 - semgrep.rule_match - DEBUG - match_key = ("$ALIAS.raw($SQL + $VALUE)\n $ALIAS.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n $QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n const { sql: $ALIAS } = require('drizzle-orm')\n...\n import { sql as $ALIAS } from 'drizzle-orm'\n...\n db.execute(`...`) db.query(`...`) ./db (\\./|\\.\\./|/).*db($|/.*) import { db } from ./db\n...\n db.sql.raw($SQL + $VALUE)\n db.sql.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\ndb.sql.raw($QUERY)\n $QUERY = `...${...}...`\n...\ndb.sql.raw($QUERY)\n const db = require('drizzle-orm')\n...\n import db from 'drizzle-orm'\n...\n $QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n $QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n sql.raw($SQL + $VALUE)\n sql.raw(`...${...}...`)\n const { sql } = require('drizzle-orm')\n...\n import { sql } from 'drizzle-orm'\n...\n", PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 34a088c12428d88cb58a84155f5586ef139b10bea1d9959b75fa52ecf036cfb7b8483fd3c405dea200487eb617d0e7ec98c89d1e9f5dbbdad0b091e89cb5a2ce_0
2025-06-01 17:18:30,883 - semgrep.rule_match - DEBUG - match_key = ("$ALIAS.raw($SQL + $VALUE)\n $ALIAS.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n $QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n const { sql: $ALIAS } = require('drizzle-orm')\n...\n import { sql as $ALIAS } from 'drizzle-orm'\n...\n db.execute(`...`) db.query(`...`) ./db (\\./|\\.\\./|/).*db($|/.*) import { db } from ./db\n...\n db.sql.raw($SQL + $VALUE)\n db.sql.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\ndb.sql.raw($QUERY)\n $QUERY = `...${...}...`\n...\ndb.sql.raw($QUERY)\n const db = require('drizzle-orm')\n...\n import db from 'drizzle-orm'\n...\n $QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n $QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n sql.raw($SQL + $VALUE)\n sql.raw(`...${...}...`)\n const { sql } = require('drizzle-orm')\n...\n import { sql } from 'drizzle-orm'\n...\n", PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 34a088c12428d88cb58a84155f5586ef139b10bea1d9959b75fa52ecf036cfb7b8483fd3c405dea200487eb617d0e7ec98c89d1e9f5dbbdad0b091e89cb5a2ce_0
2025-06-01 17:18:30,883 - semgrep.rule_match - DEBUG - match_key = ("$ALIAS.raw($SQL + $VALUE)\n $ALIAS.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n $QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n const { sql: $ALIAS } = require('drizzle-orm')\n...\n import { sql as $ALIAS } from 'drizzle-orm'\n...\n db.execute(`...`) db.query(`...`) ./db (\\./|\\.\\./|/).*db($|/.*) import { db } from ./db\n...\n db.sql.raw($SQL + $VALUE)\n db.sql.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\ndb.sql.raw($QUERY)\n $QUERY = `...${...}...`\n...\ndb.sql.raw($QUERY)\n const db = require('drizzle-orm')\n...\n import db from 'drizzle-orm'\n...\n $QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n $QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n sql.raw($SQL + $VALUE)\n sql.raw(`...${...}...`)\n const { sql } = require('drizzle-orm')\n...\n import { sql } from 'drizzle-orm'\n...\n", PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 34a088c12428d88cb58a84155f5586ef139b10bea1d9959b75fa52ecf036cfb7b8483fd3c405dea200487eb617d0e7ec98c89d1e9f5dbbdad0b091e89cb5a2ce_0
2025-06-01 17:18:30,884 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 73d5db2a758158a8f93770078e5727b4870f483301443fdcf5721834a4318e438bab0312cfcae53cd8dd04ade8bf0739e728dc0e7a9f85ded527b9fe157fb545_0
2025-06-01 17:18:30,885 - semgrep.rule_match - DEBUG - match_key = ("$ALIAS.raw($SQL + $VALUE)\n $ALIAS.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n $QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n const { sql: $ALIAS } = require('drizzle-orm')\n...\n import { sql as $ALIAS } from 'drizzle-orm'\n...\n db.execute(`...`) db.query(`...`) ./db (\\./|\\.\\./|/).*db($|/.*) import { db } from ./db\n...\n db.sql.raw($SQL + $VALUE)\n db.sql.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\ndb.sql.raw($QUERY)\n $QUERY = `...${...}...`\n...\ndb.sql.raw($QUERY)\n const db = require('drizzle-orm')\n...\n import db from 'drizzle-orm'\n...\n $QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n $QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n sql.raw($SQL + $VALUE)\n sql.raw(`...${...}...`)\n const { sql } = require('drizzle-orm')\n...\n import { sql } from 'drizzle-orm'\n...\n", PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 34a088c12428d88cb58a84155f5586ef139b10bea1d9959b75fa52ecf036cfb7b8483fd3c405dea200487eb617d0e7ec98c89d1e9f5dbbdad0b091e89cb5a2ce_0
2025-06-01 17:18:30,887 - semgrep.rule_match - DEBUG - match_key = ("$ALIAS.raw($SQL + $VALUE)\n $ALIAS.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n $QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n const { sql: $ALIAS } = require('drizzle-orm')\n...\n import { sql as $ALIAS } from 'drizzle-orm'\n...\n db.execute(`...`) db.query(`...`) ./db (\\./|\\.\\./|/).*db($|/.*) import { db } from ./db\n...\n db.sql.raw($SQL + $VALUE)\n db.sql.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\ndb.sql.raw($QUERY)\n $QUERY = `...${...}...`\n...\ndb.sql.raw($QUERY)\n const db = require('drizzle-orm')\n...\n import db from 'drizzle-orm'\n...\n $QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n $QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n sql.raw($SQL + $VALUE)\n sql.raw(`...${...}...`)\n const { sql } = require('drizzle-orm')\n...\n import { sql } from 'drizzle-orm'\n...\n", PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 34a088c12428d88cb58a84155f5586ef139b10bea1d9959b75fa52ecf036cfb7b8483fd3c405dea200487eb617d0e7ec98c89d1e9f5dbbdad0b091e89cb5a2ce_0
2025-06-01 17:18:30,888 - semgrep.rule_match - DEBUG - match_key = ("$ALIAS.raw($SQL + $VALUE)\n $ALIAS.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\n$ALIAS.raw($QUERY)\n $QUERY = `...${...}...`\n...\n$ALIAS.raw($QUERY)\n const { sql: $ALIAS } = require('drizzle-orm')\n...\n import { sql as $ALIAS } from 'drizzle-orm'\n...\n db.execute(`...`) db.query(`...`) ./db (\\./|\\.\\./|/).*db($|/.*) import { db } from ./db\n...\n db.sql.raw($SQL + $VALUE)\n db.sql.raw(`...${...}...`)\n $QUERY = $SQL + $VALUE\n...\ndb.sql.raw($QUERY)\n $QUERY = `...${...}...`\n...\ndb.sql.raw($QUERY)\n const db = require('drizzle-orm')\n...\n import db from 'drizzle-orm'\n...\n $QUERY = $SQL + $VALUE\n...\nsql.raw($QUERY)\n $QUERY = `...${...}...`\n...\nsql.raw($QUERY)\n sql.raw($SQL + $VALUE)\n sql.raw(`...${...}...`)\n const { sql } = require('drizzle-orm')\n...\n import { sql } from 'drizzle-orm'\n...\n", PosixPath('server/routes.ts'), 'config..semgrep.replit-rules.javascript.drizzle-orm.security.audit.ban-drizzle-sql-raw') match_id = 34a088c12428d88cb58a84155f5586ef139b10bea1d9959b75fa52ecf036cfb7b8483fd3c405dea200487eb617d0e7ec98c89d1e9f5dbbdad0b091e89cb5a2ce_1
2025-06-01 17:18:30,891 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:32.316354 on 178 files
2025-06-01 17:18:30,892 - semgrep.core_runner - DEBUG - findings summary: 10 warning, 2 error, 0 info
2025-06-01 17:18:30,895 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-06-01 17:18:30,895 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-06-01 17:18:30,896 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEI75MkSp/semgrep/bin/semgrep-core-proprietary'.
2025-06-01 17:18:31,040 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • <none>

  Partially analyzed due to parsing or internal Opengrep errors

   • tailwind.config.ts (1 lines skipped)

2025-06-01 17:18:31,041 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 1 files only partially analyzed due to parsing or internal Opengrep errors

Ran 435 rules on 178 files: 12 findings.
2025-06-01 17:18:31,042 - semgrep.app.version - DEBUG - Version cache does not exist
2025-06-01 17:18:31,058 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
